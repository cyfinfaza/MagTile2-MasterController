
MagTile2-MasterController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b54  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007dac  08007dac  00008dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dec  08007dec  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007dec  08007dec  00008dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df4  08007df4  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00008df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007df8  08007df8  00008df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007dfc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000010  08007e0c  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08007e0c  000094e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfc6  00000000  00000000  00009046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316d  00000000  00000000  0002500c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00028180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001119  00000000  00000000  000297a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002338c  00000000  00000000  0002a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8ce  00000000  00000000  0004dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de5a0  00000000  00000000  0006951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006238  00000000  00000000  00147b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000010 	.word	0x20000010
 8000274:	00000000 	.word	0x00000000
 8000278:	08007d94 	.word	0x08007d94

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000014 	.word	0x20000014
 8000294:	08007d94 	.word	0x08007d94

08000298 <__aeabi_dmul>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800029e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002a6:	bf1d      	ittte	ne
 80002a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002ac:	ea94 0f0c 	teqne	r4, ip
 80002b0:	ea95 0f0c 	teqne	r5, ip
 80002b4:	f000 f8de 	bleq	8000474 <__aeabi_dmul+0x1dc>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea81 0603 	eor.w	r6, r1, r3
 80002be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002ca:	bf18      	it	ne
 80002cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d8:	d038      	beq.n	800034c <__aeabi_dmul+0xb4>
 80002da:	fba0 ce02 	umull	ip, lr, r0, r2
 80002de:	f04f 0500 	mov.w	r5, #0
 80002e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ee:	f04f 0600 	mov.w	r6, #0
 80002f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002f6:	f09c 0f00 	teq	ip, #0
 80002fa:	bf18      	it	ne
 80002fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000300:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000304:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000308:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800030c:	d204      	bcs.n	8000318 <__aeabi_dmul+0x80>
 800030e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000312:	416d      	adcs	r5, r5
 8000314:	eb46 0606 	adc.w	r6, r6, r6
 8000318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800031c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000324:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000328:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800032c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000330:	bf88      	it	hi
 8000332:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000336:	d81e      	bhi.n	8000376 <__aeabi_dmul+0xde>
 8000338:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000350:	ea46 0101 	orr.w	r1, r6, r1
 8000354:	ea40 0002 	orr.w	r0, r0, r2
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000360:	bfc2      	ittt	gt
 8000362:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800036a:	bd70      	popgt	{r4, r5, r6, pc}
 800036c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000370:	f04f 0e00 	mov.w	lr, #0
 8000374:	3c01      	subs	r4, #1
 8000376:	f300 80ab 	bgt.w	80004d0 <__aeabi_dmul+0x238>
 800037a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800037e:	bfde      	ittt	le
 8000380:	2000      	movle	r0, #0
 8000382:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd70      	pople	{r4, r5, r6, pc}
 8000388:	f1c4 0400 	rsb	r4, r4, #0
 800038c:	3c20      	subs	r4, #32
 800038e:	da35      	bge.n	80003fc <__aeabi_dmul+0x164>
 8000390:	340c      	adds	r4, #12
 8000392:	dc1b      	bgt.n	80003cc <__aeabi_dmul+0x134>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0520 	rsb	r5, r4, #32
 800039c:	fa00 f305 	lsl.w	r3, r0, r5
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea40 0002 	orr.w	r0, r0, r2
 80003ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b8:	fa21 f604 	lsr.w	r6, r1, r4
 80003bc:	eb42 0106 	adc.w	r1, r2, r6
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f1c4 040c 	rsb	r4, r4, #12
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f304 	lsl.w	r3, r0, r4
 80003d8:	fa20 f005 	lsr.w	r0, r0, r5
 80003dc:	fa01 f204 	lsl.w	r2, r1, r4
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f1c4 0520 	rsb	r5, r4, #32
 8000400:	fa00 f205 	lsl.w	r2, r0, r5
 8000404:	ea4e 0e02 	orr.w	lr, lr, r2
 8000408:	fa20 f304 	lsr.w	r3, r0, r4
 800040c:	fa01 f205 	lsl.w	r2, r1, r5
 8000410:	ea43 0302 	orr.w	r3, r3, r2
 8000414:	fa21 f004 	lsr.w	r0, r1, r4
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800041c:	fa21 f204 	lsr.w	r2, r1, r4
 8000420:	ea20 0002 	bic.w	r0, r0, r2
 8000424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f094 0f00 	teq	r4, #0
 8000438:	d10f      	bne.n	800045a <__aeabi_dmul+0x1c2>
 800043a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800043e:	0040      	lsls	r0, r0, #1
 8000440:	eb41 0101 	adc.w	r1, r1, r1
 8000444:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000448:	bf08      	it	eq
 800044a:	3c01      	subeq	r4, #1
 800044c:	d0f7      	beq.n	800043e <__aeabi_dmul+0x1a6>
 800044e:	ea41 0106 	orr.w	r1, r1, r6
 8000452:	f095 0f00 	teq	r5, #0
 8000456:	bf18      	it	ne
 8000458:	4770      	bxne	lr
 800045a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	eb43 0303 	adc.w	r3, r3, r3
 8000464:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000468:	bf08      	it	eq
 800046a:	3d01      	subeq	r5, #1
 800046c:	d0f7      	beq.n	800045e <__aeabi_dmul+0x1c6>
 800046e:	ea43 0306 	orr.w	r3, r3, r6
 8000472:	4770      	bx	lr
 8000474:	ea94 0f0c 	teq	r4, ip
 8000478:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800047c:	bf18      	it	ne
 800047e:	ea95 0f0c 	teqne	r5, ip
 8000482:	d00c      	beq.n	800049e <__aeabi_dmul+0x206>
 8000484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000488:	bf18      	it	ne
 800048a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048e:	d1d1      	bne.n	8000434 <__aeabi_dmul+0x19c>
 8000490:	ea81 0103 	eor.w	r1, r1, r3
 8000494:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd70      	pop	{r4, r5, r6, pc}
 800049e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a2:	bf06      	itte	eq
 80004a4:	4610      	moveq	r0, r2
 80004a6:	4619      	moveq	r1, r3
 80004a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004ac:	d019      	beq.n	80004e2 <__aeabi_dmul+0x24a>
 80004ae:	ea94 0f0c 	teq	r4, ip
 80004b2:	d102      	bne.n	80004ba <__aeabi_dmul+0x222>
 80004b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b8:	d113      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004ba:	ea95 0f0c 	teq	r5, ip
 80004be:	d105      	bne.n	80004cc <__aeabi_dmul+0x234>
 80004c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004c4:	bf1c      	itt	ne
 80004c6:	4610      	movne	r0, r2
 80004c8:	4619      	movne	r1, r3
 80004ca:	d10a      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004cc:	ea81 0103 	eor.w	r1, r1, r3
 80004d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004ea:	bd70      	pop	{r4, r5, r6, pc}

080004ec <__aeabi_drsub>:
 80004ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e002      	b.n	80004f8 <__adddf3>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dsub>:
 80004f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f8 <__adddf3>:
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000502:	ea94 0f05 	teq	r4, r5
 8000506:	bf08      	it	eq
 8000508:	ea90 0f02 	teqeq	r0, r2
 800050c:	bf1f      	itttt	ne
 800050e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000512:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000516:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800051a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051e:	f000 80e2 	beq.w	80006e6 <__adddf3+0x1ee>
 8000522:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000526:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800052a:	bfb8      	it	lt
 800052c:	426d      	neglt	r5, r5
 800052e:	dd0c      	ble.n	800054a <__adddf3+0x52>
 8000530:	442c      	add	r4, r5
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	ea82 0000 	eor.w	r0, r2, r0
 800053e:	ea83 0101 	eor.w	r1, r3, r1
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	2d36      	cmp	r5, #54	@ 0x36
 800054c:	bf88      	it	hi
 800054e:	bd30      	pophi	{r4, r5, pc}
 8000550:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000554:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000558:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800055c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000560:	d002      	beq.n	8000568 <__adddf3+0x70>
 8000562:	4240      	negs	r0, r0
 8000564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000568:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800056c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000570:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x84>
 8000576:	4252      	negs	r2, r2
 8000578:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800057c:	ea94 0f05 	teq	r4, r5
 8000580:	f000 80a7 	beq.w	80006d2 <__adddf3+0x1da>
 8000584:	f1a4 0401 	sub.w	r4, r4, #1
 8000588:	f1d5 0e20 	rsbs	lr, r5, #32
 800058c:	db0d      	blt.n	80005aa <__adddf3+0xb2>
 800058e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000592:	fa22 f205 	lsr.w	r2, r2, r5
 8000596:	1880      	adds	r0, r0, r2
 8000598:	f141 0100 	adc.w	r1, r1, #0
 800059c:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a0:	1880      	adds	r0, r0, r2
 80005a2:	fa43 f305 	asr.w	r3, r3, r5
 80005a6:	4159      	adcs	r1, r3
 80005a8:	e00e      	b.n	80005c8 <__adddf3+0xd0>
 80005aa:	f1a5 0520 	sub.w	r5, r5, #32
 80005ae:	f10e 0e20 	add.w	lr, lr, #32
 80005b2:	2a01      	cmp	r2, #1
 80005b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b8:	bf28      	it	cs
 80005ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	18c0      	adds	r0, r0, r3
 80005c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	d507      	bpl.n	80005de <__adddf3+0xe6>
 80005ce:	f04f 0e00 	mov.w	lr, #0
 80005d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005da:	eb6e 0101 	sbc.w	r1, lr, r1
 80005de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005e2:	d31b      	bcc.n	800061c <__adddf3+0x124>
 80005e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e8:	d30c      	bcc.n	8000604 <__adddf3+0x10c>
 80005ea:	0849      	lsrs	r1, r1, #1
 80005ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f4:	f104 0401 	add.w	r4, r4, #1
 80005f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000600:	f080 809a 	bcs.w	8000738 <__adddf3+0x240>
 8000604:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	ea41 0105 	orr.w	r1, r1, r5
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000620:	4140      	adcs	r0, r0
 8000622:	eb41 0101 	adc.w	r1, r1, r1
 8000626:	3c01      	subs	r4, #1
 8000628:	bf28      	it	cs
 800062a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800062e:	d2e9      	bcs.n	8000604 <__adddf3+0x10c>
 8000630:	f091 0f00 	teq	r1, #0
 8000634:	bf04      	itt	eq
 8000636:	4601      	moveq	r1, r0
 8000638:	2000      	moveq	r0, #0
 800063a:	fab1 f381 	clz	r3, r1
 800063e:	bf08      	it	eq
 8000640:	3320      	addeq	r3, #32
 8000642:	f1a3 030b 	sub.w	r3, r3, #11
 8000646:	f1b3 0220 	subs.w	r2, r3, #32
 800064a:	da0c      	bge.n	8000666 <__adddf3+0x16e>
 800064c:	320c      	adds	r2, #12
 800064e:	dd08      	ble.n	8000662 <__adddf3+0x16a>
 8000650:	f102 0c14 	add.w	ip, r2, #20
 8000654:	f1c2 020c 	rsb	r2, r2, #12
 8000658:	fa01 f00c 	lsl.w	r0, r1, ip
 800065c:	fa21 f102 	lsr.w	r1, r1, r2
 8000660:	e00c      	b.n	800067c <__adddf3+0x184>
 8000662:	f102 0214 	add.w	r2, r2, #20
 8000666:	bfd8      	it	le
 8000668:	f1c2 0c20 	rsble	ip, r2, #32
 800066c:	fa01 f102 	lsl.w	r1, r1, r2
 8000670:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000674:	bfdc      	itt	le
 8000676:	ea41 010c 	orrle.w	r1, r1, ip
 800067a:	4090      	lslle	r0, r2
 800067c:	1ae4      	subs	r4, r4, r3
 800067e:	bfa2      	ittt	ge
 8000680:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000684:	4329      	orrge	r1, r5
 8000686:	bd30      	popge	{r4, r5, pc}
 8000688:	ea6f 0404 	mvn.w	r4, r4
 800068c:	3c1f      	subs	r4, #31
 800068e:	da1c      	bge.n	80006ca <__adddf3+0x1d2>
 8000690:	340c      	adds	r4, #12
 8000692:	dc0e      	bgt.n	80006b2 <__adddf3+0x1ba>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0220 	rsb	r2, r4, #32
 800069c:	fa20 f004 	lsr.w	r0, r0, r4
 80006a0:	fa01 f302 	lsl.w	r3, r1, r2
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	fa21 f304 	lsr.w	r3, r1, r4
 80006ac:	ea45 0103 	orr.w	r1, r5, r3
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f1c4 040c 	rsb	r4, r4, #12
 80006b6:	f1c4 0220 	rsb	r2, r4, #32
 80006ba:	fa20 f002 	lsr.w	r0, r0, r2
 80006be:	fa01 f304 	lsl.w	r3, r1, r4
 80006c2:	ea40 0003 	orr.w	r0, r0, r3
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	fa21 f004 	lsr.w	r0, r1, r4
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f094 0f00 	teq	r4, #0
 80006d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006da:	bf06      	itte	eq
 80006dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e0:	3401      	addeq	r4, #1
 80006e2:	3d01      	subne	r5, #1
 80006e4:	e74e      	b.n	8000584 <__adddf3+0x8c>
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf18      	it	ne
 80006ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f0:	d029      	beq.n	8000746 <__adddf3+0x24e>
 80006f2:	ea94 0f05 	teq	r4, r5
 80006f6:	bf08      	it	eq
 80006f8:	ea90 0f02 	teqeq	r0, r2
 80006fc:	d005      	beq.n	800070a <__adddf3+0x212>
 80006fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000702:	bf04      	itt	eq
 8000704:	4619      	moveq	r1, r3
 8000706:	4610      	moveq	r0, r2
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea91 0f03 	teq	r1, r3
 800070e:	bf1e      	ittt	ne
 8000710:	2100      	movne	r1, #0
 8000712:	2000      	movne	r0, #0
 8000714:	bd30      	popne	{r4, r5, pc}
 8000716:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800071a:	d105      	bne.n	8000728 <__adddf3+0x230>
 800071c:	0040      	lsls	r0, r0, #1
 800071e:	4149      	adcs	r1, r1
 8000720:	bf28      	it	cs
 8000722:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd30      	pop	{r4, r5, pc}
 8000728:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800072c:	bf3c      	itt	cc
 800072e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000732:	bd30      	popcc	{r4, r5, pc}
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000738:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074a:	bf1a      	itte	ne
 800074c:	4619      	movne	r1, r3
 800074e:	4610      	movne	r0, r2
 8000750:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000754:	bf1c      	itt	ne
 8000756:	460b      	movne	r3, r1
 8000758:	4602      	movne	r2, r0
 800075a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075e:	bf06      	itte	eq
 8000760:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000764:	ea91 0f03 	teqeq	r1, r3
 8000768:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	bf00      	nop

08000770 <__aeabi_ui2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000784:	f04f 0500 	mov.w	r5, #0
 8000788:	f04f 0100 	mov.w	r1, #0
 800078c:	e750      	b.n	8000630 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_i2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a8:	bf48      	it	mi
 80007aa:	4240      	negmi	r0, r0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	e73e      	b.n	8000630 <__adddf3+0x138>
 80007b2:	bf00      	nop

080007b4 <__aeabi_f2d>:
 80007b4:	0042      	lsls	r2, r0, #1
 80007b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007c2:	bf1f      	itttt	ne
 80007c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d0:	4770      	bxne	lr
 80007d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007d6:	bf08      	it	eq
 80007d8:	4770      	bxeq	lr
 80007da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007de:	bf04      	itt	eq
 80007e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007e4:	4770      	bxeq	lr
 80007e6:	b530      	push	{r4, r5, lr}
 80007e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	e71c      	b.n	8000630 <__adddf3+0x138>
 80007f6:	bf00      	nop

080007f8 <__aeabi_ul2d>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	f04f 0500 	mov.w	r5, #0
 8000806:	e00a      	b.n	800081e <__aeabi_l2d+0x16>

08000808 <__aeabi_l2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000816:	d502      	bpl.n	800081e <__aeabi_l2d+0x16>
 8000818:	4240      	negs	r0, r0
 800081a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000822:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800082a:	f43f aed8 	beq.w	80005de <__adddf3+0xe6>
 800082e:	f04f 0203 	mov.w	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	fa00 fc03 	lsl.w	ip, r0, r3
 800084e:	fa20 f002 	lsr.w	r0, r0, r2
 8000852:	fa01 fe03 	lsl.w	lr, r1, r3
 8000856:	ea40 000e 	orr.w	r0, r0, lr
 800085a:	fa21 f102 	lsr.w	r1, r1, r2
 800085e:	4414      	add	r4, r2
 8000860:	e6bd      	b.n	80005de <__adddf3+0xe6>
 8000862:	bf00      	nop

08000864 <__gedf2>:
 8000864:	f04f 3cff 	mov.w	ip, #4294967295
 8000868:	e006      	b.n	8000878 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__ledf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	e002      	b.n	8000878 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__cmpdf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	f84d cd04 	str.w	ip, [sp, #-4]!
 800087c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000884:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800088e:	d01b      	beq.n	80008c8 <__cmpdf2+0x54>
 8000890:	b001      	add	sp, #4
 8000892:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000896:	bf0c      	ite	eq
 8000898:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800089c:	ea91 0f03 	teqne	r1, r3
 80008a0:	bf02      	ittt	eq
 80008a2:	ea90 0f02 	teqeq	r0, r2
 80008a6:	2000      	moveq	r0, #0
 80008a8:	4770      	bxeq	lr
 80008aa:	f110 0f00 	cmn.w	r0, #0
 80008ae:	ea91 0f03 	teq	r1, r3
 80008b2:	bf58      	it	pl
 80008b4:	4299      	cmppl	r1, r3
 80008b6:	bf08      	it	eq
 80008b8:	4290      	cmpeq	r0, r2
 80008ba:	bf2c      	ite	cs
 80008bc:	17d8      	asrcs	r0, r3, #31
 80008be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008c2:	f040 0001 	orr.w	r0, r0, #1
 80008c6:	4770      	bx	lr
 80008c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d0:	d102      	bne.n	80008d8 <__cmpdf2+0x64>
 80008d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008d6:	d107      	bne.n	80008e8 <__cmpdf2+0x74>
 80008d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e0:	d1d6      	bne.n	8000890 <__cmpdf2+0x1c>
 80008e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008e6:	d0d3      	beq.n	8000890 <__cmpdf2+0x1c>
 80008e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <__aeabi_cdrcmple>:
 80008f0:	4684      	mov	ip, r0
 80008f2:	4610      	mov	r0, r2
 80008f4:	4662      	mov	r2, ip
 80008f6:	468c      	mov	ip, r1
 80008f8:	4619      	mov	r1, r3
 80008fa:	4663      	mov	r3, ip
 80008fc:	e000      	b.n	8000900 <__aeabi_cdcmpeq>
 80008fe:	bf00      	nop

08000900 <__aeabi_cdcmpeq>:
 8000900:	b501      	push	{r0, lr}
 8000902:	f7ff ffb7 	bl	8000874 <__cmpdf2>
 8000906:	2800      	cmp	r0, #0
 8000908:	bf48      	it	mi
 800090a:	f110 0f00 	cmnmi.w	r0, #0
 800090e:	bd01      	pop	{r0, pc}

08000910 <__aeabi_dcmpeq>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff fff4 	bl	8000900 <__aeabi_cdcmpeq>
 8000918:	bf0c      	ite	eq
 800091a:	2001      	moveq	r0, #1
 800091c:	2000      	movne	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmplt>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffea 	bl	8000900 <__aeabi_cdcmpeq>
 800092c:	bf34      	ite	cc
 800092e:	2001      	movcc	r0, #1
 8000930:	2000      	movcs	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmple>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffe0 	bl	8000900 <__aeabi_cdcmpeq>
 8000940:	bf94      	ite	ls
 8000942:	2001      	movls	r0, #1
 8000944:	2000      	movhi	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmpge>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffce 	bl	80008f0 <__aeabi_cdrcmple>
 8000954:	bf94      	ite	ls
 8000956:	2001      	movls	r0, #1
 8000958:	2000      	movhi	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmpgt>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffc4 	bl	80008f0 <__aeabi_cdrcmple>
 8000968:	bf34      	ite	cc
 800096a:	2001      	movcc	r0, #1
 800096c:	2000      	movcs	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b9b0 	b.w	8000d8c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000a4a:	4688      	mov	r8, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	468e      	mov	lr, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d95f      	bls.n	8000b1a <__udivmoddi4+0xd6>
 8000a5a:	fab2 f682 	clz	r6, r2
 8000a5e:	b14e      	cbz	r6, 8000a74 <__udivmoddi4+0x30>
 8000a60:	f1c6 0320 	rsb	r3, r6, #32
 8000a64:	fa01 fe06 	lsl.w	lr, r1, r6
 8000a68:	40b7      	lsls	r7, r6
 8000a6a:	40b4      	lsls	r4, r6
 8000a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a70:	ea43 0e0e 	orr.w	lr, r3, lr
 8000a74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a78:	fa1f fc87 	uxth.w	ip, r7
 8000a7c:	0c23      	lsrs	r3, r4, #16
 8000a7e:	fbbe f1f8 	udiv	r1, lr, r8
 8000a82:	fb08 ee11 	mls	lr, r8, r1, lr
 8000a86:	fb01 f20c 	mul.w	r2, r1, ip
 8000a8a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d907      	bls.n	8000aa2 <__udivmoddi4+0x5e>
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a98:	d202      	bcs.n	8000aa0 <__udivmoddi4+0x5c>
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	f200 8154 	bhi.w	8000d48 <__udivmoddi4+0x304>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	b2a2      	uxth	r2, r4
 8000aa6:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aaa:	fb08 3310 	mls	r3, r8, r0, r3
 8000aae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000ab6:	4594      	cmp	ip, r2
 8000ab8:	d90b      	bls.n	8000ad2 <__udivmoddi4+0x8e>
 8000aba:	18ba      	adds	r2, r7, r2
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	bf2c      	ite	cs
 8000ac2:	2401      	movcs	r4, #1
 8000ac4:	2400      	movcc	r4, #0
 8000ac6:	4594      	cmp	ip, r2
 8000ac8:	d902      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000aca:	2c00      	cmp	r4, #0
 8000acc:	f000 813f 	beq.w	8000d4e <__udivmoddi4+0x30a>
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad6:	eba2 020c 	sub.w	r2, r2, ip
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11d      	cbz	r5, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40f2      	lsrs	r2, r6
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e9c5 2300 	strd	r2, r3, [r5]
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d905      	bls.n	8000afa <__udivmoddi4+0xb6>
 8000aee:	b10d      	cbz	r5, 8000af4 <__udivmoddi4+0xb0>
 8000af0:	e9c5 0100 	strd	r0, r1, [r5]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4608      	mov	r0, r1
 8000af8:	e7f5      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000afa:	fab3 f183 	clz	r1, r3
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d14e      	bne.n	8000ba0 <__udivmoddi4+0x15c>
 8000b02:	4543      	cmp	r3, r8
 8000b04:	f0c0 8112 	bcc.w	8000d2c <__udivmoddi4+0x2e8>
 8000b08:	4282      	cmp	r2, r0
 8000b0a:	f240 810f 	bls.w	8000d2c <__udivmoddi4+0x2e8>
 8000b0e:	4608      	mov	r0, r1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e8      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b14:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b18:	e7e5      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f000 80ac 	beq.w	8000c78 <__udivmoddi4+0x234>
 8000b20:	fab2 f682 	clz	r6, r2
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	f040 80bb 	bne.w	8000ca0 <__udivmoddi4+0x25c>
 8000b2a:	1a8b      	subs	r3, r1, r2
 8000b2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b30:	b2bc      	uxth	r4, r7
 8000b32:	2101      	movs	r1, #1
 8000b34:	0c02      	lsrs	r2, r0, #16
 8000b36:	b280      	uxth	r0, r0
 8000b38:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b40:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000b44:	fb04 f20c 	mul.w	r2, r4, ip
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d90e      	bls.n	8000b6a <__udivmoddi4+0x126>
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b52:	bf2c      	ite	cs
 8000b54:	f04f 0901 	movcs.w	r9, #1
 8000b58:	f04f 0900 	movcc.w	r9, #0
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d903      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b60:	f1b9 0f00 	cmp.w	r9, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x2fc>
 8000b68:	46c4      	mov	ip, r8
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b74:	fb04 f408 	mul.w	r4, r4, r8
 8000b78:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000b7c:	4294      	cmp	r4, r2
 8000b7e:	d90b      	bls.n	8000b98 <__udivmoddi4+0x154>
 8000b80:	18ba      	adds	r2, r7, r2
 8000b82:	f108 33ff 	add.w	r3, r8, #4294967295
 8000b86:	bf2c      	ite	cs
 8000b88:	2001      	movcs	r0, #1
 8000b8a:	2000      	movcc	r0, #0
 8000b8c:	4294      	cmp	r4, r2
 8000b8e:	d902      	bls.n	8000b96 <__udivmoddi4+0x152>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	f000 80d1 	beq.w	8000d38 <__udivmoddi4+0x2f4>
 8000b96:	4698      	mov	r8, r3
 8000b98:	1b12      	subs	r2, r2, r4
 8000b9a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000b9e:	e79d      	b.n	8000adc <__udivmoddi4+0x98>
 8000ba0:	f1c1 0620 	rsb	r6, r1, #32
 8000ba4:	408b      	lsls	r3, r1
 8000ba6:	fa08 f401 	lsl.w	r4, r8, r1
 8000baa:	fa00 f901 	lsl.w	r9, r0, r1
 8000bae:	fa22 f706 	lsr.w	r7, r2, r6
 8000bb2:	fa28 f806 	lsr.w	r8, r8, r6
 8000bb6:	408a      	lsls	r2, r1
 8000bb8:	431f      	orrs	r7, r3
 8000bba:	fa20 f306 	lsr.w	r3, r0, r6
 8000bbe:	0c38      	lsrs	r0, r7, #16
 8000bc0:	4323      	orrs	r3, r4
 8000bc2:	fa1f fc87 	uxth.w	ip, r7
 8000bc6:	0c1c      	lsrs	r4, r3, #16
 8000bc8:	fbb8 fef0 	udiv	lr, r8, r0
 8000bcc:	fb00 881e 	mls	r8, r0, lr, r8
 8000bd0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000bd4:	fb0e f80c 	mul.w	r8, lr, ip
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	d90e      	bls.n	8000bfa <__udivmoddi4+0x1b6>
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000be2:	bf2c      	ite	cs
 8000be4:	f04f 0b01 	movcs.w	fp, #1
 8000be8:	f04f 0b00 	movcc.w	fp, #0
 8000bec:	45a0      	cmp	r8, r4
 8000bee:	d903      	bls.n	8000bf8 <__udivmoddi4+0x1b4>
 8000bf0:	f1bb 0f00 	cmp.w	fp, #0
 8000bf4:	f000 80b8 	beq.w	8000d68 <__udivmoddi4+0x324>
 8000bf8:	46d6      	mov	lr, sl
 8000bfa:	eba4 0408 	sub.w	r4, r4, r8
 8000bfe:	fa1f f883 	uxth.w	r8, r3
 8000c02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c06:	fb00 4413 	mls	r4, r0, r3, r4
 8000c0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c0e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000c12:	45a4      	cmp	ip, r4
 8000c14:	d90e      	bls.n	8000c34 <__udivmoddi4+0x1f0>
 8000c16:	193c      	adds	r4, r7, r4
 8000c18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c1c:	bf2c      	ite	cs
 8000c1e:	f04f 0801 	movcs.w	r8, #1
 8000c22:	f04f 0800 	movcc.w	r8, #0
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d903      	bls.n	8000c32 <__udivmoddi4+0x1ee>
 8000c2a:	f1b8 0f00 	cmp.w	r8, #0
 8000c2e:	f000 809f 	beq.w	8000d70 <__udivmoddi4+0x32c>
 8000c32:	4603      	mov	r3, r0
 8000c34:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c38:	eba4 040c 	sub.w	r4, r4, ip
 8000c3c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c40:	4564      	cmp	r4, ip
 8000c42:	4673      	mov	r3, lr
 8000c44:	46e0      	mov	r8, ip
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0x20a>
 8000c48:	d107      	bne.n	8000c5a <__udivmoddi4+0x216>
 8000c4a:	45f1      	cmp	r9, lr
 8000c4c:	d205      	bcs.n	8000c5a <__udivmoddi4+0x216>
 8000c4e:	ebbe 0302 	subs.w	r3, lr, r2
 8000c52:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c56:	3801      	subs	r0, #1
 8000c58:	46e0      	mov	r8, ip
 8000c5a:	b15d      	cbz	r5, 8000c74 <__udivmoddi4+0x230>
 8000c5c:	ebb9 0203 	subs.w	r2, r9, r3
 8000c60:	eb64 0408 	sbc.w	r4, r4, r8
 8000c64:	fa04 f606 	lsl.w	r6, r4, r6
 8000c68:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	431e      	orrs	r6, r3
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e736      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000c78:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7c:	0c01      	lsrs	r1, r0, #16
 8000c7e:	4614      	mov	r4, r2
 8000c80:	b280      	uxth	r0, r0
 8000c82:	4696      	mov	lr, r2
 8000c84:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000c88:	2620      	movs	r6, #32
 8000c8a:	4690      	mov	r8, r2
 8000c8c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000c90:	4610      	mov	r0, r2
 8000c92:	fbb1 f1f2 	udiv	r1, r1, r2
 8000c96:	eba3 0308 	sub.w	r3, r3, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e74b      	b.n	8000b38 <__udivmoddi4+0xf4>
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	f1c6 0320 	rsb	r3, r6, #32
 8000ca6:	fa01 f206 	lsl.w	r2, r1, r6
 8000caa:	fa21 f803 	lsr.w	r8, r1, r3
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb6:	b2bc      	uxth	r4, r7
 8000cb8:	40b0      	lsls	r0, r6
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	0c02      	lsrs	r2, r0, #16
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	b280      	uxth	r0, r0
 8000cc2:	fbb8 f9fe 	udiv	r9, r8, lr
 8000cc6:	fb0e 8819 	mls	r8, lr, r9, r8
 8000cca:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000cce:	fb09 f804 	mul.w	r8, r9, r4
 8000cd2:	4588      	cmp	r8, r1
 8000cd4:	d951      	bls.n	8000d7a <__udivmoddi4+0x336>
 8000cd6:	1879      	adds	r1, r7, r1
 8000cd8:	f109 3cff 	add.w	ip, r9, #4294967295
 8000cdc:	bf2c      	ite	cs
 8000cde:	f04f 0a01 	movcs.w	sl, #1
 8000ce2:	f04f 0a00 	movcc.w	sl, #0
 8000ce6:	4588      	cmp	r8, r1
 8000ce8:	d902      	bls.n	8000cf0 <__udivmoddi4+0x2ac>
 8000cea:	f1ba 0f00 	cmp.w	sl, #0
 8000cee:	d031      	beq.n	8000d54 <__udivmoddi4+0x310>
 8000cf0:	eba1 0108 	sub.w	r1, r1, r8
 8000cf4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf8:	fb09 f804 	mul.w	r8, r9, r4
 8000cfc:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	4543      	cmp	r3, r8
 8000d08:	d235      	bcs.n	8000d76 <__udivmoddi4+0x332>
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d10:	bf2c      	ite	cs
 8000d12:	f04f 0a01 	movcs.w	sl, #1
 8000d16:	f04f 0a00 	movcc.w	sl, #0
 8000d1a:	4543      	cmp	r3, r8
 8000d1c:	d2bb      	bcs.n	8000c96 <__udivmoddi4+0x252>
 8000d1e:	f1ba 0f00 	cmp.w	sl, #0
 8000d22:	d1b8      	bne.n	8000c96 <__udivmoddi4+0x252>
 8000d24:	f1a9 0102 	sub.w	r1, r9, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	e7b4      	b.n	8000c96 <__udivmoddi4+0x252>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb68 0203 	sbc.w	r2, r8, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4696      	mov	lr, r2
 8000d36:	e6eb      	b.n	8000b10 <__udivmoddi4+0xcc>
 8000d38:	443a      	add	r2, r7
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	e72b      	b.n	8000b98 <__udivmoddi4+0x154>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	443b      	add	r3, r7
 8000d46:	e710      	b.n	8000b6a <__udivmoddi4+0x126>
 8000d48:	3902      	subs	r1, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	e6a9      	b.n	8000aa2 <__udivmoddi4+0x5e>
 8000d4e:	443a      	add	r2, r7
 8000d50:	3802      	subs	r0, #2
 8000d52:	e6be      	b.n	8000ad2 <__udivmoddi4+0x8e>
 8000d54:	eba7 0808 	sub.w	r8, r7, r8
 8000d58:	f1a9 0c02 	sub.w	ip, r9, #2
 8000d5c:	4441      	add	r1, r8
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fb09 f804 	mul.w	r8, r9, r4
 8000d66:	e7c9      	b.n	8000cfc <__udivmoddi4+0x2b8>
 8000d68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	e744      	b.n	8000bfa <__udivmoddi4+0x1b6>
 8000d70:	3b02      	subs	r3, #2
 8000d72:	443c      	add	r4, r7
 8000d74:	e75e      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000d76:	4649      	mov	r1, r9
 8000d78:	e78d      	b.n	8000c96 <__udivmoddi4+0x252>
 8000d7a:	eba1 0108 	sub.w	r1, r1, r8
 8000d7e:	46cc      	mov	ip, r9
 8000d80:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d84:	fb09 f804 	mul.w	r8, r9, r4
 8000d88:	e7b8      	b.n	8000cfc <__udivmoddi4+0x2b8>
 8000d8a:	bf00      	nop

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 ffa4 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f9be 	bl	8001118 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d9c:	f000 fa30 	bl	8001200 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 fc42 	bl	8001628 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000da4:	f000 fa62 	bl	800126c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000da8:	f000 fb14 	bl	80013d4 <MX_FDCAN1_Init>
  MX_FLASH_Init();
 8000dac:	f000 fb58 	bl	8001460 <MX_FLASH_Init>
  MX_I2C1_Init();
 8000db0:	f000 fb68 	bl	8001484 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000db4:	f000 fbba 	bl	800152c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000db8:	f000 fc04 	bl	80015c4 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 8000dbc:	f000 fba2 	bl	8001504 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  // calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dc0:	217f      	movs	r1, #127	@ 0x7f
 8000dc2:	48ab      	ldr	r0, [pc, #684]	@ (8001070 <main+0x2e0>)
 8000dc4:	f002 fa10 	bl	80031e8 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// read all digital inputs
	OV_SENSE_HV = HAL_GPIO_ReadPin(OV_SENSE_HV_GPIO_Port, OV_SENSE_HV_Pin);
 8000dc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dcc:	48a9      	ldr	r0, [pc, #676]	@ (8001074 <main+0x2e4>)
 8000dce:	f002 ff21 	bl	8003c14 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4ba8      	ldr	r3, [pc, #672]	@ (8001078 <main+0x2e8>)
 8000dd8:	701a      	strb	r2, [r3, #0]
	OC_SENSE_HV = HAL_GPIO_ReadPin(OC_SENSE_HV_GPIO_Port, OC_SENSE_HV_Pin);
 8000dda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dde:	48a5      	ldr	r0, [pc, #660]	@ (8001074 <main+0x2e4>)
 8000de0:	f002 ff18 	bl	8003c14 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4ba4      	ldr	r3, [pc, #656]	@ (800107c <main+0x2ec>)
 8000dea:	701a      	strb	r2, [r3, #0]
	FAULT_12 = HAL_GPIO_ReadPin(FAULT_12_GPIO_Port, FAULT_12_Pin);
 8000dec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000df0:	48a0      	ldr	r0, [pc, #640]	@ (8001074 <main+0x2e4>)
 8000df2:	f002 ff0f 	bl	8003c14 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4ba1      	ldr	r3, [pc, #644]	@ (8001080 <main+0x2f0>)
 8000dfc:	701a      	strb	r2, [r3, #0]
	BUTTON = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000dfe:	2120      	movs	r1, #32
 8000e00:	48a0      	ldr	r0, [pc, #640]	@ (8001084 <main+0x2f4>)
 8000e02:	f002 ff07 	bl	8003c14 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b9f      	ldr	r3, [pc, #636]	@ (8001088 <main+0x2f8>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	BOOT0_SENSE = HAL_GPIO_ReadPin(BOOT0_SENSE_GPIO_Port, BOOT0_SENSE_Pin);
 8000e0e:	2180      	movs	r1, #128	@ 0x80
 8000e10:	489c      	ldr	r0, [pc, #624]	@ (8001084 <main+0x2f4>)
 8000e12:	f002 feff 	bl	8003c14 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800108c <main+0x2fc>)
 8000e1c:	701a      	strb	r2, [r3, #0]

	// write all digital outputs
	HAL_GPIO_WritePin(HV_RELAY_GPIO_Port, HV_RELAY_Pin, HV_RELAY);
 8000e1e:	4b9c      	ldr	r3, [pc, #624]	@ (8001090 <main+0x300>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	2108      	movs	r1, #8
 8000e26:	489b      	ldr	r0, [pc, #620]	@ (8001094 <main+0x304>)
 8000e28:	f002 ff0c 	bl	8003c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SHDN_12_GPIO_Port, SHDN_12_Pin, SHDN_12);
 8000e2c:	4b9a      	ldr	r3, [pc, #616]	@ (8001098 <main+0x308>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2110      	movs	r1, #16
 8000e34:	4897      	ldr	r0, [pc, #604]	@ (8001094 <main+0x304>)
 8000e36:	f002 ff05 	bl	8003c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_R_GPIO_Port, IND_R_Pin, !IND_R);
 8000e3a:	4b98      	ldr	r3, [pc, #608]	@ (800109c <main+0x30c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf0c      	ite	eq
 8000e42:	2301      	moveq	r3, #1
 8000e44:	2300      	movne	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4e:	4891      	ldr	r0, [pc, #580]	@ (8001094 <main+0x304>)
 8000e50:	f002 fef8 	bl	8003c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_G_GPIO_Port, IND_G_Pin, !IND_G);
 8000e54:	4b92      	ldr	r3, [pc, #584]	@ (80010a0 <main+0x310>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e68:	488a      	ldr	r0, [pc, #552]	@ (8001094 <main+0x304>)
 8000e6a:	f002 feeb 	bl	8003c44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_B_GPIO_Port, IND_B_Pin, !IND_B);
 8000e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80010a4 <main+0x314>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf0c      	ite	eq
 8000e76:	2301      	moveq	r3, #1
 8000e78:	2300      	movne	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e82:	4884      	ldr	r0, [pc, #528]	@ (8001094 <main+0x304>)
 8000e84:	f002 fede 	bl	8003c44 <HAL_GPIO_WritePin>

	// read all analog inputs
	HAL_ADC_Start(&hadc1);
 8000e88:	4879      	ldr	r0, [pc, #484]	@ (8001070 <main+0x2e0>)
 8000e8a:	f001 fb91 	bl	80025b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000e8e:	2164      	movs	r1, #100	@ 0x64
 8000e90:	4877      	ldr	r0, [pc, #476]	@ (8001070 <main+0x2e0>)
 8000e92:	f001 fbf0 	bl	8002676 <HAL_ADC_PollForConversion>
	V_SENSE_HV = HAL_ADC_GetValue(&hadc1);
 8000e96:	4876      	ldr	r0, [pc, #472]	@ (8001070 <main+0x2e0>)
 8000e98:	f001 fc7c 	bl	8002794 <HAL_ADC_GetValue>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b81      	ldr	r3, [pc, #516]	@ (80010a8 <main+0x318>)
 8000ea2:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000ea4:	2164      	movs	r1, #100	@ 0x64
 8000ea6:	4872      	ldr	r0, [pc, #456]	@ (8001070 <main+0x2e0>)
 8000ea8:	f001 fbe5 	bl	8002676 <HAL_ADC_PollForConversion>
	V_SENSE_12 = HAL_ADC_GetValue(&hadc1);
 8000eac:	4870      	ldr	r0, [pc, #448]	@ (8001070 <main+0x2e0>)
 8000eae:	f001 fc71 	bl	8002794 <HAL_ADC_GetValue>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80010ac <main+0x31c>)
 8000eb8:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000eba:	2164      	movs	r1, #100	@ 0x64
 8000ebc:	486c      	ldr	r0, [pc, #432]	@ (8001070 <main+0x2e0>)
 8000ebe:	f001 fbda 	bl	8002676 <HAL_ADC_PollForConversion>
	V_SENSE_5 = HAL_ADC_GetValue(&hadc1);
 8000ec2:	486b      	ldr	r0, [pc, #428]	@ (8001070 <main+0x2e0>)
 8000ec4:	f001 fc66 	bl	8002794 <HAL_ADC_GetValue>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b78      	ldr	r3, [pc, #480]	@ (80010b0 <main+0x320>)
 8000ece:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000ed0:	2164      	movs	r1, #100	@ 0x64
 8000ed2:	4867      	ldr	r0, [pc, #412]	@ (8001070 <main+0x2e0>)
 8000ed4:	f001 fbcf 	bl	8002676 <HAL_ADC_PollForConversion>
	I_SENSE_HV = HAL_ADC_GetValue(&hadc1);
 8000ed8:	4865      	ldr	r0, [pc, #404]	@ (8001070 <main+0x2e0>)
 8000eda:	f001 fc5b 	bl	8002794 <HAL_ADC_GetValue>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b74      	ldr	r3, [pc, #464]	@ (80010b4 <main+0x324>)
 8000ee4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000ee6:	2164      	movs	r1, #100	@ 0x64
 8000ee8:	4861      	ldr	r0, [pc, #388]	@ (8001070 <main+0x2e0>)
 8000eea:	f001 fbc4 	bl	8002676 <HAL_ADC_PollForConversion>
	I_SENSE_12 = HAL_ADC_GetValue(&hadc1);
 8000eee:	4860      	ldr	r0, [pc, #384]	@ (8001070 <main+0x2e0>)
 8000ef0:	f001 fc50 	bl	8002794 <HAL_ADC_GetValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80010b8 <main+0x328>)
 8000efa:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000efc:	2164      	movs	r1, #100	@ 0x64
 8000efe:	485c      	ldr	r0, [pc, #368]	@ (8001070 <main+0x2e0>)
 8000f00:	f001 fbb9 	bl	8002676 <HAL_ADC_PollForConversion>
	I_SENSE_5 = HAL_ADC_GetValue(&hadc1);
 8000f04:	485a      	ldr	r0, [pc, #360]	@ (8001070 <main+0x2e0>)
 8000f06:	f001 fc45 	bl	8002794 <HAL_ADC_GetValue>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80010bc <main+0x32c>)
 8000f10:	801a      	strh	r2, [r3, #0]

	// calculate measurements
	voltage_out_12 = V_SENSE_12 * 0.0080566406;
 8000f12:	4b66      	ldr	r3, [pc, #408]	@ (80010ac <main+0x31c>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc3a 	bl	8000790 <__aeabi_i2d>
 8000f1c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001050 <main+0x2c0>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff f9b9 	bl	8000298 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fd21 	bl	8000974 <__aeabi_d2f>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a62      	ldr	r2, [pc, #392]	@ (80010c0 <main+0x330>)
 8000f36:	6013      	str	r3, [r2, #0]
	voltage_out_5 = V_SENSE_5 * 0.0014648438;
 8000f38:	4b5d      	ldr	r3, [pc, #372]	@ (80010b0 <main+0x320>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fc27 	bl	8000790 <__aeabi_i2d>
 8000f42:	a345      	add	r3, pc, #276	@ (adr r3, 8001058 <main+0x2c8>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff f9a6 	bl	8000298 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd0e 	bl	8000974 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a5a      	ldr	r2, [pc, #360]	@ (80010c4 <main+0x334>)
 8000f5c:	6013      	str	r3, [r2, #0]
	voltage_out_HV = V_SENSE_HV * 0.0194091797;
 8000f5e:	4b52      	ldr	r3, [pc, #328]	@ (80010a8 <main+0x318>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fc14 	bl	8000790 <__aeabi_i2d>
 8000f68:	a33d      	add	r3, pc, #244	@ (adr r3, 8001060 <main+0x2d0>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff f993 	bl	8000298 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fcfb 	bl	8000974 <__aeabi_d2f>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a51      	ldr	r2, [pc, #324]	@ (80010c8 <main+0x338>)
 8000f82:	6013      	str	r3, [r2, #0]

	// calculate next state

	if (BUTTON && !BUTTON_LAST) {
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <main+0x2f8>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00d      	beq.n	8000fa8 <main+0x218>
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	@ (80010cc <main+0x33c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <main+0x218>
		HV_RELAY = !HV_RELAY;
 8000f94:	4b3e      	ldr	r3, [pc, #248]	@ (8001090 <main+0x300>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2301      	moveq	r3, #1
 8000f9e:	2300      	movne	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001090 <main+0x300>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	}
	BUTTON_LAST = BUTTON;
 8000fa8:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <main+0x2f8>)
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	4b47      	ldr	r3, [pc, #284]	@ (80010cc <main+0x33c>)
 8000fae:	701a      	strb	r2, [r3, #0]

	if (!OV_SENSE_HV || !OC_SENSE_HV) {
 8000fb0:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <main+0x2e8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <main+0x230>
 8000fb8:	4b30      	ldr	r3, [pc, #192]	@ (800107c <main+0x2ec>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <main+0x236>
		HV_RELAY = 0;
 8000fc0:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <main+0x300>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	}

	if (voltage_out_5 > 4.8 || voltage_out_12 > 10.5) {
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <main+0x334>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fbf2 	bl	80007b4 <__aeabi_f2d>
 8000fd0:	a325      	add	r3, pc, #148	@ (adr r3, 8001068 <main+0x2d8>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fcc3 	bl	8000960 <__aeabi_dcmpgt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <main+0x264>
 8000fe0:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <main+0x330>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	eeb2 7a05 	vmov.f32	s14, #37	@ 0x41280000  10.5
 8000fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	dd6d      	ble.n	80010d0 <main+0x340>
		IND_R = 1;
 8000ff4:	4b29      	ldr	r3, [pc, #164]	@ (800109c <main+0x30c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
		IND_G = 0;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <main+0x310>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
		IND_B = 0;
 8001000:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <main+0x314>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
		if (voltage_out_5 > 4.8 && voltage_out_12 > 10.5) {
 8001006:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <main+0x334>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fbd2 	bl	80007b4 <__aeabi_f2d>
 8001010:	a315      	add	r3, pc, #84	@ (adr r3, 8001068 <main+0x2d8>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fca3 	bl	8000960 <__aeabi_dcmpgt>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d063      	beq.n	80010e8 <main+0x358>
 8001020:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <main+0x330>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eeb2 7a05 	vmov.f32	s14, #37	@ 0x41280000  10.5
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	dc00      	bgt.n	8001036 <main+0x2a6>
 8001034:	e058      	b.n	80010e8 <main+0x358>
			IND_R = 0;
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <main+0x30c>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			IND_G = 1;
 800103c:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <main+0x310>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
			IND_B = 0;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <main+0x314>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
		if (voltage_out_5 > 4.8 && voltage_out_12 > 10.5) {
 8001048:	e04e      	b.n	80010e8 <main+0x358>
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	ff241901 	.word	0xff241901
 8001054:	3f807fff 	.word	0x3f807fff
 8001058:	0dbe6fed 	.word	0x0dbe6fed
 800105c:	3f580000 	.word	0x3f580000
 8001060:	0036f9c0 	.word	0x0036f9c0
 8001064:	3f93e000 	.word	0x3f93e000
 8001068:	33333333 	.word	0x33333333
 800106c:	40133333 	.word	0x40133333
 8001070:	2000002c 	.word	0x2000002c
 8001074:	42020800 	.word	0x42020800
 8001078:	200004c4 	.word	0x200004c4
 800107c:	200004c5 	.word	0x200004c5
 8001080:	200004c6 	.word	0x200004c6
 8001084:	42020400 	.word	0x42020400
 8001088:	200004c7 	.word	0x200004c7
 800108c:	200004c8 	.word	0x200004c8
 8001090:	200004ca 	.word	0x200004ca
 8001094:	42020000 	.word	0x42020000
 8001098:	20000000 	.word	0x20000000
 800109c:	20000001 	.word	0x20000001
 80010a0:	20000002 	.word	0x20000002
 80010a4:	200004cb 	.word	0x200004cb
 80010a8:	200004cc 	.word	0x200004cc
 80010ac:	200004d0 	.word	0x200004d0
 80010b0:	200004d4 	.word	0x200004d4
 80010b4:	200004ce 	.word	0x200004ce
 80010b8:	200004d2 	.word	0x200004d2
 80010bc:	200004d6 	.word	0x200004d6
 80010c0:	200004dc 	.word	0x200004dc
 80010c4:	200004e0 	.word	0x200004e0
 80010c8:	200004d8 	.word	0x200004d8
 80010cc:	200004c9 	.word	0x200004c9
		} else {
//			HV_RELAY = 0;
		}
	} else {
		IND_R = 1;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <main+0x378>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
		IND_G = 1;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <main+0x37c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
		IND_B = 0;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <main+0x380>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
		HV_RELAY = 0;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <main+0x384>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	}

	if (HV_RELAY) {
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <main+0x384>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f43f ae6b 	beq.w	8000dc8 <main+0x38>
		IND_R = 0;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <main+0x378>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		IND_G = 0;
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <main+0x37c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		IND_B = 1;
 80010fe:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <main+0x380>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
	OV_SENSE_HV = HAL_GPIO_ReadPin(OV_SENSE_HV_GPIO_Port, OV_SENSE_HV_Pin);
 8001104:	e660      	b.n	8000dc8 <main+0x38>
 8001106:	bf00      	nop
 8001108:	20000001 	.word	0x20000001
 800110c:	20000002 	.word	0x20000002
 8001110:	200004cb 	.word	0x200004cb
 8001114:	200004ca 	.word	0x200004ca

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b09c      	sub	sp, #112	@ 0x70
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2250      	movs	r2, #80	@ 0x50
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fe07 	bl	8007d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800113e:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <SystemClock_Config+0xe0>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a2d      	ldr	r2, [pc, #180]	@ (80011f8 <SystemClock_Config+0xe0>)
 8001144:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001148:	6113      	str	r3, [r2, #16]
 800114a:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <SystemClock_Config+0xe0>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001156:	bf00      	nop
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <SystemClock_Config+0xe0>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b08      	cmp	r3, #8
 8001162:	d1f9      	bne.n	8001158 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001164:	2321      	movs	r3, #33	@ 0x21
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800116e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001172:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001178:	2303      	movs	r3, #3
 800117a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001190:	2304      	movs	r3, #4
 8001192:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001194:	2300      	movs	r3, #0
 8001196:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 ffed 	bl	8004180 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011ac:	f000 facc 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	231f      	movs	r3, #31
 80011b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	2104      	movs	r1, #4
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fc0e 	bl	80049f0 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011da:	f000 fab5 	bl	8001748 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <SystemClock_Config+0xe4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemClock_Config+0xe4>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3770      	adds	r7, #112	@ 0x70
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	44020800 	.word	0x44020800
 80011fc:	40022000 	.word	0x40022000

08001200 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0a2      	sub	sp, #136	@ 0x88
 8001204:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2288      	movs	r2, #136	@ 0x88
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f006 fd94 	bl	8007d3a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_FDCAN;
 8001212:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001216:	f04f 0304 	mov.w	r3, #4
 800121a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSE;
 800121e:	2303      	movs	r3, #3
 8001220:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8001222:	2308      	movs	r3, #8
 8001224:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8001226:	2364      	movs	r3, #100	@ 0x64
 8001228:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 8;
 8001232:	2308      	movs	r3, #8
 8001234:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_1;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVQ|RCC_PLL2_DIVR;
 8001242:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2Q;
 8001248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
 800124e:	2302      	movs	r3, #2
 8001250:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4618      	mov	r0, r3
 8001256:	f003 ff0d 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 8001260:	f000 fa72 	bl	8001748 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3788      	adds	r7, #136	@ 0x88
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fd5e 	bl	8007d3a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800127e:	4b4e      	ldr	r3, [pc, #312]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001280:	4a4e      	ldr	r2, [pc, #312]	@ (80013bc <MX_ADC1_Init+0x150>)
 8001282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001284:	4b4c      	ldr	r3, [pc, #304]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128a:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001290:	4b49      	ldr	r3, [pc, #292]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001296:	4b48      	ldr	r3, [pc, #288]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001298:	2201      	movs	r2, #1
 800129a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129c:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 800129e:	2204      	movs	r2, #4
 80012a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012a2:	4b45      	ldr	r3, [pc, #276]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a8:	4b43      	ldr	r3, [pc, #268]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012b0:	2206      	movs	r2, #6
 80012b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b4:	4b40      	ldr	r3, [pc, #256]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012bc:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80012d0:	4b39      	ldr	r3, [pc, #228]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80012dc:	4b36      	ldr	r3, [pc, #216]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e4:	4834      	ldr	r0, [pc, #208]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80012e6:	f001 f815 	bl	8002314 <HAL_ADC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80012f0:	f000 fa2a 	bl	8001748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012f4:	2301      	movs	r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f8:	2306      	movs	r3, #6
 80012fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012fc:	2304      	movs	r3, #4
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001300:	237f      	movs	r3, #127	@ 0x7f
 8001302:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001304:	2304      	movs	r3, #4
 8001306:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	4829      	ldr	r0, [pc, #164]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001312:	f001 fa4d 	bl	80027b0 <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800131c:	f000 fa14 	bl	8001748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001320:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <MX_ADC1_Init+0x154>)
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001324:	230c      	movs	r3, #12
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4822      	ldr	r0, [pc, #136]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 800132e:	f001 fa3f 	bl	80027b0 <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001338:	f000 fa06 	bl	8001748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800133c:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_ADC1_Init+0x158>)
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001340:	2312      	movs	r3, #18
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 800134a:	f001 fa31 	bl	80027b0 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001354:	f000 f9f8 	bl	8001748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_ADC1_Init+0x15c>)
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800135c:	2318      	movs	r3, #24
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4814      	ldr	r0, [pc, #80]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001366:	f001 fa23 	bl	80027b0 <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001370:	f000 f9ea 	bl	8001748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_ADC1_Init+0x160>)
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 8001384:	f001 fa14 	bl	80027b0 <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800138e:	f000 f9db 	bl	8001748 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_ADC1_Init+0x164>)
 8001394:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001396:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_ADC1_Init+0x14c>)
 80013a2:	f001 fa05 	bl	80027b0 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80013ac:	f000 f9cc 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000002c 	.word	0x2000002c
 80013bc:	42028000 	.word	0x42028000
 80013c0:	04300002 	.word	0x04300002
 80013c4:	0c900008 	.word	0x0c900008
 80013c8:	14f00020 	.word	0x14f00020
 80013cc:	1d500080 	.word	0x1d500080
 80013d0:	25b00200 	.word	0x25b00200

080013d4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013da:	4a20      	ldr	r2, [pc, #128]	@ (800145c <MX_FDCAN1_Init+0x88>)
 80013dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013de:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 80013fe:	2200      	movs	r2, #0
 8001400:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001404:	2210      	movs	r2, #16
 8001406:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 800140a:	2201      	movs	r2, #1
 800140c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001410:	2201      	movs	r2, #1
 8001412:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001416:	2201      	movs	r2, #1
 8001418:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 800141c:	2201      	movs	r2, #1
 800141e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001422:	2201      	movs	r2, #1
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001428:	2201      	movs	r2, #1
 800142a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 800142e:	2201      	movs	r2, #1
 8001430:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 800143a:	2200      	movs	r2, #0
 800143c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	@ (8001458 <MX_FDCAN1_Init+0x84>)
 8001446:	f002 f895 	bl	8003574 <HAL_FDCAN_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001450:	f000 f97a 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000094 	.word	0x20000094
 800145c:	4000a400 	.word	0x4000a400

08001460 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8001464:	f002 fa36 	bl	80038d4 <HAL_FLASH_Unlock>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 800146e:	f000 f96b 	bl	8001748 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8001472:	f002 fa55 	bl	8003920 <HAL_FLASH_Lock>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 800147c:	f000 f964 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_I2C1_Init+0x74>)
 800148a:	4a1c      	ldr	r2, [pc, #112]	@ (80014fc <MX_I2C1_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_I2C1_Init+0x74>)
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <MX_I2C1_Init+0x7c>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_I2C1_Init+0x74>)
 800149c:	2201      	movs	r2, #1
 800149e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014be:	480e      	ldr	r0, [pc, #56]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014c0:	f002 fbd8 	bl	8003c74 <HAL_I2C_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ca:	f000 f93d 	bl	8001748 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014d2:	f002 fc6a 	bl	8003daa <HAL_I2CEx_ConfigAnalogFilter>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014dc:	f000 f934 	bl	8001748 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_I2C1_Init+0x74>)
 80014e4:	f002 fcac 	bl	8003e40 <HAL_I2CEx_ConfigDigitalFilter>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 f92b 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000f8 	.word	0x200000f8
 80014fc:	40005400 	.word	0x40005400
 8001500:	10c0ecff 	.word	0x10c0ecff

08001504 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001508:	2000      	movs	r0, #0
 800150a:	f002 fce5 	bl	8003ed8 <HAL_ICACHE_ConfigAssociativityMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001514:	f000 f918 	bl	8001748 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001518:	f002 fcfe 	bl	8003f18 <HAL_ICACHE_Enable>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001522:	f000 f911 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <MX_USART1_UART_Init+0x94>)
 8001534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001574:	4811      	ldr	r0, [pc, #68]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001576:	f005 fe4f 	bl	8007218 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f8e2 	bl	8001748 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 8001588:	f006 fa6c 	bl	8007a64 <HAL_UARTEx_SetTxFifoThreshold>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001592:	f000 f8d9 	bl	8001748 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 800159a:	f006 faa1 	bl	8007ae0 <HAL_UARTEx_SetRxFifoThreshold>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015a4:	f000 f8d0 	bl	8001748 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_USART1_UART_Init+0x90>)
 80015aa:	f006 fa22 	bl	80079f2 <HAL_UARTEx_DisableFifoMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015b4:	f000 f8c8 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000014c 	.word	0x2000014c
 80015c0:	40013800 	.word	0x40013800

080015c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015ca:	4a16      	ldr	r2, [pc, #88]	@ (8001624 <MX_USB_PCD_Init+0x60>)
 80015cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015d0:	2208      	movs	r2, #8
 80015d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015dc:	2202      	movs	r2, #2
 80015de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 8001600:	2200      	movs	r2, #0
 8001602:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 8001606:	2200      	movs	r2, #0
 8001608:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USB_PCD_Init+0x5c>)
 800160c:	f002 fc94 	bl	8003f38 <HAL_PCD_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8001616:	f000 f897 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001e0 	.word	0x200001e0
 8001624:	40016000 	.word	0x40016000

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <MX_GPIO_Init+0x110>)
 8001640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001644:	4a3c      	ldr	r2, [pc, #240]	@ (8001738 <MX_GPIO_Init+0x110>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800164e:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <MX_GPIO_Init+0x110>)
 8001650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165c:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <MX_GPIO_Init+0x110>)
 800165e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001662:	4a35      	ldr	r2, [pc, #212]	@ (8001738 <MX_GPIO_Init+0x110>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001668:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800166c:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <MX_GPIO_Init+0x110>)
 800166e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <MX_GPIO_Init+0x110>)
 800167c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001680:	4a2d      	ldr	r2, [pc, #180]	@ (8001738 <MX_GPIO_Init+0x110>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <MX_GPIO_Init+0x110>)
 800168c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_GPIO_Init+0x110>)
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169e:	4a26      	ldr	r2, [pc, #152]	@ (8001738 <MX_GPIO_Init+0x110>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_GPIO_Init+0x110>)
 80016aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HV_RELAY_Pin|SHDN_12_Pin|IND_R_Pin|IND_G_Pin
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 61e3 	mov.w	r1, #1816	@ 0x718
 80016bc:	481f      	ldr	r0, [pc, #124]	@ (800173c <MX_GPIO_Init+0x114>)
 80016be:	f002 fac1 	bl	8003c44 <HAL_GPIO_WritePin>
                          |IND_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OV_SENSE_HV_Pin OC_SENSE_HV_Pin FAULT_12_Pin */
  GPIO_InitStruct.Pin = OV_SENSE_HV_Pin|OC_SENSE_HV_Pin|FAULT_12_Pin;
 80016c2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	481a      	ldr	r0, [pc, #104]	@ (8001740 <MX_GPIO_Init+0x118>)
 80016d8:	f002 f93e 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : HV_RELAY_Pin SHDN_12_Pin */
  GPIO_InitStruct.Pin = HV_RELAY_Pin|SHDN_12_Pin;
 80016dc:	2318      	movs	r3, #24
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4812      	ldr	r0, [pc, #72]	@ (800173c <MX_GPIO_Init+0x114>)
 80016f4:	f002 f930 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_R_Pin IND_G_Pin IND_B_Pin */
  GPIO_InitStruct.Pin = IND_R_Pin|IND_G_Pin|IND_B_Pin;
 80016f8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016fe:	2311      	movs	r3, #17
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480a      	ldr	r0, [pc, #40]	@ (800173c <MX_GPIO_Init+0x114>)
 8001712:	f002 f921 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin BOOT0_SENSE_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BOOT0_SENSE_Pin;
 8001716:	23a0      	movs	r3, #160	@ 0xa0
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	@ (8001744 <MX_GPIO_Init+0x11c>)
 800172a:	f002 f915 	bl	8003958 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	44020c00 	.word	0x44020c00
 800173c:	42020000 	.word	0x42020000
 8001740:	42020800 	.word	0x42020800
 8001744:	42020400 	.word	0x42020400

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <Error_Handler+0x8>

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a25      	ldr	r2, [pc, #148]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d144      	bne.n	8001810 <HAL_ADC_MspInit+0xac>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178c:	4a23      	ldr	r2, [pc, #140]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001792:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017aa:	4a1c      	ldr	r2, [pc, #112]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = V_SENSE_HV_Pin|V_SENSE_12_Pin|V_SENSE_5_Pin|I_SENSE_12_Pin;
 80017e0:	23c3      	movs	r3, #195	@ 0xc3
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e4:	2303      	movs	r3, #3
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	480b      	ldr	r0, [pc, #44]	@ (8001820 <HAL_ADC_MspInit+0xbc>)
 80017f4:	f002 f8b0 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_SENSE_5_Pin|I_SENSE_HV_Pin;
 80017f8:	2303      	movs	r3, #3
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fc:	2303      	movs	r3, #3
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <HAL_ADC_MspInit+0xc0>)
 800180c:	f002 f8a4 	bl	8003958 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	42028000 	.word	0x42028000
 800181c:	44020c00 	.word	0x44020c00
 8001820:	42020000 	.word	0x42020000
 8001824:	42020400 	.word	0x42020400

08001828 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <HAL_FDCAN_MspInit+0x88>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12e      	bne.n	80018a8 <HAL_FDCAN_MspInit+0x80>
  {
    /* USER CODE BEGIN FDCAN1_MspInit 0 */

    /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <HAL_FDCAN_MspInit+0x8c>)
 800184c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001850:	4a18      	ldr	r2, [pc, #96]	@ (80018b4 <HAL_FDCAN_MspInit+0x8c>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001856:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800185a:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <HAL_FDCAN_MspInit+0x8c>)
 800185c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_FDCAN_MspInit+0x8c>)
 800186a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186e:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <HAL_FDCAN_MspInit+0x8c>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_FDCAN_MspInit+0x8c>)
 800187a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB12     ------> FDCAN1_RX
    PB13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001886:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001898:	2309      	movs	r3, #9
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_FDCAN_MspInit+0x90>)
 80018a4:	f002 f858 	bl	8003958 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	4000a400 	.word	0x4000a400
 80018b4:	44020c00 	.word	0x44020c00
 80018b8:	42020400 	.word	0x42020400

080018bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ac      	sub	sp, #176	@ 0xb0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2288      	movs	r2, #136	@ 0x88
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fa2c 	bl	8007d3a <memset>
  if(hi2c->Instance==I2C1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a31      	ldr	r2, [pc, #196]	@ (80019ac <HAL_I2C_MspInit+0xf0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d15b      	bne.n	80019a4 <HAL_I2C_MspInit+0xe8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fbb7 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 800190c:	f7ff ff1c 	bl	8001748 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <HAL_I2C_MspInit+0xf4>)
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001916:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <HAL_I2C_MspInit+0xf4>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001920:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_I2C_MspInit+0xf4>)
 8001922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB10     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C1;
 8001948:	230b      	movs	r3, #11
 800194a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001952:	4619      	mov	r1, r3
 8001954:	4817      	ldr	r0, [pc, #92]	@ (80019b4 <HAL_I2C_MspInit+0xf8>)
 8001956:	f001 ffff 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800195a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001962:	2312      	movs	r3, #18
 8001964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001974:	2304      	movs	r3, #4
 8001976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <HAL_I2C_MspInit+0xf8>)
 8001982:	f001 ffe9 	bl	8003958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_I2C_MspInit+0xf4>)
 8001988:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800198c:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <HAL_I2C_MspInit+0xf4>)
 800198e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001992:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_I2C_MspInit+0xf4>)
 8001998:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019a4:	bf00      	nop
 80019a6:	37b0      	adds	r7, #176	@ 0xb0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40005400 	.word	0x40005400
 80019b0:	44020c00 	.word	0x44020c00
 80019b4:	42020400 	.word	0x42020400

080019b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0ae      	sub	sp, #184	@ 0xb8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	2288      	movs	r2, #136	@ 0x88
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f006 f9ae 	bl	8007d3a <memset>
  if(huart->Instance==USART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a38      	ldr	r2, [pc, #224]	@ (8001ac4 <HAL_UART_MspInit+0x10c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d169      	bne.n	8001abc <HAL_UART_MspInit+0x104>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019e8:	f04f 0201 	mov.w	r2, #1
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019f4:	2300      	movs	r3, #0
 80019f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fb39 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a08:	f7ff fe9e 	bl	8001748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a12:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a30:	4a25      	ldr	r2, [pc, #148]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_UART_MspInit+0x110>)
 8001a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a66:	2304      	movs	r3, #4
 8001a68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4810      	ldr	r0, [pc, #64]	@ (8001acc <HAL_UART_MspInit+0x114>)
 8001a8c:	f001 ff64 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <HAL_UART_MspInit+0x118>)
 8001ab8:	f001 ff4e 	bl	8003958 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001abc:	bf00      	nop
 8001abe:	37b8      	adds	r7, #184	@ 0xb8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	44020c00 	.word	0x44020c00
 8001acc:	42020000 	.word	0x42020000
 8001ad0:	42020400 	.word	0x42020400

08001ad4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0a6      	sub	sp, #152	@ 0x98
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2288      	movs	r2, #136	@ 0x88
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f006 f928 	bl	8007d3a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <HAL_PCD_MspInit+0x6c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d121      	bne.n	8001b38 <HAL_PCD_MspInit+0x64>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0310 	mov.w	r3, #16
 8001afc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001b00:	2330      	movs	r3, #48	@ 0x30
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fab2 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8001b16:	f7ff fe17 	bl	8001748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_PCD_MspInit+0x70>)
 8001b1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b20:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_PCD_MspInit+0x70>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_PCD_MspInit+0x70>)
 8001b2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001b38:	bf00      	nop
 8001b3a:	3798      	adds	r7, #152	@ 0x98
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40016000 	.word	0x40016000
 8001b44:	44020c00 	.word	0x44020c00

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9e:	f000 f93d 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bae:	4b30      	ldr	r3, [pc, #192]	@ (8001c70 <SystemInit+0xc8>)
 8001bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8001c70 <SystemInit+0xc8>)
 8001bb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <SystemInit+0xcc>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <SystemInit+0xcc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001bca:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <SystemInit+0xcc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <SystemInit+0xcc>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4927      	ldr	r1, [pc, #156]	@ (8001c74 <SystemInit+0xcc>)
 8001bd6:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <SystemInit+0xd0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <SystemInit+0xcc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <SystemInit+0xcc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <SystemInit+0xcc>)
 8001bea:	4a24      	ldr	r2, [pc, #144]	@ (8001c7c <SystemInit+0xd4>)
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001bee:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <SystemInit+0xcc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <SystemInit+0xcc>)
 8001bf6:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <SystemInit+0xd4>)
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <SystemInit+0xcc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <SystemInit+0xcc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	@ (8001c74 <SystemInit+0xcc>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <SystemInit+0xcc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <SystemInit+0xc8>)
 8001c14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c18:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <SystemInit+0xd8>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001c22:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001c2a:	d003      	beq.n	8001c34 <SystemInit+0x8c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c32:	d117      	bne.n	8001c64 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <SystemInit+0xd8>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <SystemInit+0xd8>)
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <SystemInit+0xdc>)
 8001c44:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <SystemInit+0xd8>)
 8001c48:	4a0f      	ldr	r2, [pc, #60]	@ (8001c88 <SystemInit+0xe0>)
 8001c4a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <SystemInit+0xd8>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <SystemInit+0xd8>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <SystemInit+0xd8>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <SystemInit+0xd8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	61d3      	str	r3, [r2, #28]
  }
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	44020c00 	.word	0x44020c00
 8001c78:	fae2eae3 	.word	0xfae2eae3
 8001c7c:	01010280 	.word	0x01010280
 8001c80:	40022000 	.word	0x40022000
 8001c84:	08192a3b 	.word	0x08192a3b
 8001c88:	4c5d6e7f 	.word	0x4c5d6e7f

08001c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c92:	e003      	b.n	8001c9c <LoopCopyDataInit>

08001c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c9a:	3104      	adds	r1, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c9c:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ca4:	d3f6      	bcc.n	8001c94 <CopyDataInit>
	ldr	r2, =_sbss
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ca8:	e002      	b.n	8001cb0 <LoopFillZerobss>

08001caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cac:	f842 3b04 	str.w	r3, [r2], #4

08001cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <LoopForever+0x16>)
	cmp	r2, r3
 8001cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cb4:	d3f9      	bcc.n	8001caa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb6:	f7ff ff77 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f006 f847 	bl	8007d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cbe:	f7ff f867 	bl	8000d90 <main>

08001cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001cc4:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001cc8:	08007dfc 	.word	0x08007dfc
	ldr	r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cd0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001cd4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001cd8:	200004e8 	.word	0x200004e8

08001cdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f001 fb70 	bl	80033ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cea:	f003 f839 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <HAL_Init+0x44>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	490b      	ldr	r1, [pc, #44]	@ (8001d28 <HAL_Init+0x48>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_Init+0x4c>)
 8001d02:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d04:	2004      	movs	r0, #4
 8001d06:	f001 fba7 	bl	8003458 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f000 f810 	bl	8001d30 <HAL_InitTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e002      	b.n	8001d20 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1a:	f7ff fd1b 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	44020c00 	.word	0x44020c00
 8001d28:	08007dac 	.word	0x08007dac
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d3c:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <HAL_InitTick+0xdc>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e05c      	b.n	8001e02 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001d48:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_InitTick+0xe0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d10c      	bne.n	8001d6e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001d54:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_InitTick+0xe4>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <HAL_InitTick+0xdc>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e037      	b.n	8001dde <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d6e:	f001 fbcb 	bl	8003508 <HAL_SYSTICK_GetCLKSourceConfig>
 8001d72:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d023      	beq.n	8001dc2 <HAL_InitTick+0x92>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d82d      	bhi.n	8001ddc <HAL_InitTick+0xac>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_InitTick+0x5e>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d00d      	beq.n	8001da8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001d8c:	e026      	b.n	8001ddc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <HAL_InitTick+0xe4>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <HAL_InitTick+0xdc>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001d9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	60fb      	str	r3, [r7, #12]
        break;
 8001da6:	e01a      	b.n	8001dde <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <HAL_InitTick+0xdc>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001db6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
        break;
 8001dc0:	e00d      	b.n	8001dde <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0xdc>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	60fb      	str	r3, [r7, #12]
        break;
 8001dda:	e000      	b.n	8001dde <HAL_InitTick+0xae>
        break;
 8001ddc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f001 fb18 	bl	8003414 <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e009      	b.n	8001e02 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dee:	2200      	movs	r2, #0
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	f001 faf3 	bl	80033e0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_InitTick+0xe8>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	e000e010 	.word	0xe000e010
 8001e14:	20000004 	.word	0x20000004
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	200004e4 	.word	0x200004e4

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200004e4 	.word	0x200004e4

08001e5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001ef2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	42028000 	.word	0x42028000

08001f10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3360      	adds	r3, #96	@ 0x60
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <LL_ADC_SetOffset+0x44>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	03fff000 	.word	0x03fff000

08001f58 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3360      	adds	r3, #96	@ 0x60
 8001f66:	461a      	mov	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3360      	adds	r3, #96	@ 0x60
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3360      	adds	r3, #96	@ 0x60
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fe4:	bf00      	nop
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3360      	adds	r3, #96	@ 0x60
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	431a      	orrs	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	615a      	str	r2, [r3, #20]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002072:	b480      	push	{r7}
 8002074:	b087      	sub	sp, #28
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3330      	adds	r3, #48	@ 0x30
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	4413      	add	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	211f      	movs	r1, #31
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	401a      	ands	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	f003 011f 	and.w	r1, r3, #31
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	431a      	orrs	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020be:	bf00      	nop
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3314      	adds	r3, #20
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	0e5b      	lsrs	r3, r3, #25
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	0d1b      	lsrs	r3, r3, #20
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2107      	movs	r1, #7
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	0d1b      	lsrs	r3, r3, #20
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	431a      	orrs	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0318 	and.w	r3, r3, #24
 8002142:	4908      	ldr	r1, [pc, #32]	@ (8002164 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002144:	40d9      	lsrs	r1, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	400b      	ands	r3, r1
 800214a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800214e:	431a      	orrs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	000fffff 	.word	0x000fffff

08002168 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6093      	str	r3, [r2, #8]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800219c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021a0:	d101      	bne.n	80021a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021f0:	d101      	bne.n	80021f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002218:	f043 0201 	orr.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	f043 0202 	orr.w	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <LL_ADC_IsEnabled+0x18>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <LL_ADC_IsEnabled+0x1a>
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d101      	bne.n	8002292 <LL_ADC_IsDisableOngoing+0x18>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_ADC_IsDisableOngoing+0x1a>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b4:	f043 0204 	orr.w	r2, r3, #4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d101      	bne.n	80022e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d101      	bne.n	8002306 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e131      	b.n	8002592 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fa11 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff19 	bl	800218c <LL_ADC_IsDeepPowerDownEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feff 	bl	8002168 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff34 	bl	80021dc <LL_ADC_IsInternalRegulatorEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d115      	bne.n	80023a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff18 	bl	80021b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002384:	4b85      	ldr	r3, [pc, #532]	@ (800259c <HAL_ADC_Init+0x288>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	4a85      	ldr	r2, [pc, #532]	@ (80025a0 <HAL_ADC_Init+0x28c>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	3301      	adds	r3, #1
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b01      	subs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff16 	bl	80021dc <LL_ADC_IsInternalRegulatorEnabled>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff76 	bl	80022c8 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 80ca 	bne.w	8002580 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80c6 	bne.w	8002580 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023fc:	f043 0202 	orr.w	r2, r3, #2
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff23 	bl	8002254 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002414:	4863      	ldr	r0, [pc, #396]	@ (80025a4 <HAL_ADC_Init+0x290>)
 8002416:	f7ff ff1d 	bl	8002254 <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4619      	mov	r1, r3
 8002426:	4860      	ldr	r0, [pc, #384]	@ (80025a8 <HAL_ADC_Init+0x294>)
 8002428:	f7ff fd18 	bl	8001e5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7e5b      	ldrb	r3, [r3, #25]
 8002430:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002436:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800243c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002442:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d106      	bne.n	8002468 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	3b01      	subs	r3, #1
 8002460:	045b      	lsls	r3, r3, #17
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b48      	ldr	r3, [pc, #288]	@ (80025ac <HAL_ADC_Init+0x298>)
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	430b      	orrs	r3, r1
 8002496:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff1b 	bl	80022ee <LL_ADC_INJ_IsConversionOngoing>
 80024b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d13d      	bne.n	800253c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d13a      	bne.n	800253c <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e1b      	ldrb	r3, [r3, #24]
 80024ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024e2:	f023 0302 	bic.w	r3, r3, #2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d118      	bne.n	800252c <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002516:	4311      	orrs	r1, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800251c:	430a      	orrs	r2, r1
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	611a      	str	r2, [r3, #16]
 800252a:	e007      	b.n	800253c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10c      	bne.n	800255e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f023 010f 	bic.w	r1, r3, #15
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020f 	bic.w	r2, r2, #15
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	@ 0x58
 800257e:	e007      	b.n	8002590 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002590:	7ffb      	ldrb	r3, [r7, #31]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000004 	.word	0x20000004
 80025a0:	053e2d63 	.word	0x053e2d63
 80025a4:	42028000 	.word	0x42028000
 80025a8:	42028300 	.word	0x42028300
 80025ac:	fff04007 	.word	0xfff04007

080025b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fe83 	bl	80022c8 <LL_ADC_REG_IsConversionOngoing>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d14f      	bne.n	8002668 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_Start+0x26>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e04b      	b.n	800266e <HAL_ADC_Start+0xbe>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fcf4 	bl	8002fcc <ADC_Enable>
 80025e4:	4603      	mov	r3, r0
 80025e6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d137      	bne.n	800265e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260e:	d106      	bne.n	800261e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	f023 0206 	bic.w	r2, r3, #6
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800261c:	e002      	b.n	8002624 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	221c      	movs	r2, #28
 800262a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002646:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800264a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fe22 	bl	80022a0 <LL_ADC_REG_StartConversion>
 800265c:	e006      	b.n	800266c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002666:	e001      	b.n	800266c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d102      	bne.n	800268e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002688:	2308      	movs	r3, #8
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e010      	b.n	80026b0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e06f      	b.n	800278c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80026ac:	2304      	movs	r3, #4
 80026ae:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026b0:	f7ff fbc8 	bl	8001e44 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b6:	e021      	b.n	80026fc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d01d      	beq.n	80026fc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026c0:	f7ff fbc0 	bl	8001e44 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <HAL_ADC_PollForConversion+0x60>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d112      	bne.n	80026fc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f043 0204 	orr.w	r2, r3, #4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e047      	b.n	800278c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0d6      	beq.n	80026b8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc96 	bl	800204c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01c      	beq.n	8002760 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7e5b      	ldrb	r3, [r3, #25]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b08      	cmp	r3, #8
 800273a:	d111      	bne.n	8002760 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d104      	bne.n	8002778 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2208      	movs	r2, #8
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e008      	b.n	800278a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0b6      	sub	sp, #216	@ 0xd8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x22>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e3e6      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x7f0>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd72 	bl	80022c8 <LL_ADC_REG_IsConversionOngoing>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 83cb 	bne.w	8002f82 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d009      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4ab0      	ldr	r2, [pc, #704]	@ (8002abc <HAL_ADC_ConfigChannel+0x30c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d109      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x62>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4aaf      	ldr	r2, [pc, #700]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x310>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d104      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fb6b 	bl	8001ee8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	f7ff fc27 	bl	8002072 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fd4d 	bl	80022c8 <LL_ADC_REG_IsConversionOngoing>
 800282e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fd59 	bl	80022ee <LL_ADC_INJ_IsConversionOngoing>
 800283c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 81dd 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800284a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 81d8 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800285c:	d10f      	bne.n	800287e <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	4619      	mov	r1, r3
 800286a:	f7ff fc2e 	bl	80020ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fbd5 	bl	8002026 <LL_ADC_SetSamplingTimeCommonConfig>
 800287c:	e00e      	b.n	800289c <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	461a      	mov	r2, r3
 800288c:	f7ff fc1d 	bl	80020ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fbc5 	bl	8002026 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d022      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6919      	ldr	r1, [r3, #16]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028ce:	f7ff fb1f 	bl	8001f10 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	461a      	mov	r2, r3
 80028e0:	f7ff fb6b 	bl	8001fba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x14a>
 80028f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f8:	e000      	b.n	80028fc <HAL_ADC_ConfigChannel+0x14c>
 80028fa:	2300      	movs	r3, #0
 80028fc:	461a      	mov	r2, r3
 80028fe:	f7ff fb77 	bl	8001ff0 <LL_ADC_SetOffsetSaturation>
 8002902:	e17f      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fb24 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x180>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fb19 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	e01e      	b.n	800296e <HAL_ADC_ConfigChannel+0x1be>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fb0e 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 800294e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8002956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e004      	b.n	800296c <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8002962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x1d6>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	e018      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x208>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800299a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fadd 	bl	8001f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fac1 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x246>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fab6 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	e01e      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x284>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff faab 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e004      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8002a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x29c>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	e018      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x2ce>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fa7a 	bl	8001f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa5e 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x314>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa53 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e022      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x352>
 8002abc:	04300002 	.word	0x04300002
 8002ac0:	407f0000 	.word	0x407f0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fa44 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e004      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x36a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	e016      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x398>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e004      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8002b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d106      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fa15 	bl	8001f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f9f9 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x3d6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2103      	movs	r1, #3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f9ee 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	e017      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x406>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f9e3 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e003      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x41e>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	e011      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x442>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8002bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d106      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f9c0 	bl	8001f84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fb23 	bl	8002254 <LL_ADC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 813f 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f7ff fa7c 	bl	8002120 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002e68 <HAL_ADC_ConfigChannel+0x6b8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f040 8130 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10b      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x4ac>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2b09      	cmp	r3, #9
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e019      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x4e0>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8002c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	bf94      	ite	ls
 8002c8a:	2301      	movls	r3, #1
 8002c8c:	2300      	movhi	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d079      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x500>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	069b      	lsls	r3, r3, #26
 8002caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cae:	e015      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x52c>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x54c>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	e017      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x57c>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8002d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x5a2>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	051b      	lsls	r3, r3, #20
 8002d50:	e018      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x5d4>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
 8002d86:	e080      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x5f4>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002da2:	e015      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x620>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x640>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	e017      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x670>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x69c>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	e01d      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x6d8>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	613b      	str	r3, [r7, #16]
  return result;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e005      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x6c4>
 8002e68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b1e      	subs	r3, #30
 8002e82:	051b      	lsls	r3, r3, #20
 8002e84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f7ff f91b 	bl	80020ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7f8>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d079      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ea0:	4842      	ldr	r0, [pc, #264]	@ (8002fac <HAL_ADC_ConfigChannel+0x7fc>)
 8002ea2:	f7ff f801 	bl	8001ea8 <LL_ADC_GetCommonPathInternalCh>
 8002ea6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a40      	ldr	r2, [pc, #256]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x800>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d124      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d11e      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x804>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d164      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ece:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4835      	ldr	r0, [pc, #212]	@ (8002fac <HAL_ADC_ConfigChannel+0x7fc>)
 8002ed6:	f7fe ffd4 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eda:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x808>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	4a36      	ldr	r2, [pc, #216]	@ (8002fbc <HAL_ADC_ConfigChannel+0x80c>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	3301      	adds	r3, #1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002efc:	e04a      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x810>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d113      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x804>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d13a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	4619      	mov	r1, r3
 8002f28:	4820      	ldr	r0, [pc, #128]	@ (8002fac <HAL_ADC_ConfigChannel+0x7fc>)
 8002f2a:	f7fe ffaa 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f2e:	e031      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a23      	ldr	r2, [pc, #140]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x814>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d113      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x804>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d121      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4814      	ldr	r0, [pc, #80]	@ (8002fac <HAL_ADC_ConfigChannel+0x7fc>)
 8002f5c:	f7fe ff91 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f60:	e018      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x818>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d113      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a10      	ldr	r2, [pc, #64]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x804>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe ffa2 	bl	8001ec4 <LL_ADC_EnableChannelVDDcore>
 8002f80:	e008      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f9c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	37d8      	adds	r7, #216	@ 0xd8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	80080000 	.word	0x80080000
 8002fac:	42028300 	.word	0x42028300
 8002fb0:	c3210000 	.word	0xc3210000
 8002fb4:	42028000 	.word	0x42028000
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	053e2d63 	.word	0x053e2d63
 8002fc0:	88600004 	.word	0x88600004
 8002fc4:	c7520000 	.word	0xc7520000
 8002fc8:	99200040 	.word	0x99200040

08002fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff f939 	bl	8002254 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d166      	bne.n	80030b6 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <ADC_Enable+0xf4>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e052      	b.n	80030b8 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f8f4 	bl	8002204 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800301c:	4829      	ldr	r0, [pc, #164]	@ (80030c4 <ADC_Enable+0xf8>)
 800301e:	f7fe ff43 	bl	8001ea8 <LL_ADC_GetCommonPathInternalCh>
 8003022:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800302c:	4b26      	ldr	r3, [pc, #152]	@ (80030c8 <ADC_Enable+0xfc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	4a26      	ldr	r2, [pc, #152]	@ (80030cc <ADC_Enable+0x100>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003040:	e002      	b.n	8003048 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3b01      	subs	r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800304e:	f7fe fef9 	bl	8001e44 <HAL_GetTick>
 8003052:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003054:	e028      	b.n	80030a8 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f8fa 	bl	8002254 <LL_ADC_IsEnabled>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f8ca 	bl	8002204 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003070:	f7fe fee8 	bl	8001e44 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d914      	bls.n	80030a8 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d00d      	beq.n	80030a8 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e007      	b.n	80030b8 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d1cf      	bne.n	8003056 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	8000003f 	.word	0x8000003f
 80030c4:	42028300 	.word	0x42028300
 80030c8:	20000004 	.word	0x20000004
 80030cc:	053e2d63 	.word	0x053e2d63

080030d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f8cc 	bl	800227a <LL_ADC_IsDisableOngoing>
 80030e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f8b3 	bl	8002254 <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d047      	beq.n	8003184 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d144      	bne.n	8003184 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030d 	and.w	r3, r3, #13
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10c      	bne.n	8003122 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff f88d 	bl	800222c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2203      	movs	r2, #3
 8003118:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800311a:	f7fe fe93 	bl	8001e44 <HAL_GetTick>
 800311e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003120:	e029      	b.n	8003176 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e023      	b.n	8003186 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800313e:	f7fe fe81 	bl	8001e44 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d914      	bls.n	8003176 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	f043 0210 	orr.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1dc      	bne.n	800313e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <LL_ADC_StartCalibration>:
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80031a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_IsCalibrationOnGoing>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031d4:	d101      	bne.n	80031da <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_ADCEx_Calibration_Start+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e04d      	b.n	80032a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff5f 	bl	80030d0 <ADC_Disable>
 8003212:	4603      	mov	r3, r0
 8003214:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d136      	bne.n	800328a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	f043 0202 	orr.w	r2, r3, #2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ffa9 	bl	800318e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800323c:	e014      	b.n	8003268 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3301      	adds	r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4a18      	ldr	r2, [pc, #96]	@ (80032a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d30d      	bcc.n	8003268 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	f023 0312 	bic.w	r3, r3, #18
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e01b      	b.n	80032a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ffa7 	bl	80031c0 <LL_ADC_IsCalibrationOnGoing>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e2      	bne.n	800323e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f023 0303 	bic.w	r3, r3, #3
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	659a      	str	r2, [r3, #88]	@ 0x58
 8003288:	e005      	b.n	8003296 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	25c3f800 	.word	0x25c3f800

080032ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032de:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	60d3      	str	r3, [r2, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <__NVIC_GetPriorityGrouping+0x18>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 0307 	and.w	r3, r3, #7
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800331c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db0a      	blt.n	800333a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	490c      	ldr	r1, [pc, #48]	@ (800335c <__NVIC_SetPriority+0x4c>)
 800332a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	440b      	add	r3, r1
 8003334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003338:	e00a      	b.n	8003350 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4908      	ldr	r1, [pc, #32]	@ (8003360 <__NVIC_SetPriority+0x50>)
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3b04      	subs	r3, #4
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	440b      	add	r3, r1
 800334e:	761a      	strb	r2, [r3, #24]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	@ 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f1c3 0307 	rsb	r3, r3, #7
 800337e:	2b04      	cmp	r3, #4
 8003380:	bf28      	it	cs
 8003382:	2304      	movcs	r3, #4
 8003384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3304      	adds	r3, #4
 800338a:	2b06      	cmp	r3, #6
 800338c:	d902      	bls.n	8003394 <NVIC_EncodePriority+0x30>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3b03      	subs	r3, #3
 8003392:	e000      	b.n	8003396 <NVIC_EncodePriority+0x32>
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	4313      	orrs	r3, r2
         );
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	@ 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff6a 	bl	80032ac <__NVIC_SetPriorityGrouping>
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ee:	f7ff ff81 	bl	80032f4 <__NVIC_GetPriorityGrouping>
 80033f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	6978      	ldr	r0, [r7, #20]
 80033fa:	f7ff ffb3 	bl	8003364 <NVIC_EncodePriority>
 80033fe:	4602      	mov	r2, r0
 8003400:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff82 	bl	8003310 <__NVIC_SetPriority>
}
 800340c:	bf00      	nop
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003424:	d301      	bcc.n	800342a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003426:	2301      	movs	r3, #1
 8003428:	e00d      	b.n	8003446 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_SYSTICK_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003432:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <HAL_SYSTICK_Config+0x40>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_SYSTICK_Config+0x40>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <HAL_SYSTICK_Config+0x40>)
 800343e:	f043 0303 	orr.w	r3, r3, #3
 8003442:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d844      	bhi.n	80034f0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	0800348f 	.word	0x0800348f
 8003470:	080034ad 	.word	0x080034ad
 8003474:	080034cf 	.word	0x080034cf
 8003478:	080034f1 	.word	0x080034f1
 800347c:	08003481 	.word	0x08003481
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003480:	4b1f      	ldr	r3, [pc, #124]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1e      	ldr	r2, [pc, #120]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6013      	str	r3, [r2, #0]
      break;
 800348c:	e031      	b.n	80034f2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800348e:	4b1c      	ldr	r3, [pc, #112]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800349a:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800349c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034a0:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034a2:	f023 030c 	bic.w	r3, r3, #12
 80034a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034aa:	e022      	b.n	80034f2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034ac:	4b14      	ldr	r3, [pc, #80]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a13      	ldr	r2, [pc, #76]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034b2:	f023 0304 	bic.w	r3, r3, #4
 80034b6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80034b8:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034be:	f023 030c 	bic.w	r3, r3, #12
 80034c2:	4a10      	ldr	r2, [pc, #64]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034cc:	e011      	b.n	80034f2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003500 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80034da:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034e0:	f023 030c 	bic.w	r3, r3, #12
 80034e4:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034e6:	f043 0308 	orr.w	r3, r3, #8
 80034ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034ee:	e000      	b.n	80034f2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80034f0:	bf00      	nop
  }
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010
 8003504:	44020c00 	.word	0x44020c00

08003508 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800350e:	4b17      	ldr	r3, [pc, #92]	@ (800356c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800351a:	2304      	movs	r3, #4
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	e01e      	b.n	800355e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003520:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b08      	cmp	r3, #8
 8003530:	d00f      	beq.n	8003552 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d80f      	bhi.n	8003558 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d003      	beq.n	800354c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003544:	e008      	b.n	8003558 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
        break;
 800354a:	e008      	b.n	800355e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800354c:	2301      	movs	r3, #1
 800354e:	607b      	str	r3, [r7, #4]
        break;
 8003550:	e005      	b.n	800355e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003552:	2302      	movs	r3, #2
 8003554:	607b      	str	r3, [r7, #4]
        break;
 8003556:	e002      	b.n	800355e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003558:	2300      	movs	r3, #0
 800355a:	607b      	str	r3, [r7, #4]
        break;
 800355c:	bf00      	nop
    }
  }
  return systick_source;
 800355e:	687b      	ldr	r3, [r7, #4]
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000e010 	.word	0xe000e010
 8003570:	44020c00 	.word	0x44020c00

08003574 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e147      	b.n	8003816 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe f944 	bl	8001828 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0210 	bic.w	r2, r2, #16
 80035ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b0:	f7fe fc48 	bl	8001e44 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035b6:	e012      	b.n	80035de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035b8:	f7fe fc44 	bl	8001e44 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b0a      	cmp	r3, #10
 80035c4:	d90b      	bls.n	80035de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e11b      	b.n	8003816 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d0e5      	beq.n	80035b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035fc:	f7fe fc22 	bl	8001e44 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003602:	e012      	b.n	800362a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003604:	f7fe fc1e 	bl	8001e44 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b0a      	cmp	r3, #10
 8003610:	d90b      	bls.n	800362a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0f5      	b.n	8003816 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0e5      	beq.n	8003604 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0202 	orr.w	r2, r2, #2
 8003646:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a74      	ldr	r2, [pc, #464]	@ (8003820 <HAL_FDCAN_Init+0x2ac>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d103      	bne.n	800365a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003652:	4a74      	ldr	r2, [pc, #464]	@ (8003824 <HAL_FDCAN_Init+0x2b0>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7c1b      	ldrb	r3, [r3, #16]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d108      	bne.n	8003674 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003670:	619a      	str	r2, [r3, #24]
 8003672:	e007      	b.n	8003684 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003682:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7c5b      	ldrb	r3, [r3, #17]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d108      	bne.n	800369e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800369a:	619a      	str	r2, [r3, #24]
 800369c:	e007      	b.n	80036ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7c9b      	ldrb	r3, [r3, #18]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d108      	bne.n	80036c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036c4:	619a      	str	r2, [r3, #24]
 80036c6:	e007      	b.n	80036d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80036fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0210 	bic.w	r2, r2, #16
 800370c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0204 	orr.w	r2, r2, #4
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	e02c      	b.n	8003782 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d028      	beq.n	8003782 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d01c      	beq.n	8003772 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003746:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0210 	orr.w	r2, r2, #16
 8003756:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d110      	bne.n	8003782 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0220 	orr.w	r2, r2, #32
 800376e:	619a      	str	r2, [r3, #24]
 8003770:	e007      	b.n	8003782 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	3b01      	subs	r3, #1
 8003788:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	3b01      	subs	r3, #1
 8003790:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003792:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800379a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b6:	d115      	bne.n	80037e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c2:	3b01      	subs	r3, #1
 80037c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	3b01      	subs	r3, #1
 80037ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80037d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	3b01      	subs	r3, #1
 80037da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80037e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f814 	bl	8003828 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	4000a400 	.word	0x4000a400
 8003824:	4000a500 	.word	0x4000a500

08003828 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003830:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003832:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003842:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	041a      	lsls	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003868:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	061a      	lsls	r2, r3, #24
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e005      	b.n	80038b6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3304      	adds	r3, #4
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3f3      	bcc.n	80038aa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	4000ac00 	.word	0x4000ac00

080038d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80038de:	4b0d      	ldr	r3, [pc, #52]	@ (8003914 <HAL_FLASH_Unlock+0x40>)
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80038ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <HAL_FLASH_Unlock+0x40>)
 80038ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <HAL_FLASH_Unlock+0x44>)
 80038ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_FLASH_Unlock+0x40>)
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <HAL_FLASH_Unlock+0x48>)
 80038f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80038f6:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <HAL_FLASH_Unlock+0x40>)
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8003906:	79fb      	ldrb	r3, [r7, #7]
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40022000 	.word	0x40022000
 8003918:	45670123 	.word	0x45670123
 800391c:	cdef89ab 	.word	0xcdef89ab

08003920 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <HAL_FLASH_Lock+0x34>)
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	4a09      	ldr	r2, [pc, #36]	@ (8003954 <HAL_FLASH_Lock+0x34>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <HAL_FLASH_Lock+0x34>)
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8003946:	79fb      	ldrb	r3, [r7, #7]
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40022000 	.word	0x40022000

08003958 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003966:	e142      	b.n	8003bee <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8134 	beq.w	8003be8 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x38>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b12      	cmp	r3, #18
 800398e:	d125      	bne.n	80039dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	08da      	lsrs	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3208      	adds	r2, #8
 8003998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	220f      	movs	r2, #15
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	6979      	ldr	r1, [r7, #20]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d00b      	beq.n	8003a30 <HAL_GPIO_Init+0xd8>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d007      	beq.n	8003a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a24:	2b11      	cmp	r3, #17
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b12      	cmp	r3, #18
 8003a2e:	d130      	bne.n	8003a92 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4013      	ands	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a66:	2201      	movs	r2, #1
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4013      	ands	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 0201 	and.w	r2, r3, #1
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d109      	bne.n	8003ab2 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d017      	beq.n	8003ae2 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2203      	movs	r2, #3
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d07c      	beq.n	8003be8 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003aee:	4a47      	ldr	r2, [pc, #284]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	3318      	adds	r3, #24
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	220f      	movs	r2, #15
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0a9a      	lsrs	r2, r3, #10
 8003b16:	4b3e      	ldr	r3, [pc, #248]	@ (8003c10 <HAL_GPIO_Init+0x2b8>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	f002 0203 	and.w	r2, r2, #3
 8003b20:	00d2      	lsls	r2, r2, #3
 8003b22:	4093      	lsls	r3, r2
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003b2a:	4938      	ldr	r1, [pc, #224]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3318      	adds	r3, #24
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003b38:	4b34      	ldr	r3, [pc, #208]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4013      	ands	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003b62:	4b2a      	ldr	r3, [pc, #168]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003b86:	4a21      	ldr	r2, [pc, #132]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b92:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003bba:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003be0:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <HAL_GPIO_Init+0x2b4>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3301      	adds	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f47f aeb5 	bne.w	8003968 <HAL_GPIO_Init+0x10>
  }
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	44022000 	.word	0x44022000
 8003c10:	002f7f7f 	.word	0x002f7f7f

08003c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e001      	b.n	8003c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c60:	e002      	b.n	8003c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e08d      	b.n	8003da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fe0e 	bl	80018bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	@ 0x24
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d107      	bne.n	8003cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	e006      	b.n	8003cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d108      	bne.n	8003d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	e007      	b.n	8003d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1a      	ldr	r2, [r3, #32]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d138      	bne.n	8003e32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e032      	b.n	8003e34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2224      	movs	r2, #36	@ 0x24
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d139      	bne.n	8003eca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e033      	b.n	8003ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	@ 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
  }
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e007      	b.n	8003f06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 0204 	bic.w	r2, r3, #4
 8003efe:	4905      	ldr	r1, [pc, #20]	@ (8003f14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40030400 	.word	0x40030400

08003f18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_ICACHE_Enable+0x1c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a04      	ldr	r2, [pc, #16]	@ (8003f34 <HAL_ICACHE_Enable+0x1c>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40030400 	.word	0x40030400

08003f38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0f3      	b.n	8004132 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd fdb8 	bl	8001ad4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2203      	movs	r2, #3
 8003f68:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f003 fe76 	bl	8007c62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7c1a      	ldrb	r2, [r3, #16]
 8003f7e:	f88d 2000 	strb.w	r2, [sp]
 8003f82:	3304      	adds	r3, #4
 8003f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f86:	f003 fe4e 	bl	8007c26 <USB_CoreInit>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0ca      	b.n	8004132 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 fe72 	bl	8007c8c <USB_SetCurrentMode>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e0bb      	b.n	8004132 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e03f      	b.n	8004040 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	3315      	adds	r3, #21
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3317      	adds	r3, #23
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	3324      	adds	r3, #36	@ 0x24
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	3328      	adds	r3, #40	@ 0x28
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	440b      	add	r3, r1
 8004034:	3304      	adds	r3, #4
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	3301      	adds	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	791b      	ldrb	r3, [r3, #4]
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3ba      	bcc.n	8003fc0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	e044      	b.n	80040da <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	f203 1357 	addw	r3, r3, #343	@ 0x157
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	440b      	add	r3, r1
 80040b6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	3301      	adds	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3b5      	bcc.n	8004050 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7c1a      	ldrb	r2, [r3, #16]
 80040ec:	f88d 2000 	strb.w	r2, [sp]
 80040f0:	3304      	adds	r3, #4
 80040f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040f4:	f003 fded 	bl	8007cd2 <USB_DevInit>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e013      	b.n	8004132 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7b1b      	ldrb	r3, [r3, #12]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d102      	bne.n	8004126 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f80a 	bl	800413a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f003 fdf4 	bl	8007d18 <USB_DevDisconnect>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	f043 0202 	orr.w	r2, r3, #2
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f000 bc28 	b.w	80049e4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004194:	4b94      	ldr	r3, [pc, #592]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 0318 	and.w	r3, r3, #24
 800419c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800419e:	4b92      	ldr	r3, [pc, #584]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05b      	beq.n	800426c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d005      	beq.n	80041c6 <HAL_RCC_OscConfig+0x46>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b18      	cmp	r3, #24
 80041be:	d114      	bne.n	80041ea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d111      	bne.n	80041ea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f000 bc08 	b.w	80049e4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80041d4:	4b84      	ldr	r3, [pc, #528]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	4981      	ldr	r1, [pc, #516]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041e8:	e040      	b.n	800426c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041f2:	4b7d      	ldr	r3, [pc, #500]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7c      	ldr	r2, [pc, #496]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd fe21 	bl	8001e44 <HAL_GetTick>
 8004202:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004206:	f7fd fe1d 	bl	8001e44 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e3e5      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004218:	4b73      	ldr	r3, [pc, #460]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004224:	4b70      	ldr	r3, [pc, #448]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	496d      	ldr	r1, [pc, #436]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004234:	4313      	orrs	r3, r2
 8004236:	618b      	str	r3, [r1, #24]
 8004238:	e018      	b.n	800426c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800423a:	4b6b      	ldr	r3, [pc, #428]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6a      	ldr	r2, [pc, #424]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd fdfd 	bl	8001e44 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800424e:	f7fd fdf9 	bl	8001e44 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e3c1      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004260:	4b61      	ldr	r3, [pc, #388]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80a0 	beq.w	80043ba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b10      	cmp	r3, #16
 800427e:	d005      	beq.n	800428c <HAL_RCC_OscConfig+0x10c>
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b18      	cmp	r3, #24
 8004284:	d109      	bne.n	800429a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d106      	bne.n	800429a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 8092 	bne.w	80043ba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e3a4      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x132>
 80042a4:	4b50      	ldr	r3, [pc, #320]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a4f      	ldr	r2, [pc, #316]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e058      	b.n	8004364 <HAL_RCC_OscConfig+0x1e4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d112      	bne.n	80042e0 <HAL_RCC_OscConfig+0x160>
 80042ba:	4b4b      	ldr	r3, [pc, #300]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4a      	ldr	r2, [pc, #296]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b48      	ldr	r3, [pc, #288]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a47      	ldr	r2, [pc, #284]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b45      	ldr	r3, [pc, #276]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a44      	ldr	r2, [pc, #272]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e041      	b.n	8004364 <HAL_RCC_OscConfig+0x1e4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e8:	d112      	bne.n	8004310 <HAL_RCC_OscConfig+0x190>
 80042ea:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3e      	ldr	r2, [pc, #248]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b3c      	ldr	r3, [pc, #240]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3b      	ldr	r2, [pc, #236]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80042fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b39      	ldr	r3, [pc, #228]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e029      	b.n	8004364 <HAL_RCC_OscConfig+0x1e4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004318:	d112      	bne.n	8004340 <HAL_RCC_OscConfig+0x1c0>
 800431a:	4b33      	ldr	r3, [pc, #204]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b30      	ldr	r3, [pc, #192]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2f      	ldr	r2, [pc, #188]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800432c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b2d      	ldr	r3, [pc, #180]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2c      	ldr	r2, [pc, #176]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e011      	b.n	8004364 <HAL_RCC_OscConfig+0x1e4>
 8004340:	4b29      	ldr	r3, [pc, #164]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a25      	ldr	r2, [pc, #148]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a22      	ldr	r2, [pc, #136]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 800435e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd fd6a 	bl	8001e44 <HAL_GetTick>
 8004370:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004374:	f7fd fd66 	bl	8001e44 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e32e      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004386:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x1f4>
 8004392:	e012      	b.n	80043ba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fd56 	bl	8001e44 <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800439c:	f7fd fd52 	bl	8001e44 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e31a      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ae:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <HAL_RCC_OscConfig+0x268>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 809a 	beq.w	80044fc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x25a>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b18      	cmp	r3, #24
 80043d2:	d149      	bne.n	8004468 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d146      	bne.n	8004468 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e2fe      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
 80043e6:	bf00      	nop
 80043e8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80043f2:	4b9a      	ldr	r3, [pc, #616]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0218 	and.w	r2, r3, #24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d014      	beq.n	800442c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004402:	4b96      	ldr	r3, [pc, #600]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 0218 	bic.w	r2, r3, #24
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	4993      	ldr	r1, [pc, #588]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004414:	f000 fdd0 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004418:	4b91      	ldr	r3, [pc, #580]	@ (8004660 <HAL_RCC_OscConfig+0x4e0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fc87 	bl	8001d30 <HAL_InitTick>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e2db      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd fd0a 	bl	8001e44 <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004434:	f7fd fd06 	bl	8001e44 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e2ce      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004446:	4b85      	ldr	r3, [pc, #532]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004452:	4b82      	ldr	r3, [pc, #520]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	497e      	ldr	r1, [pc, #504]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004466:	e049      	b.n	80044fc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d02c      	beq.n	80044ca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004470:	4b7a      	ldr	r3, [pc, #488]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 0218 	bic.w	r2, r3, #24
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	4977      	ldr	r1, [pc, #476]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004482:	4b76      	ldr	r3, [pc, #472]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a75      	ldr	r2, [pc, #468]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd fcd9 	bl	8001e44 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004496:	f7fd fcd5 	bl	8001e44 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e29d      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a8:	4b6c      	ldr	r3, [pc, #432]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80044b4:	4b69      	ldr	r3, [pc, #420]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	4966      	ldr	r1, [pc, #408]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	610b      	str	r3, [r1, #16]
 80044c8:	e018      	b.n	80044fc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ca:	4b64      	ldr	r3, [pc, #400]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a63      	ldr	r2, [pc, #396]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd fcb5 	bl	8001e44 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80044de:	f7fd fcb1 	bl	8001e44 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e279      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f0:	4b5a      	ldr	r3, [pc, #360]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d03c      	beq.n	8004582 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01c      	beq.n	800454a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004510:	4b52      	ldr	r3, [pc, #328]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004516:	4a51      	ldr	r2, [pc, #324]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004518:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800451c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fd fc90 	bl	8001e44 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004528:	f7fd fc8c 	bl	8001e44 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e254      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800453a:	4b48      	ldr	r3, [pc, #288]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 800453c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ef      	beq.n	8004528 <HAL_RCC_OscConfig+0x3a8>
 8004548:	e01b      	b.n	8004582 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b44      	ldr	r3, [pc, #272]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 800454c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004550:	4a42      	ldr	r2, [pc, #264]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004552:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004556:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fc73 	bl	8001e44 <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004562:	f7fd fc6f 	bl	8001e44 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e237      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004574:	4b39      	ldr	r3, [pc, #228]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800457a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ef      	bne.n	8004562 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80d2 	beq.w	8004734 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004590:	4b34      	ldr	r3, [pc, #208]	@ (8004664 <HAL_RCC_OscConfig+0x4e4>)
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d118      	bne.n	80045ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800459c:	4b31      	ldr	r3, [pc, #196]	@ (8004664 <HAL_RCC_OscConfig+0x4e4>)
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <HAL_RCC_OscConfig+0x4e4>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a8:	f7fd fc4c 	bl	8001e44 <HAL_GetTick>
 80045ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fd fc48 	bl	8001e44 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e210      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045c2:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <HAL_RCC_OscConfig+0x4e4>)
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <HAL_RCC_OscConfig+0x468>
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80045d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045dc:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045e6:	e074      	b.n	80046d2 <HAL_RCC_OscConfig+0x552>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d118      	bne.n	8004622 <HAL_RCC_OscConfig+0x4a2>
 80045f0:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80045f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f6:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004600:	4b16      	ldr	r3, [pc, #88]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004606:	4a15      	ldr	r2, [pc, #84]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004610:	4b12      	ldr	r3, [pc, #72]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004616:	4a11      	ldr	r2, [pc, #68]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004620:	e057      	b.n	80046d2 <HAL_RCC_OscConfig+0x552>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d11e      	bne.n	8004668 <HAL_RCC_OscConfig+0x4e8>
 800462a:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 800462c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004630:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800463a:	4b08      	ldr	r3, [pc, #32]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 800463c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004640:	4a06      	ldr	r2, [pc, #24]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800464a:	4b04      	ldr	r3, [pc, #16]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 800464c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004650:	4a02      	ldr	r2, [pc, #8]	@ (800465c <HAL_RCC_OscConfig+0x4dc>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800465a:	e03a      	b.n	80046d2 <HAL_RCC_OscConfig+0x552>
 800465c:	44020c00 	.word	0x44020c00
 8004660:	20000008 	.word	0x20000008
 8004664:	44020800 	.word	0x44020800
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b85      	cmp	r3, #133	@ 0x85
 800466e:	d118      	bne.n	80046a2 <HAL_RCC_OscConfig+0x522>
 8004670:	4ba2      	ldr	r3, [pc, #648]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004676:	4aa1      	ldr	r2, [pc, #644]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004680:	4b9e      	ldr	r3, [pc, #632]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004686:	4a9d      	ldr	r2, [pc, #628]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004690:	4b9a      	ldr	r3, [pc, #616]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004696:	4a99      	ldr	r2, [pc, #612]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046a0:	e017      	b.n	80046d2 <HAL_RCC_OscConfig+0x552>
 80046a2:	4b96      	ldr	r3, [pc, #600]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a8:	4a94      	ldr	r2, [pc, #592]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046b2:	4b92      	ldr	r3, [pc, #584]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b8:	4a90      	ldr	r2, [pc, #576]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046ba:	f023 0304 	bic.w	r3, r3, #4
 80046be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046c2:	4b8e      	ldr	r3, [pc, #568]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c8:	4a8c      	ldr	r2, [pc, #560]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fd fbb3 	bl	8001e44 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fbaf 	bl	8001e44 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e175      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f8:	4b80      	ldr	r3, [pc, #512]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80046fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ed      	beq.n	80046e2 <HAL_RCC_OscConfig+0x562>
 8004706:	e015      	b.n	8004734 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fd fb9c 	bl	8001e44 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fb98 	bl	8001e44 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e15e      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004726:	4b75      	ldr	r3, [pc, #468]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ed      	bne.n	8004710 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d036      	beq.n	80047ae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d019      	beq.n	800477c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004748:	4b6c      	ldr	r3, [pc, #432]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a6b      	ldr	r2, [pc, #428]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 800474e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004752:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd fb76 	bl	8001e44 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800475c:	f7fd fb72 	bl	8001e44 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e13a      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800476e:	4b63      	ldr	r3, [pc, #396]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x5dc>
 800477a:	e018      	b.n	80047ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800477c:	4b5f      	ldr	r3, [pc, #380]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a5e      	ldr	r2, [pc, #376]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd fb5c 	bl	8001e44 <HAL_GetTick>
 800478c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004790:	f7fd fb58 	bl	8001e44 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e120      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80047a2:	4b56      	ldr	r3, [pc, #344]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8115 	beq.w	80049e2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b18      	cmp	r3, #24
 80047bc:	f000 80af 	beq.w	800491e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f040 8086 	bne.w	80048d6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80047ca:	4b4c      	ldr	r3, [pc, #304]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4b      	ldr	r2, [pc, #300]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80047d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd fb35 	bl	8001e44 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80047de:	f7fd fb31 	bl	8001e44 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0f9      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047f0:	4b42      	ldr	r3, [pc, #264]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80047fc:	4b3f      	ldr	r3, [pc, #252]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004804:	f023 0303 	bic.w	r3, r3, #3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004810:	0212      	lsls	r2, r2, #8
 8004812:	430a      	orrs	r2, r1
 8004814:	4939      	ldr	r1, [pc, #228]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	628b      	str	r3, [r1, #40]	@ 0x28
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481e:	3b01      	subs	r3, #1
 8004820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	3b01      	subs	r3, #1
 800482a:	025b      	lsls	r3, r3, #9
 800482c:	b29b      	uxth	r3, r3
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	3b01      	subs	r3, #1
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800484a:	492c      	ldr	r1, [pc, #176]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004850:	4b2a      	ldr	r3, [pc, #168]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	4a29      	ldr	r2, [pc, #164]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004860:	4a26      	ldr	r2, [pc, #152]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004866:	4b25      	ldr	r3, [pc, #148]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 800486c:	f043 0310 	orr.w	r3, r3, #16
 8004870:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004872:	4b22      	ldr	r3, [pc, #136]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	f023 020c 	bic.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	491f      	ldr	r1, [pc, #124]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004884:	4b1d      	ldr	r3, [pc, #116]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	f023 0220 	bic.w	r2, r3, #32
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004890:	491a      	ldr	r1, [pc, #104]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004892:	4313      	orrs	r3, r2
 8004894:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004896:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	4a18      	ldr	r2, [pc, #96]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80048a2:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80048a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fd fac9 	bl	8001e44 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048b6:	f7fd fac5 	bl	8001e44 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e08d      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x736>
 80048d4:	e085      	b.n	80049e2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a08      	ldr	r2, [pc, #32]	@ (80048fc <HAL_RCC_OscConfig+0x77c>)
 80048dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fd faaf 	bl	8001e44 <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048ea:	f7fd faab 	bl	8001e44 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d903      	bls.n	8004900 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e073      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
 80048fc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004900:	4b3a      	ldr	r3, [pc, #232]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ee      	bne.n	80048ea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800490c:	4b37      	ldr	r3, [pc, #220]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	4a36      	ldr	r2, [pc, #216]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 8004912:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	6293      	str	r3, [r2, #40]	@ 0x28
 800491c:	e061      	b.n	80049e2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800491e:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004924:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 8004926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004928:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	2b01      	cmp	r3, #1
 8004930:	d031      	beq.n	8004996 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0203 	and.w	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d12a      	bne.n	8004996 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d122      	bne.n	8004996 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d11a      	bne.n	8004996 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d111      	bne.n	8004996 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d108      	bne.n	8004996 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	0e1b      	lsrs	r3, r3, #24
 8004988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e024      	b.n	80049e4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800499a:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d01a      	beq.n	80049e2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80049ac:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	4a0e      	ldr	r2, [pc, #56]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd fa44 	bl	8001e44 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80049be:	bf00      	nop
 80049c0:	f7fd fa40 	bl	8001e44 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d0f9      	beq.n	80049c0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d0:	4a06      	ldr	r2, [pc, #24]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80049d6:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <HAL_RCC_OscConfig+0x86c>)
 80049dc:	f043 0310 	orr.w	r3, r3, #16
 80049e0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	44020c00 	.word	0x44020c00

080049f0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e19e      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b83      	ldr	r3, [pc, #524]	@ (8004c14 <HAL_RCC_ClockConfig+0x224>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b80      	ldr	r3, [pc, #512]	@ (8004c14 <HAL_RCC_ClockConfig+0x224>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 020f 	bic.w	r2, r3, #15
 8004a1a:	497e      	ldr	r1, [pc, #504]	@ (8004c14 <HAL_RCC_ClockConfig+0x224>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b7c      	ldr	r3, [pc, #496]	@ (8004c14 <HAL_RCC_ClockConfig+0x224>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e186      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d012      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	4b74      	ldr	r3, [pc, #464]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d909      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004a52:	4b71      	ldr	r3, [pc, #452]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	496d      	ldr	r1, [pc, #436]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d012      	beq.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	4b68      	ldr	r3, [pc, #416]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d909      	bls.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a84:	4b64      	ldr	r3, [pc, #400]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	4961      	ldr	r1, [pc, #388]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d010      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d908      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004ab4:	4b58      	ldr	r3, [pc, #352]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4955      	ldr	r1, [pc, #340]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d010      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	4b50      	ldr	r3, [pc, #320]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d908      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 020f 	bic.w	r2, r3, #15
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	494a      	ldr	r1, [pc, #296]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8093 	beq.w	8004c28 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b0a:	4b43      	ldr	r3, [pc, #268]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d121      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e113      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d107      	bne.n	8004b32 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b22:	4b3d      	ldr	r3, [pc, #244]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d115      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e107      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004b3a:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0fb      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4a:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0f3      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	492c      	ldr	r1, [pc, #176]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fd f96a 	bl	8001e44 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d112      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f7fd f962 	bl	8001e44 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e0d7      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b92:	4b21      	ldr	r3, [pc, #132]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 0318 	and.w	r3, r3, #24
 8004b9a:	2b18      	cmp	r3, #24
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x18c>
 8004b9e:	e043      	b.n	8004c28 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d112      	bne.n	8004bce <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004baa:	f7fd f94b 	bl	8001e44 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0c0      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc0:	4b15      	ldr	r3, [pc, #84]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 0318 	and.w	r3, r3, #24
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d1ee      	bne.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
 8004bcc:	e02c      	b.n	8004c28 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d122      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fd f934 	bl	8001e44 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e0a9      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bee:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_RCC_ClockConfig+0x228>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f003 0318 	and.w	r3, r3, #24
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d1ee      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x1e8>
 8004bfa:	e015      	b.n	8004c28 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fd f922 	bl	8001e44 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d906      	bls.n	8004c1c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e097      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000
 8004c18:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 0318 	and.w	r3, r3, #24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e9      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	4b44      	ldr	r3, [pc, #272]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d208      	bcs.n	8004c56 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004c44:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f023 020f 	bic.w	r2, r3, #15
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	493e      	ldr	r1, [pc, #248]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c56:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <HAL_RCC_ClockConfig+0x360>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d210      	bcs.n	8004c86 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c64:	4b3a      	ldr	r3, [pc, #232]	@ (8004d50 <HAL_RCC_ClockConfig+0x360>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 020f 	bic.w	r2, r3, #15
 8004c6c:	4938      	ldr	r1, [pc, #224]	@ (8004d50 <HAL_RCC_ClockConfig+0x360>)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c74:	4b36      	ldr	r3, [pc, #216]	@ (8004d50 <HAL_RCC_ClockConfig+0x360>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e05d      	b.n	8004d42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d010      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	4b2d      	ldr	r3, [pc, #180]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d208      	bcs.n	8004cb4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4927      	ldr	r1, [pc, #156]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	4b21      	ldr	r3, [pc, #132]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d209      	bcs.n	8004ce6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	491a      	ldr	r1, [pc, #104]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d012      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	4b15      	ldr	r3, [pc, #84]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d209      	bcs.n	8004d18 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	490e      	ldr	r1, [pc, #56]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004d18:	f000 f822 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_ClockConfig+0x35c>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490b      	ldr	r1, [pc, #44]	@ (8004d54 <HAL_RCC_ClockConfig+0x364>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d58 <HAL_RCC_ClockConfig+0x368>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <HAL_RCC_ClockConfig+0x36c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fffa 	bl	8001d30 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004d40:	7afb      	ldrb	r3, [r7, #11]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	44020c00 	.word	0x44020c00
 8004d50:	40022000 	.word	0x40022000
 8004d54:	08007dac 	.word	0x08007dac
 8004d58:	20000004 	.word	0x20000004
 8004d5c:	20000008 	.word	0x20000008

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	@ 0x24
 8004d64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d66:	4b8c      	ldr	r3, [pc, #560]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0318 	and.w	r3, r3, #24
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d102      	bne.n	8004d78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d72:	4b8a      	ldr	r3, [pc, #552]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e107      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d78:	4b87      	ldr	r3, [pc, #540]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0318 	and.w	r3, r3, #24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d112      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d84:	4b84      	ldr	r3, [pc, #528]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d90:	4b81      	ldr	r3, [pc, #516]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	4a81      	ldr	r2, [pc, #516]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	e0f1      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004da4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e0ee      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004daa:	4b7b      	ldr	r3, [pc, #492]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0318 	and.w	r3, r3, #24
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004db6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x244>)
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e0e5      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dbc:	4b76      	ldr	r3, [pc, #472]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f003 0318 	and.w	r3, r3, #24
 8004dc4:	2b18      	cmp	r3, #24
 8004dc6:	f040 80dd 	bne.w	8004f84 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004dca:	4b73      	ldr	r3, [pc, #460]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004dd4:	4b70      	ldr	r3, [pc, #448]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004de0:	4b6d      	ldr	r3, [pc, #436]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004dec:	4b6a      	ldr	r3, [pc, #424]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80b7 	beq.w	8004f7e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0xbe>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d056      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x16a>
 8004e1c:	e077      	b.n	8004f0e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02d      	beq.n	8004e86 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	08db      	lsrs	r3, r3, #3
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e36:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e54:	4b50      	ldr	r3, [pc, #320]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e64:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e68:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8004e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e80:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004e84:	e065      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e90:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004fac <HAL_RCC_GetSysClockFreq+0x24c>
 8004e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e98:	4b3f      	ldr	r3, [pc, #252]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eac:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8004eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ec8:	e043      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x250>
 8004ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004edc:	4b2e      	ldr	r3, [pc, #184]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eec:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8004ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004efc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f08:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004f0c:	e021      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x254>
 8004f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f20:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f30:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f34:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8004f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004f50:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004f52:	4b11      	ldr	r3, [pc, #68]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f6a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f76:	ee17 3a90 	vmov	r3, s15
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e004      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	e001      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004f84:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f86:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004f88:	69fb      	ldr	r3, [r7, #28]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3724      	adds	r7, #36	@ 0x24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	44020c00 	.word	0x44020c00
 8004f9c:	003d0900 	.word	0x003d0900
 8004fa0:	03d09000 	.word	0x03d09000
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	46000000 	.word	0x46000000
 8004fac:	4c742400 	.word	0x4c742400
 8004fb0:	4b742400 	.word	0x4b742400
 8004fb4:	4a742400 	.word	0x4a742400

08004fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fbc:	f7ff fed0 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004fc6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fca:	4907      	ldr	r1, [pc, #28]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004fce:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd6:	4a05      	ldr	r2, [pc, #20]	@ (8004fec <HAL_RCC_GetHCLKFreq+0x34>)
 8004fd8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004fda:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <HAL_RCC_GetHCLKFreq+0x34>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	44020c00 	.word	0x44020c00
 8004fe8:	08007dac 	.word	0x08007dac
 8004fec:	20000004 	.word	0x20000004

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ff4:	f7ff ffe0 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4904      	ldr	r1, [pc, #16]	@ (8005018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	44020c00 	.word	0x44020c00
 8005018:	08007dbc 	.word	0x08007dbc

0800501c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005020:	f7ff ffca 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b06      	ldr	r3, [pc, #24]	@ (8005040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4904      	ldr	r1, [pc, #16]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	44020c00 	.word	0x44020c00
 8005044:	08007dbc 	.word	0x08007dbc

08005048 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800504c:	f7ff ffb4 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005050:	4602      	mov	r2, r0
 8005052:	4b06      	ldr	r3, [pc, #24]	@ (800506c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	0b1b      	lsrs	r3, r3, #12
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	4904      	ldr	r1, [pc, #16]	@ (8005070 <HAL_RCC_GetPCLK3Freq+0x28>)
 800505e:	5ccb      	ldrb	r3, [r1, r3]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	44020c00 	.word	0x44020c00
 8005070:	08007dbc 	.word	0x08007dbc

08005074 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005078:	b0aa      	sub	sp, #168	@ 0xa8
 800507a:	af00      	add	r7, sp, #0
 800507c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005080:	2300      	movs	r3, #0
 8005082:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005086:	2300      	movs	r3, #0
 8005088:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800508c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005098:	2500      	movs	r5, #0
 800509a:	ea54 0305 	orrs.w	r3, r4, r5
 800509e:	d00b      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80050a0:	4bb8      	ldr	r3, [pc, #736]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050a6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80050aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	4ab4      	ldr	r2, [pc, #720]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f002 0801 	and.w	r8, r2, #1
 80050c4:	f04f 0900 	mov.w	r9, #0
 80050c8:	ea58 0309 	orrs.w	r3, r8, r9
 80050cc:	d038      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80050ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d819      	bhi.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	08005115 	.word	0x08005115
 80050e4:	080050f9 	.word	0x080050f9
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005115 	.word	0x08005115
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050fc:	3308      	adds	r3, #8
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fff2 	bl	80070e8 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800510a:	e004      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005112:	e000      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8005114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005116:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10c      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800511e:	4b99      	ldr	r3, [pc, #612]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005124:	f023 0107 	bic.w	r1, r3, #7
 8005128:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800512c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512e:	4a95      	ldr	r2, [pc, #596]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005130:	430b      	orrs	r3, r1
 8005132:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005136:	e003      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800513c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005140:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f002 0a02 	and.w	sl, r2, #2
 800514c:	f04f 0b00 	mov.w	fp, #0
 8005150:	ea5a 030b 	orrs.w	r3, sl, fp
 8005154:	d03c      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005156:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	2b28      	cmp	r3, #40	@ 0x28
 800515e:	d01b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005160:	2b28      	cmp	r3, #40	@ 0x28
 8005162:	d815      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d019      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d811      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800516c:	2b18      	cmp	r3, #24
 800516e:	d017      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005170:	2b18      	cmp	r3, #24
 8005172:	d80d      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005178:	2b08      	cmp	r3, #8
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800517c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005180:	3308      	adds	r3, #8
 8005182:	4618      	mov	r0, r3
 8005184:	f001 ffb0 	bl	80070e8 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800518e:	e00a      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005196:	e006      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005198:	bf00      	nop
 800519a:	e004      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800519c:	bf00      	nop
 800519e:	e002      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80051a0:	bf00      	nop
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80051a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80051ae:	4b75      	ldr	r3, [pc, #468]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051b4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	4a71      	ldr	r2, [pc, #452]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 0304 	and.w	r3, r2, #4
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d040      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80051f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051fa:	d01e      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80051fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005200:	d817      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005206:	d01a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8005208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800520c:	d811      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800520e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005210:	d017      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005212:	2bc0      	cmp	r3, #192	@ 0xc0
 8005214:	d80d      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d015      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800521a:	2b40      	cmp	r3, #64	@ 0x40
 800521c:	d109      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800521e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005222:	3308      	adds	r3, #8
 8005224:	4618      	mov	r0, r3
 8005226:	f001 ff5f 	bl	80070e8 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005230:	e00a      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800523a:	bf00      	nop
 800523c:	e004      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800523e:	bf00      	nop
 8005240:	e002      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005242:	bf00      	nop
 8005244:	e000      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005248:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005250:	4b4c      	ldr	r3, [pc, #304]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005252:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005256:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800525a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	4a48      	ldr	r2, [pc, #288]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800526e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005272:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800527e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005282:	2300      	movs	r3, #0
 8005284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005288:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800528c:	460b      	mov	r3, r1
 800528e:	4313      	orrs	r3, r2
 8005290:	d043      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005292:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005298:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800529c:	d021      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800529e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80052a2:	d81a      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x266>
 80052a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052a8:	d01d      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80052aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052ae:	d814      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x266>
 80052b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052b4:	d019      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80052b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052ba:	d80e      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x266>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80052c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052c4:	d109      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ca:	3308      	adds	r3, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 ff0b 	bl	80070e8 <RCCEx_PLL2_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052e2:	bf00      	nop
 80052e4:	e004      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052e6:	bf00      	nop
 80052e8:	e002      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052ea:	bf00      	nop
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10c      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80052f8:	4b22      	ldr	r3, [pc, #136]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052fe:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005302:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	4a1e      	ldr	r2, [pc, #120]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005316:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800531a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005326:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005328:	2300      	movs	r3, #0
 800532a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800532c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d03e      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005336:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005340:	d01b      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005342:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005346:	d814      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800534c:	d017      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800534e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005352:	d80e      	bhi.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535c:	d109      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800535e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005362:	3308      	adds	r3, #8
 8005364:	4618      	mov	r0, r3
 8005366:	f001 febf 	bl	80070e8 <RCCEx_PLL2_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005370:	e00b      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005378:	e007      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800537a:	bf00      	nop
 800537c:	e005      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800537e:	bf00      	nop
 8005380:	e003      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8005382:	bf00      	nop
 8005384:	44020c00 	.word	0x44020c00
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005392:	4ba5      	ldr	r3, [pc, #660]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005398:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800539c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	4aa1      	ldr	r2, [pc, #644]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053aa:	e003      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80053c2:	2300      	movs	r3, #0
 80053c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80053c6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80053ca:	460b      	mov	r3, r1
 80053cc:	4313      	orrs	r3, r2
 80053ce:	d03b      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80053d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053da:	d01b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80053dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053e0:	d814      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x398>
 80053e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053e6:	d017      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053ec:	d80e      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x398>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80053f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053f6:	d109      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053fc:	3308      	adds	r3, #8
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 fe72 	bl	80070e8 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800541c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10c      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005426:	4b80      	ldr	r3, [pc, #512]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800542c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005436:	4a7c      	ldr	r2, [pc, #496]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005438:	430b      	orrs	r3, r1
 800543a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800543e:	e003      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005444:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005448:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005456:	2300      	movs	r3, #0
 8005458:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800545a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d033      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800546e:	d015      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005474:	d80e      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d012      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800547a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800547e:	d109      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005480:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005484:	3308      	adds	r3, #8
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fe2e 	bl	80070e8 <RCCEx_PLL2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005492:	e006      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800549a:	e002      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80054a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80054aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054b0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80054b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054bc:	430b      	orrs	r3, r1
 80054be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054c2:	e003      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80054cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	2100      	movs	r1, #0
 80054d6:	6639      	str	r1, [r7, #96]	@ 0x60
 80054d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80054de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054e2:	460b      	mov	r3, r1
 80054e4:	4313      	orrs	r3, r2
 80054e6:	d033      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80054e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f8:	d80e      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d012      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80054fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005502:	d109      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005504:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005508:	3308      	adds	r3, #8
 800550a:	4618      	mov	r0, r3
 800550c:	f001 fdec 	bl	80070e8 <RCCEx_PLL2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005516:	e006      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800551e:	e002      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005524:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005526:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10c      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800552e:	4b3e      	ldr	r3, [pc, #248]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005534:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800553c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553e:	4a3a      	ldr	r2, [pc, #232]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005540:	430b      	orrs	r3, r1
 8005542:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005546:	e003      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800554c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005550:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	2100      	movs	r1, #0
 800555a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800555c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005562:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005566:	460b      	mov	r3, r1
 8005568:	4313      	orrs	r3, r2
 800556a:	d00e      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800556c:	4b2e      	ldr	r3, [pc, #184]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	4a2d      	ldr	r2, [pc, #180]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005572:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005576:	61d3      	str	r3, [r2, #28]
 8005578:	4b2b      	ldr	r3, [pc, #172]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800557a:	69d9      	ldr	r1, [r3, #28]
 800557c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005584:	4a28      	ldr	r2, [pc, #160]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005586:	430b      	orrs	r3, r1
 8005588:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800558a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005596:	653b      	str	r3, [r7, #80]	@ 0x50
 8005598:	2300      	movs	r3, #0
 800559a:	657b      	str	r3, [r7, #84]	@ 0x54
 800559c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80055a0:	460b      	mov	r3, r1
 80055a2:	4313      	orrs	r3, r2
 80055a4:	d046      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80055a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055b0:	d021      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80055b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055b6:	d81a      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055bc:	d01d      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x586>
 80055be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c2:	d814      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80055c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055c8:	d019      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80055ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ce:	d80e      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d016      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80055d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055de:	3308      	adds	r3, #8
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fd81 	bl	80070e8 <RCCEx_PLL2_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80055ec:	e00a      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055f4:	e006      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055f6:	bf00      	nop
 80055f8:	e004      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055fa:	bf00      	nop
 80055fc:	e002      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055fe:	bf00      	nop
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005604:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800560e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005612:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	4a02      	ldr	r2, [pc, #8]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800561e:	430b      	orrs	r3, r1
 8005620:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005624:	e006      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005626:	bf00      	nop
 8005628:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005630:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005634:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005642:	2300      	movs	r3, #0
 8005644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005646:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800564a:	460b      	mov	r3, r1
 800564c:	4313      	orrs	r3, r2
 800564e:	d043      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005650:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800565a:	d021      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800565c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005660:	d81a      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005666:	d01d      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800566c:	d814      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800566e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005672:	d019      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005674:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005678:	d80e      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x638>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005682:	d109      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005688:	3308      	adds	r3, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fd2c 	bl	80070e8 <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005696:	e00a      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800569e:	e006      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80056b6:	4bb6      	ldr	r3, [pc, #728]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80056c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c6:	4ab2      	ldr	r2, [pc, #712]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80056ce:	e003      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056d4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80056d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e6:	2300      	movs	r3, #0
 80056e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d030      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d80f      	bhi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d211      	bcs.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8005702:	2b01      	cmp	r3, #1
 8005704:	d911      	bls.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005706:	2b02      	cmp	r3, #2
 8005708:	d109      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800570a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800570e:	3308      	adds	r3, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f001 fce9 	bl	80070e8 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800571c:	e006      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005724:	e002      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800572a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800572c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10c      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005734:	4b96      	ldr	r3, [pc, #600]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800573a:	f023 0107 	bic.w	r1, r3, #7
 800573e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005744:	4a92      	ldr	r2, [pc, #584]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800574c:	e003      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005752:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005756:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	2100      	movs	r1, #0
 8005760:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005768:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800576c:	460b      	mov	r3, r1
 800576e:	4313      	orrs	r3, r2
 8005770:	d022      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800577c:	2b08      	cmp	r3, #8
 800577e:	d005      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005786:	e002      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800578c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005796:	4b7e      	ldr	r3, [pc, #504]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800579c:	f023 0108 	bic.w	r1, r3, #8
 80057a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057a6:	4a7a      	ldr	r2, [pc, #488]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057a8:	430b      	orrs	r3, r1
 80057aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80057b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f000 80b0 	beq.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80057d6:	4b6f      	ldr	r3, [pc, #444]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	4a6e      	ldr	r2, [pc, #440]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e2:	f7fc fb2f 	bl	8001e44 <HAL_GetTick>
 80057e6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057ea:	e00b      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ec:	f7fc fb2a 	bl	8001e44 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d903      	bls.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005802:	e005      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005804:	4b63      	ldr	r3, [pc, #396]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ed      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8005810:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 808a 	bne.w	800592e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800581a:	4b5d      	ldr	r3, [pc, #372]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800581c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d022      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8005830:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005836:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800583a:	429a      	cmp	r2, r3
 800583c:	d01b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800583e:	4b54      	ldr	r3, [pc, #336]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800584c:	4b50      	ldr	r3, [pc, #320]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800584e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005852:	4a4f      	ldr	r2, [pc, #316]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800585c:	4b4c      	ldr	r3, [pc, #304]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800585e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005862:	4a4b      	ldr	r2, [pc, #300]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005868:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800586c:	4a48      	ldr	r2, [pc, #288]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800586e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d019      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005882:	f7fc fadf 	bl	8001e44 <HAL_GetTick>
 8005886:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588a:	e00d      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588c:	f7fc fada 	bl	8001e44 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d903      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80058a6:	e006      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a8:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0ea      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80058b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d132      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80058be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058cc:	d10f      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80058ce:	4b30      	ldr	r3, [pc, #192]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80058e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	61d3      	str	r3, [r2, #28]
 80058ec:	e005      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x886>
 80058ee:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	4a27      	ldr	r2, [pc, #156]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058f8:	61d3      	str	r3, [r2, #28]
 80058fa:	4b25      	ldr	r3, [pc, #148]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005900:	4a23      	ldr	r2, [pc, #140]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005906:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800590a:	4b21      	ldr	r3, [pc, #132]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800590c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005910:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591a:	4a1d      	ldr	r2, [pc, #116]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800591c:	430b      	orrs	r3, r1
 800591e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005922:	e008      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005924:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005928:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800592c:	e003      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005932:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005936:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005944:	2300      	movs	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005948:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d038      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005952:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005958:	2b30      	cmp	r3, #48	@ 0x30
 800595a:	d014      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800595c:	2b30      	cmp	r3, #48	@ 0x30
 800595e:	d80e      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005960:	2b20      	cmp	r3, #32
 8005962:	d012      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005964:	2b20      	cmp	r3, #32
 8005966:	d80a      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d015      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800596c:	2b10      	cmp	r3, #16
 800596e:	d106      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005970:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	4a06      	ldr	r2, [pc, #24]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800597c:	e00d      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005984:	e009      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005986:	bf00      	nop
 8005988:	e007      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800598a:	bf00      	nop
 800598c:	e005      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800598e:	bf00      	nop
 8005990:	44020c00 	.word	0x44020c00
 8005994:	44020800 	.word	0x44020800
        break;
 8005998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10c      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80059a2:	4bb5      	ldr	r3, [pc, #724]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b2:	49b1      	ldr	r1, [pc, #708]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80059ba:	e003      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80059c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80059d0:	623b      	str	r3, [r7, #32]
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059da:	460b      	mov	r3, r1
 80059dc:	4313      	orrs	r3, r2
 80059de:	d03c      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80059e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d81d      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a05 	.word	0x08005a05
 80059f4:	08005a13 	.word	0x08005a13
 80059f8:	08005a27 	.word	0x08005a27
 80059fc:	08005a2f 	.word	0x08005a2f
 8005a00:	08005a2f 	.word	0x08005a2f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a04:	4b9c      	ldr	r3, [pc, #624]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	4a9b      	ldr	r2, [pc, #620]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a0e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005a10:	e00e      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a16:	3308      	adds	r3, #8
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 fb65 	bl	80070e8 <RCCEx_PLL2_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005a24:	e004      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a2c:	e000      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8005a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a30:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10c      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005a38:	4b8f      	ldr	r3, [pc, #572]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a48:	498b      	ldr	r1, [pc, #556]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a50:	e003      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a52:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a56:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a70:	460b      	mov	r3, r1
 8005a72:	4313      	orrs	r3, r2
 8005a74:	d03c      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005a76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d01f      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d819      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a84:	2b18      	cmp	r3, #24
 8005a86:	d01d      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005a88:	2b18      	cmp	r3, #24
 8005a8a:	d815      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d007      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005a94:	e010      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a96:	4b78      	ldr	r3, [pc, #480]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	4a77      	ldr	r2, [pc, #476]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e010      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fb1c 	bl	80070e8 <RCCEx_PLL2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005ab6:	e006      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005ace:	4b6a      	ldr	r3, [pc, #424]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ad4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005ad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	4966      	ldr	r1, [pc, #408]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005ae6:	e003      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005aec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d03e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b16:	d020      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1c:	d819      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b20:	d01d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b24:	d815      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005b2a:	2b40      	cmp	r3, #64	@ 0x40
 8005b2c:	d007      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005b2e:	e010      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b30:	4b51      	ldr	r3, [pc, #324]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	4a50      	ldr	r2, [pc, #320]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b3c:	e010      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b42:	3308      	adds	r3, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 facf 	bl	80070e8 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10c      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b68:	4b43      	ldr	r3, [pc, #268]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b6e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b78:	493f      	ldr	r1, [pc, #252]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005b80:	e003      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b82:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b86:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	2100      	movs	r1, #0
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d038      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb6:	d815      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d017      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc0:	d110      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bcc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bce:	e00e      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fa86 	bl	80070e8 <RCCEx_PLL2_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005be2:	e004      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005bf6:	4b20      	ldr	r3, [pc, #128]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c06:	491c      	ldr	r1, [pc, #112]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	2100      	movs	r1, #0
 8005c22:	6039      	str	r1, [r7, #0]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d039      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c3a:	2b30      	cmp	r3, #48	@ 0x30
 8005c3c:	d01e      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005c3e:	2b30      	cmp	r3, #48	@ 0x30
 8005c40:	d815      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d002      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d007      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005c4a:	e010      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c50:	4a09      	ldr	r2, [pc, #36]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c56:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c58:	e011      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c5e:	3308      	adds	r3, #8
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 fa41 	bl	80070e8 <RCCEx_PLL2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c6c:	e007      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005c74:	e003      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005c76:	bf00      	nop
 8005c78:	44020c00 	.word	0x44020c00
        break;
 8005c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c86:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c9e:	e003      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ca4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005ca8:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	37a8      	adds	r7, #168	@ 0xa8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cb6:	bf00      	nop
 8005cb8:	44020c00 	.word	0x44020c00

08005cbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b08b      	sub	sp, #44	@ 0x2c
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005cc4:	4bae      	ldr	r3, [pc, #696]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ccc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005cce:	4bac      	ldr	r3, [pc, #688]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005cd8:	4ba9      	ldr	r3, [pc, #676]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ce2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ce4:	4ba6      	ldr	r3, [pc, #664]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005cf0:	4ba3      	ldr	r3, [pc, #652]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d08:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8126 	beq.w	8005f60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d053      	beq.n	8005dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d86f      	bhi.n	8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d02b      	beq.n	8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005d2c:	e068      	b.n	8005e00 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d2e:	4b94      	ldr	r3, [pc, #592]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	4a92      	ldr	r2, [pc, #584]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d66:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d82:	e068      	b.n	8005e56 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005da4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005dc0:	e049      	b.n	8005e56 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dcc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005f90 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8005dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a04 	vldr	s12, [r7, #16]
 8005de2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005dfe:	e02a      	b.n	8005e56 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e00:	4b5f      	ldr	r3, [pc, #380]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	08db      	lsrs	r3, r3, #3
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e34:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e38:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e54:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e56:	4b4a      	ldr	r3, [pc, #296]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e62:	d121      	bne.n	8005ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005e64:	4b46      	ldr	r3, [pc, #280]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d017      	beq.n	8005ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e70:	4b43      	ldr	r3, [pc, #268]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e74:	0a5b      	lsrs	r3, r3, #9
 8005e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e86:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e8a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e96:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e006      	b.n	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eae:	4b34      	ldr	r3, [pc, #208]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eba:	d121      	bne.n	8005f00 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005ebc:	4b30      	ldr	r3, [pc, #192]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d017      	beq.n	8005ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ede:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ee2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e006      	b.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	e002      	b.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f06:	4b1e      	ldr	r3, [pc, #120]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f12:	d121      	bne.n	8005f58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005f14:	4b1a      	ldr	r3, [pc, #104]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d017      	beq.n	8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f20:	4b17      	ldr	r3, [pc, #92]	@ (8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f24:	0e1b      	lsrs	r3, r3, #24
 8005f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005f3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f46:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005f4e:	e010      	b.n	8005f72 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
}
 8005f56:	e00c      	b.n	8005f72 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
}
 8005f5e:	e008      	b.n	8005f72 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	bf00      	nop
 8005f74:	372c      	adds	r7, #44	@ 0x2c
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	44020c00 	.word	0x44020c00
 8005f84:	03d09000 	.word	0x03d09000
 8005f88:	46000000 	.word	0x46000000
 8005f8c:	4a742400 	.word	0x4a742400
 8005f90:	4b742400 	.word	0x4b742400

08005f94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b08b      	sub	sp, #44	@ 0x2c
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005f9c:	4bae      	ldr	r3, [pc, #696]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005fa6:	4bac      	ldr	r3, [pc, #688]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005fb0:	4ba9      	ldr	r3, [pc, #676]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fba:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005fbc:	4ba6      	ldr	r3, [pc, #664]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005fc8:	4ba3      	ldr	r3, [pc, #652]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	08db      	lsrs	r3, r3, #3
 8005fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8126 	beq.w	8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d053      	beq.n	800609a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d86f      	bhi.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d003      	beq.n	8006006 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d02b      	beq.n	800605c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006004:	e068      	b.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006006:	4b94      	ldr	r3, [pc, #592]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	08db      	lsrs	r3, r3, #3
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	4a92      	ldr	r2, [pc, #584]	@ (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006012:	fa22 f303 	lsr.w	r3, r2, r3
 8006016:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a04 	vldr	s12, [r7, #16]
 800603e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800605a:	e068      	b.n	800612e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006078:	ed97 6a04 	vldr	s12, [r7, #16]
 800607c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006094:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006098:	e049      	b.n	800612e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80060a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80060ba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80060d6:	e02a      	b.n	800612e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060d8:	4b5f      	ldr	r3, [pc, #380]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	08db      	lsrs	r3, r3, #3
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	4a5e      	ldr	r2, [pc, #376]	@ (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
 80060e8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006110:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800612c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800612e:	4b4a      	ldr	r3, [pc, #296]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613a:	d121      	bne.n	8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800613c:	4b46      	ldr	r3, [pc, #280]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d017      	beq.n	8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006148:	4b43      	ldr	r3, [pc, #268]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	0a5b      	lsrs	r3, r3, #9
 800614e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800615a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800615e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006162:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800616a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800616e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e006      	b.n	8006186 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	e002      	b.n	8006186 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006186:	4b34      	ldr	r3, [pc, #208]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800618e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006192:	d121      	bne.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006194:	4b30      	ldr	r3, [pc, #192]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d017      	beq.n	80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80061b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80061ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	e006      	b.n	80061de <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	e002      	b.n	80061de <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061de:	4b1e      	ldr	r3, [pc, #120]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ea:	d121      	bne.n	8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80061ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061f8:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80061fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fc:	0e1b      	lsrs	r3, r3, #24
 80061fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800620a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800620e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006212:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006226:	e010      	b.n	800624a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
}
 800622e:	e00c      	b.n	800624a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	609a      	str	r2, [r3, #8]
}
 8006236:	e008      	b.n	800624a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]
}
 800624a:	bf00      	nop
 800624c:	372c      	adds	r7, #44	@ 0x2c
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	44020c00 	.word	0x44020c00
 800625c:	03d09000 	.word	0x03d09000
 8006260:	46000000 	.word	0x46000000
 8006264:	4a742400 	.word	0x4a742400
 8006268:	4b742400 	.word	0x4b742400

0800626c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	@ 0x30
 8006270:	af00      	add	r7, sp, #0
 8006272:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800627e:	430b      	orrs	r3, r1
 8006280:	d14b      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006282:	4bc4      	ldr	r3, [pc, #784]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800628e:	4bc1      	ldr	r3, [pc, #772]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d108      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a2:	d104      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80062a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062aa:	f000 bf14 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80062ae:	4bb9      	ldr	r3, [pc, #740]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062bc:	d108      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c4:	d104      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80062c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062cc:	f000 bf03 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80062d0:	4bb0      	ldr	r3, [pc, #704]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062dc:	d119      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e4:	d115      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062e6:	4bab      	ldr	r3, [pc, #684]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80062ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062f2:	d30a      	bcc.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80062f4:	4ba7      	ldr	r3, [pc, #668]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062fe:	4aa6      	ldr	r2, [pc, #664]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006306:	f000 bee6 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800630e:	f000 bee2 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006316:	f000 bede 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800631a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800631e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8006322:	ea52 0301 	orrs.w	r3, r2, r1
 8006326:	f000 838e 	beq.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800632a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800632e:	2a01      	cmp	r2, #1
 8006330:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8006334:	f080 86cc 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8006340:	ea52 0301 	orrs.w	r3, r2, r1
 8006344:	f000 82aa 	beq.w	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	2a01      	cmp	r2, #1
 800634e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8006352:	f080 86bd 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635a:	f1a3 0110 	sub.w	r1, r3, #16
 800635e:	ea52 0301 	orrs.w	r3, r2, r1
 8006362:	f000 8681 	beq.w	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8006366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636a:	2a01      	cmp	r2, #1
 800636c:	f173 0310 	sbcs.w	r3, r3, #16
 8006370:	f080 86ae 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006378:	1f19      	subs	r1, r3, #4
 800637a:	ea52 0301 	orrs.w	r3, r2, r1
 800637e:	f000 84b1 	beq.w	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	2a01      	cmp	r2, #1
 8006388:	f173 0304 	sbcs.w	r3, r3, #4
 800638c:	f080 86a0 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006394:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006398:	430b      	orrs	r3, r1
 800639a:	f000 85aa 	beq.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800639e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a2:	497e      	ldr	r1, [pc, #504]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80063a4:	428a      	cmp	r2, r1
 80063a6:	f173 0300 	sbcs.w	r3, r3, #0
 80063aa:	f080 8691 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80063b6:	430b      	orrs	r3, r1
 80063b8:	f000 8532 	beq.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80063bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c0:	4977      	ldr	r1, [pc, #476]	@ (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80063c2:	428a      	cmp	r2, r1
 80063c4:	f173 0300 	sbcs.w	r3, r3, #0
 80063c8:	f080 8682 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80063d4:	430b      	orrs	r3, r1
 80063d6:	f000 84bc 	beq.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80063da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063de:	4971      	ldr	r1, [pc, #452]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80063e0:	428a      	cmp	r2, r1
 80063e2:	f173 0300 	sbcs.w	r3, r3, #0
 80063e6:	f080 8673 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ee:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80063f2:	430b      	orrs	r3, r1
 80063f4:	f000 85f2 	beq.w	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80063f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fc:	496a      	ldr	r1, [pc, #424]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80063fe:	428a      	cmp	r2, r1
 8006400:	f173 0300 	sbcs.w	r3, r3, #0
 8006404:	f080 8664 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006410:	430b      	orrs	r3, r1
 8006412:	f000 81e5 	beq.w	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641a:	4964      	ldr	r1, [pc, #400]	@ (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800641c:	428a      	cmp	r2, r1
 800641e:	f173 0300 	sbcs.w	r3, r3, #0
 8006422:	f080 8655 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800642e:	430b      	orrs	r3, r1
 8006430:	f000 83cc 	beq.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006438:	495d      	ldr	r1, [pc, #372]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800643a:	428a      	cmp	r2, r1
 800643c:	f173 0300 	sbcs.w	r3, r3, #0
 8006440:	f080 8646 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006448:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800644c:	430b      	orrs	r3, r1
 800644e:	f000 8331 	beq.w	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	4957      	ldr	r1, [pc, #348]	@ (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006458:	428a      	cmp	r2, r1
 800645a:	f173 0300 	sbcs.w	r3, r3, #0
 800645e:	f080 8637 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006466:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800646a:	430b      	orrs	r3, r1
 800646c:	f000 82bb 	beq.w	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8006470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006474:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8006478:	f173 0300 	sbcs.w	r3, r3, #0
 800647c:	f080 8628 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006484:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006488:	430b      	orrs	r3, r1
 800648a:	f000 826d 	beq.w	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006492:	f244 0101 	movw	r1, #16385	@ 0x4001
 8006496:	428a      	cmp	r2, r1
 8006498:	f173 0300 	sbcs.w	r3, r3, #0
 800649c:	f080 8618 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80064a8:	430b      	orrs	r3, r1
 80064aa:	f000 821e 	beq.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80064ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80064b6:	428a      	cmp	r2, r1
 80064b8:	f173 0300 	sbcs.w	r3, r3, #0
 80064bc:	f080 8608 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80064c8:	430b      	orrs	r3, r1
 80064ca:	f000 8137 	beq.w	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80064ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80064d6:	428a      	cmp	r2, r1
 80064d8:	f173 0300 	sbcs.w	r3, r3, #0
 80064dc:	f080 85f8 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e4:	1f11      	subs	r1, r2, #4
 80064e6:	430b      	orrs	r3, r1
 80064e8:	f000 80d2 	beq.w	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80064ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f0:	2a05      	cmp	r2, #5
 80064f2:	f173 0300 	sbcs.w	r3, r3, #0
 80064f6:	f080 85eb 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fe:	1e51      	subs	r1, r2, #1
 8006500:	430b      	orrs	r3, r1
 8006502:	d006      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006508:	1e91      	subs	r1, r2, #2
 800650a:	430b      	orrs	r3, r1
 800650c:	d06c      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800650e:	f000 bddf 	b.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006512:	4b20      	ldr	r3, [pc, #128]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006524:	f7fe fd7a 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 8006528:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800652a:	f000 bdd4 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800652e:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653a:	d10a      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006542:	f107 030c 	add.w	r3, r7, #12
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fd24 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006550:	e048      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006560:	2b03      	cmp	r3, #3
 8006562:	d109      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006564:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	4a12      	ldr	r2, [pc, #72]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006576:	e035      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006578:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d11c      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	2b04      	cmp	r3, #4
 800658a:	d119      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800658c:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006590:	e028      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006592:	bf00      	nop
 8006594:	44020c00 	.word	0x44020c00
 8006598:	00f42400 	.word	0x00f42400
 800659c:	20000001 	.word	0x20000001
 80065a0:	10000001 	.word	0x10000001
 80065a4:	08000001 	.word	0x08000001
 80065a8:	04000001 	.word	0x04000001
 80065ac:	00200001 	.word	0x00200001
 80065b0:	00040001 	.word	0x00040001
 80065b4:	00020001 	.word	0x00020001
 80065b8:	03d09000 	.word	0x03d09000
 80065bc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80065c0:	4b9f      	ldr	r3, [pc, #636]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d106      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	2b05      	cmp	r3, #5
 80065d2:	d103      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80065d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065da:	e003      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065e0:	f000 bd79 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80065e4:	f000 bd77 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065e8:	4b95      	ldr	r3, [pc, #596]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065f2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fe fcf9 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 80065fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006600:	f000 bd69 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006604:	4b8e      	ldr	r3, [pc, #568]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800660c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006610:	d10a      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	2b08      	cmp	r3, #8
 8006616:	d107      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fcb9 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006626:	e031      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006628:	4b85      	ldr	r3, [pc, #532]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d10c      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	2b18      	cmp	r3, #24
 8006638:	d109      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800663a:	4b81      	ldr	r3, [pc, #516]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a7f      	ldr	r2, [pc, #508]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664c:	e01e      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800664e:	4b7c      	ldr	r3, [pc, #496]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2b20      	cmp	r3, #32
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8006662:	4b79      	ldr	r3, [pc, #484]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006666:	e011      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006668:	4b75      	ldr	r3, [pc, #468]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800666a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	2b28      	cmp	r3, #40	@ 0x28
 800667a:	d103      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800667c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006682:	e003      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006688:	f000 bd25 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800668c:	f000 bd23 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006690:	4b6b      	ldr	r3, [pc, #428]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006696:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800669a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7fe fca5 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 80066a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80066a8:	f000 bd15 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80066ac:	4b64      	ldr	r3, [pc, #400]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b8:	d10a      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80066ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066bc:	2b40      	cmp	r3, #64	@ 0x40
 80066be:	d107      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fc65 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ce:	e033      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80066d0:	4b5b      	ldr	r3, [pc, #364]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d10c      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	2bc0      	cmp	r3, #192	@ 0xc0
 80066e0:	d109      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066e2:	4b57      	ldr	r3, [pc, #348]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	08db      	lsrs	r3, r3, #3
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	4a55      	ldr	r2, [pc, #340]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80066ee:	fa22 f303 	lsr.w	r3, r2, r3
 80066f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f4:	e020      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80066f6:	4b52      	ldr	r3, [pc, #328]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800670c:	4b4e      	ldr	r3, [pc, #312]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006712:	4b4b      	ldr	r3, [pc, #300]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d107      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006726:	d103      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8006728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800672e:	e003      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006734:	f000 bccf 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006738:	f000 bccd 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800673c:	4b40      	ldr	r3, [pc, #256]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800673e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006742:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006746:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800674e:	f7fe fc7b 	bl	8005048 <HAL_RCC_GetPCLK3Freq>
 8006752:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006754:	f000 bcbf 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800675e:	d108      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fc15 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800676e:	f000 bcb2 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006772:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d10d      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006786:	4b2e      	ldr	r3, [pc, #184]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	08db      	lsrs	r3, r3, #3
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	4a2c      	ldr	r2, [pc, #176]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006798:	e020      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800679a:	4b29      	ldr	r3, [pc, #164]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a6:	d106      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067ae:	d102      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80067b6:	4b22      	ldr	r3, [pc, #136]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80067b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80067ca:	d103      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80067cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067d8:	f000 bc7d 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80067dc:	f000 bc7b 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80067e0:	4b17      	ldr	r3, [pc, #92]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80067e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80067f2:	f7fe fbe1 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 80067f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80067f8:	f000 bc6d 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d104      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe faad 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8006806:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8006808:	f000 bc65 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	2b02      	cmp	r3, #2
 8006810:	d108      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fbbc 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006820:	f000 bc59 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006830:	d10e      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	2b03      	cmp	r3, #3
 8006836:	d10b      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8006838:	4b04      	ldr	r3, [pc, #16]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800683c:	e02c      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800683e:	bf00      	nop
 8006840:	44020c00 	.word	0x44020c00
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
 800684c:	00f42400 	.word	0x00f42400
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006850:	4b95      	ldr	r3, [pc, #596]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d10c      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	2b04      	cmp	r3, #4
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006862:	4b91      	ldr	r3, [pc, #580]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	4a8f      	ldr	r2, [pc, #572]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006876:	4b8c      	ldr	r3, [pc, #560]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800687e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006882:	d105      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	2b05      	cmp	r3, #5
 8006888:	d102      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800688a:	4b89      	ldr	r3, [pc, #548]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800688e:	e003      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006894:	f000 bc1f 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006898:	f000 bc1d 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800689c:	4b82      	ldr	r3, [pc, #520]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800689e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80068a8:	4b7f      	ldr	r3, [pc, #508]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d106      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80068bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c2:	e011      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80068c4:	4b78      	ldr	r3, [pc, #480]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d2:	d106      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d103      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80068da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80068e6:	e3f6      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80068e8:	e3f5      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068ea:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d103      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fe fb78 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006900:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006902:	e3e8      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fb3f 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800691a:	e3dc      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800691c:	4b62      	ldr	r3, [pc, #392]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d10d      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692e:	d109      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006930:	4b5d      	ldr	r3, [pc, #372]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	4a5c      	ldr	r2, [pc, #368]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006942:	e010      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006944:	4b58      	ldr	r3, [pc, #352]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800694c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006950:	d106      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006958:	d102      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800695a:	4b55      	ldr	r3, [pc, #340]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	e002      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006964:	e3b7      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006966:	e3b6      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006968:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800696a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800696e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800697a:	f7fe fb39 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 800697e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006980:	e3a9      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8006982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006988:	d107      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698a:	f107 030c 	add.w	r3, r7, #12
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fb00 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006998:	e39d      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800699a:	4b43      	ldr	r3, [pc, #268]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d10d      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80069a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069ac:	d109      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069ae:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	4a3c      	ldr	r2, [pc, #240]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c0:	e010      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80069c2:	4b39      	ldr	r3, [pc, #228]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ce:	d106      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80069d6:	d102      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80069d8:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80069da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069dc:	e002      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069e2:	e378      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80069e4:	e377      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80069e6:	4b30      	ldr	r3, [pc, #192]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ec:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe fafa 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 80069fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069fe:	e36a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a06:	d107      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a08:	f107 030c 	add.w	r3, r7, #12
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff fac1 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a16:	e35e      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006a18:	4b23      	ldr	r3, [pc, #140]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d10d      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a2a:	d109      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a3e:	e34a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a44:	e347      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006a46:	4b18      	ldr	r3, [pc, #96]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a4c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a58:	f7fe faf6 	bl	8005048 <HAL_RCC_GetPCLK3Freq>
 8006a5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a5e:	e33a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a66:	d107      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a68:	f107 030c 	add.w	r3, r7, #12
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fa91 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a76:	e32e      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d10d      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a8c:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	4a05      	ldr	r2, [pc, #20]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a9e:	e31a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006aa4:	e317      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006aa6:	bf00      	nop
 8006aa8:	44020c00 	.word	0x44020c00
 8006aac:	03d09000 	.word	0x03d09000
 8006ab0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ab4:	4b9b      	ldr	r3, [pc, #620]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ab6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006aba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ac6:	d044      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ace:	d879      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad6:	d02d      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ade:	d871      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae6:	d017      	beq.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aee:	d869      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afc:	d004      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8006afe:	e061      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b00:	f7fe faa2 	bl	8005048 <HAL_RCC_GetPCLK3Freq>
 8006b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006b06:	e060      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fa41 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b16:	e058      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b18:	4b82      	ldr	r3, [pc, #520]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d103      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b2c:	e04d      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b32:	e04a      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b34:	4b7b      	ldr	r3, [pc, #492]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b42:	d103      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006b44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b4a:	e03e      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b50:	e03b      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b52:	4b74      	ldr	r3, [pc, #464]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b5e:	4b71      	ldr	r3, [pc, #452]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d10c      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b70:	4b6c      	ldr	r3, [pc, #432]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b82:	e01e      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b84:	4b67      	ldr	r3, [pc, #412]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b98:	d102      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b9a:	4b64      	ldr	r3, [pc, #400]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b9e:	e010      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ba0:	4b60      	ldr	r3, [pc, #384]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bac:	d106      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb4:	d102      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8006bc2:	e002      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bc8:	bf00      	nop
          }
        }
        break;
 8006bca:	e284      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bcc:	4b55      	ldr	r3, [pc, #340]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006bce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bd2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bde:	d044      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006be6:	d879      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bee:	d02d      	beq.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf6:	d871      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bfe:	d017      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c06:	d869      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8006c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c14:	d004      	beq.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006c16:	e061      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fe f9ea 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006c1e:	e060      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff f9b5 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c2e:	e058      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c30:	4b3c      	ldr	r3, [pc, #240]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d103      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c44:	e04d      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c4a:	e04a      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c4c:	4b35      	ldr	r3, [pc, #212]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c5a:	d103      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8006c5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c62:	e03e      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c68:	e03b      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c70:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c76:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d10c      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c88:	4b26      	ldr	r3, [pc, #152]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	4a25      	ldr	r2, [pc, #148]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9a:	e01e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c9c:	4b21      	ldr	r3, [pc, #132]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb0:	d102      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb6:	e010      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc4:	d106      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006cce:	4b18      	ldr	r3, [pc, #96]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd2:	e002      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006cd8:	e003      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ce0:	bf00      	nop
          }
        }
        break;
 8006ce2:	e1f8      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cfc:	d105      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006d08:	e1e5      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d10:	d110      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d12:	f107 0318 	add.w	r3, r7, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe ffd0 	bl	8005cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d20:	e1d9      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006d22:	bf00      	nop
 8006d24:	44020c00 	.word	0x44020c00
 8006d28:	03d09000 	.word	0x03d09000
 8006d2c:	003d0900 	.word	0x003d0900
 8006d30:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3a:	d107      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d3c:	f107 030c 	add.w	r3, r7, #12
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff f927 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d4a:	e1c4      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d50:	e1c1      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d52:	4b9d      	ldr	r3, [pc, #628]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d859      	bhi.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006d81 	.word	0x08006d81
 8006d70:	08006d91 	.word	0x08006d91
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da7 	.word	0x08006da7
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe ff99 	bl	8005cbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d8e:	e046      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff f8fd 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d9e:	e03e      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006da0:	4b8a      	ldr	r3, [pc, #552]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006da4:	e03b      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006da6:	4b88      	ldr	r3, [pc, #544]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006db0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006db2:	4b85      	ldr	r3, [pc, #532]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dc4:	4b80      	ldr	r3, [pc, #512]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a80      	ldr	r2, [pc, #512]	@ (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd6:	e01e      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de4:	d106      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d102      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006dee:	4b79      	ldr	r3, [pc, #484]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df2:	e010      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006df4:	4b74      	ldr	r3, [pc, #464]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e0a:	4b73      	ldr	r3, [pc, #460]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	e002      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006e14:	e003      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8006e16:	e002      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e1c:	bf00      	nop
          }
        }
        break;
 8006e1e:	e15a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e20:	4b69      	ldr	r3, [pc, #420]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d022      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d858      	bhi.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d019      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	2b18      	cmp	r3, #24
 8006e42:	d852      	bhi.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d008      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006e50:	e04b      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e52:	f107 0318 	add.w	r3, r7, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe ff30 	bl	8005cbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e60:	e046      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f894 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e70:	e03e      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e72:	4b56      	ldr	r3, [pc, #344]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e76:	e03b      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e78:	4b53      	ldr	r3, [pc, #332]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e7e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e84:	4b50      	ldr	r3, [pc, #320]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d10c      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e96:	4b4c      	ldr	r3, [pc, #304]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea8:	e01e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eaa:	4b47      	ldr	r3, [pc, #284]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb6:	d106      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ec0:	4b44      	ldr	r3, [pc, #272]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ec4:	e010      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ec6:	4b40      	ldr	r3, [pc, #256]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed2:	d106      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eda:	d102      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006edc:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006ee6:	e003      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006eee:	bf00      	nop
          }
        }
        break;
 8006ef0:	e0f1      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006ef2:	4b35      	ldr	r3, [pc, #212]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ef8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f04:	d023      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f0c:	d858      	bhi.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f12:	d019      	beq.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f18:	d852      	bhi.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	2b40      	cmp	r3, #64	@ 0x40
 8006f24:	d008      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006f26:	e04b      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f28:	f107 0318 	add.w	r3, r7, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fec5 	bl	8005cbc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f36:	e046      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f829 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f46:	e03e      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f48:	4b20      	ldr	r3, [pc, #128]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f4c:	e03b      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f6c:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	08db      	lsrs	r3, r3, #3
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f7e:	e01e      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f80:	4b11      	ldr	r3, [pc, #68]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f94:	d102      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f96:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f9a:	e010      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb0:	d102      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fb6:	e002      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006fbc:	e003      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006fc4:	bf00      	nop
          }
        }
        break;
 8006fc6:	e086      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006fc8:	44020c00 	.word	0x44020c00
 8006fcc:	00bb8000 	.word	0x00bb8000
 8006fd0:	03d09000 	.word	0x03d09000
 8006fd4:	003d0900 	.word	0x003d0900
 8006fd8:	00f42400 	.word	0x00f42400
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006fdc:	4b40      	ldr	r3, [pc, #256]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fe2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff4:	d105      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d102      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8006ffc:	4b39      	ldr	r3, [pc, #228]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007000:	e031      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007002:	4b37      	ldr	r3, [pc, #220]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700e:	d10a      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007012:	2b10      	cmp	r3, #16
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007016:	f107 0318 	add.w	r3, r7, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fe4e 	bl	8005cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007024:	e01f      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007026:	4b2e      	ldr	r3, [pc, #184]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d106      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	2b20      	cmp	r3, #32
 8007038:	d103      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007040:	e011      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007042:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800704c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007050:	d106      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	2b30      	cmp	r3, #48	@ 0x30
 8007056:	d103      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8007058:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800705e:	e002      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8007064:	e037      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007066:	e036      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007068:	4b1d      	ldr	r3, [pc, #116]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800706a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800706e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007072:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	2b10      	cmp	r3, #16
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800707a:	f107 0318 	add.w	r3, r7, #24
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fe1c 	bl	8005cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8007088:	e025      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800708a:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007096:	d10a      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	2b20      	cmp	r3, #32
 800709c:	d107      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709e:	f107 030c 	add.w	r3, r7, #12
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe ff76 	bl	8005f94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ac:	e00f      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80070ae:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ba:	d105      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	2b30      	cmp	r3, #48	@ 0x30
 80070c0:	d102      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80070c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070d4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3730      	adds	r7, #48	@ 0x30
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	44020c00 	.word	0x44020c00
 80070e4:	02dc6c00 	.word	0x02dc6c00

080070e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80070f0:	4b48      	ldr	r3, [pc, #288]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a47      	ldr	r2, [pc, #284]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80070f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070fc:	f7fa fea2 	bl	8001e44 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007102:	e008      	b.n	8007116 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007104:	f7fa fe9e 	bl	8001e44 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e07a      	b.n	800720c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007116:	4b3f      	ldr	r3, [pc, #252]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007122:	4b3c      	ldr	r3, [pc, #240]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6811      	ldr	r1, [r2, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6852      	ldr	r2, [r2, #4]
 8007136:	0212      	lsls	r2, r2, #8
 8007138:	430a      	orrs	r2, r1
 800713a:	4936      	ldr	r1, [pc, #216]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	3b01      	subs	r3, #1
 8007146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	025b      	lsls	r3, r3, #9
 8007152:	b29b      	uxth	r3, r3
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	3b01      	subs	r3, #1
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	3b01      	subs	r3, #1
 800716a:	061b      	lsls	r3, r3, #24
 800716c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007170:	4928      	ldr	r1, [pc, #160]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007172:	4313      	orrs	r3, r2
 8007174:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007176:	4b27      	ldr	r3, [pc, #156]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	f023 020c 	bic.w	r2, r3, #12
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	4924      	ldr	r1, [pc, #144]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007184:	4313      	orrs	r3, r2
 8007186:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007188:	4b22      	ldr	r3, [pc, #136]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	f023 0220 	bic.w	r2, r3, #32
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	491f      	ldr	r1, [pc, #124]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800719a:	4b1e      	ldr	r3, [pc, #120]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 800719c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	491c      	ldr	r1, [pc, #112]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80071a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a19      	ldr	r2, [pc, #100]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80071b4:	4b17      	ldr	r3, [pc, #92]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6a12      	ldr	r2, [r2, #32]
 80071c4:	00d2      	lsls	r2, r2, #3
 80071c6:	4913      	ldr	r1, [pc, #76]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80071cc:	4b11      	ldr	r3, [pc, #68]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	4a10      	ldr	r2, [pc, #64]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071d2:	f043 0310 	orr.w	r3, r3, #16
 80071d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80071d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071e4:	f7fa fe2e 	bl	8001e44 <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ea:	e008      	b.n	80071fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071ec:	f7fa fe2a 	bl	8001e44 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e006      	b.n	800720c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071fe:	4b05      	ldr	r3, [pc, #20]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800720a:	2300      	movs	r3, #0

}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	44020c00 	.word	0x44020c00

08007218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e042      	b.n	80072b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fa fbbb 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2224      	movs	r2, #36	@ 0x24
 8007246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9a6 	bl	80075b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f825 	bl	80072b8 <UART_SetConfig>
 800726e:	4603      	mov	r3, r0
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e01b      	b.n	80072b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa25 	bl	80076f8 <UART_CheckIdleState>
 80072ae:	4603      	mov	r3, r0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072bc:	b094      	sub	sp, #80	@ 0x50
 80072be:	af00      	add	r7, sp, #0
 80072c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	4313      	orrs	r3, r2
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	498a      	ldr	r1, [pc, #552]	@ (8007510 <UART_SetConfig+0x258>)
 80072e8:	4019      	ands	r1, r3
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007300:	68d9      	ldr	r1, [r3, #12]
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	ea40 0301 	orr.w	r3, r0, r1
 800730a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b7f      	ldr	r3, [pc, #508]	@ (8007514 <UART_SetConfig+0x25c>)
 8007318:	429a      	cmp	r2, r3
 800731a:	d004      	beq.n	8007326 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007322:	4313      	orrs	r3, r2
 8007324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007330:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800733a:	430b      	orrs	r3, r1
 800733c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	f023 000f 	bic.w	r0, r3, #15
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800734c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	ea40 0301 	orr.w	r3, r0, r1
 8007354:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b6f      	ldr	r3, [pc, #444]	@ (8007518 <UART_SetConfig+0x260>)
 800735c:	429a      	cmp	r2, r3
 800735e:	d102      	bne.n	8007366 <UART_SetConfig+0xae>
 8007360:	2301      	movs	r3, #1
 8007362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007364:	e01a      	b.n	800739c <UART_SetConfig+0xe4>
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b6c      	ldr	r3, [pc, #432]	@ (800751c <UART_SetConfig+0x264>)
 800736c:	429a      	cmp	r2, r3
 800736e:	d102      	bne.n	8007376 <UART_SetConfig+0xbe>
 8007370:	2302      	movs	r3, #2
 8007372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007374:	e012      	b.n	800739c <UART_SetConfig+0xe4>
 8007376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b69      	ldr	r3, [pc, #420]	@ (8007520 <UART_SetConfig+0x268>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d102      	bne.n	8007386 <UART_SetConfig+0xce>
 8007380:	2304      	movs	r3, #4
 8007382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007384:	e00a      	b.n	800739c <UART_SetConfig+0xe4>
 8007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b62      	ldr	r3, [pc, #392]	@ (8007514 <UART_SetConfig+0x25c>)
 800738c:	429a      	cmp	r2, r3
 800738e:	d103      	bne.n	8007398 <UART_SetConfig+0xe0>
 8007390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007396:	e001      	b.n	800739c <UART_SetConfig+0xe4>
 8007398:	2300      	movs	r3, #0
 800739a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007514 <UART_SetConfig+0x25c>)
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d171      	bne.n	800748a <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073a8:	2200      	movs	r2, #0
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80073b2:	f7fe ff5b 	bl	800626c <HAL_RCCEx_GetPeriphCLKFreq>
 80073b6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80073b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80e2 	beq.w	8007584 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c4:	4a57      	ldr	r2, [pc, #348]	@ (8007524 <UART_SetConfig+0x26c>)
 80073c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	4413      	add	r3, r2
 80073de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d305      	bcc.n	80073f0 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d903      	bls.n	80073f8 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073f6:	e0c5      	b.n	8007584 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fa:	2200      	movs	r2, #0
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	61fa      	str	r2, [r7, #28]
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	4a47      	ldr	r2, [pc, #284]	@ (8007524 <UART_SetConfig+0x26c>)
 8007406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800740a:	b29b      	uxth	r3, r3
 800740c:	2200      	movs	r2, #0
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	617a      	str	r2, [r7, #20]
 8007412:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007416:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800741a:	f7f9 fafb 	bl	8000a14 <__aeabi_uldivmod>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4610      	mov	r0, r2
 8007424:	4619      	mov	r1, r3
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	020b      	lsls	r3, r1, #8
 8007430:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007434:	0202      	lsls	r2, r0, #8
 8007436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007438:	6849      	ldr	r1, [r1, #4]
 800743a:	0849      	lsrs	r1, r1, #1
 800743c:	2000      	movs	r0, #0
 800743e:	460c      	mov	r4, r1
 8007440:	4605      	mov	r5, r0
 8007442:	eb12 0804 	adds.w	r8, r2, r4
 8007446:	eb43 0905 	adc.w	r9, r3, r5
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	60bb      	str	r3, [r7, #8]
 8007452:	60fa      	str	r2, [r7, #12]
 8007454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007458:	4640      	mov	r0, r8
 800745a:	4649      	mov	r1, r9
 800745c:	f7f9 fada 	bl	8000a14 <__aeabi_uldivmod>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4613      	mov	r3, r2
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800746e:	d308      	bcc.n	8007482 <UART_SetConfig+0x1ca>
 8007470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007476:	d204      	bcs.n	8007482 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	e080      	b.n	8007584 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007488:	e07c      	b.n	8007584 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007492:	d149      	bne.n	8007528 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007496:	2200      	movs	r2, #0
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a0:	f7fe fee4 	bl	800626c <HAL_RCCEx_GetPeriphCLKFreq>
 80074a4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d06b      	beq.n	8007584 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007524 <UART_SetConfig+0x26c>)
 80074b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80074be:	005a      	lsls	r2, r3, #1
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	441a      	add	r2, r3
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d916      	bls.n	8007506 <UART_SetConfig+0x24e>
 80074d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074de:	d212      	bcs.n	8007506 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f023 030f 	bic.w	r3, r3, #15
 80074e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80074f8:	4313      	orrs	r3, r2
 80074fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007502:	60da      	str	r2, [r3, #12]
 8007504:	e03e      	b.n	8007584 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800750c:	e03a      	b.n	8007584 <UART_SetConfig+0x2cc>
 800750e:	bf00      	nop
 8007510:	cfff69f3 	.word	0xcfff69f3
 8007514:	44002400 	.word	0x44002400
 8007518:	40013800 	.word	0x40013800
 800751c:	40004400 	.word	0x40004400
 8007520:	40004800 	.word	0x40004800
 8007524:	08007dc4 	.word	0x08007dc4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800752a:	2200      	movs	r2, #0
 800752c:	469a      	mov	sl, r3
 800752e:	4693      	mov	fp, r2
 8007530:	4650      	mov	r0, sl
 8007532:	4659      	mov	r1, fp
 8007534:	f7fe fe9a 	bl	800626c <HAL_RCCEx_GetPeriphCLKFreq>
 8007538:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800753a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d021      	beq.n	8007584 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	4a1a      	ldr	r2, [pc, #104]	@ (80075b0 <UART_SetConfig+0x2f8>)
 8007546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800754a:	461a      	mov	r2, r3
 800754c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	441a      	add	r2, r3
 800755a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d909      	bls.n	800757e <UART_SetConfig+0x2c6>
 800756a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007570:	d205      	bcs.n	800757e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007574:	b29a      	uxth	r2, r3
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60da      	str	r2, [r3, #12]
 800757c:	e002      	b.n	8007584 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	2201      	movs	r2, #1
 8007588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	2201      	movs	r2, #1
 8007590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	2200      	movs	r2, #0
 8007598:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759c:	2200      	movs	r2, #0
 800759e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3750      	adds	r7, #80	@ 0x50
 80075a8:	46bd      	mov	sp, r7
 80075aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ae:	bf00      	nop
 80075b0:	08007dc4 	.word	0x08007dc4

080075b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01a      	beq.n	80076ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b2:	d10a      	bne.n	80076ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	605a      	str	r2, [r3, #4]
  }
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b098      	sub	sp, #96	@ 0x60
 80076fc:	af02      	add	r7, sp, #8
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007708:	f7fa fb9c 	bl	8001e44 <HAL_GetTick>
 800770c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b08      	cmp	r3, #8
 800771a:	d12f      	bne.n	800777c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800771c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007724:	2200      	movs	r2, #0
 8007726:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f88e 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d022      	beq.n	800777c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800774a:	653b      	str	r3, [r7, #80]	@ 0x50
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007754:	647b      	str	r3, [r7, #68]	@ 0x44
 8007756:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800775a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e6      	bne.n	8007736 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e063      	b.n	8007844 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b04      	cmp	r3, #4
 8007788:	d149      	bne.n	800781e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800778a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007792:	2200      	movs	r2, #0
 8007794:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f857 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d03c      	beq.n	800781e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	623b      	str	r3, [r7, #32]
   return(result);
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80077c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077f6:	61fa      	str	r2, [r7, #28]
 80077f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	69b9      	ldr	r1, [r7, #24]
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	617b      	str	r3, [r7, #20]
   return(result);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e5      	bne.n	80077d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e012      	b.n	8007844 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3758      	adds	r7, #88	@ 0x58
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785c:	e04f      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d04b      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007866:	f7fa faed 	bl	8001e44 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	429a      	cmp	r2, r3
 8007874:	d302      	bcc.n	800787c <UART_WaitOnFlagUntilTimeout+0x30>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e04e      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d037      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b80      	cmp	r3, #128	@ 0x80
 8007892:	d034      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b40      	cmp	r3, #64	@ 0x40
 8007898:	d031      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d110      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2208      	movs	r2, #8
 80078ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f838 	bl	8007926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2208      	movs	r2, #8
 80078ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e029      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d8:	d111      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f81e 	bl	8007926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e00f      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d0a0      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007926:	b480      	push	{r7}
 8007928:	b095      	sub	sp, #84	@ 0x54
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794c:	643b      	str	r3, [r7, #64]	@ 0x40
 800794e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e6      	bne.n	800792e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3308      	adds	r3, #8
 8007982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007984:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007986:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800798a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e3      	bne.n	8007960 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d118      	bne.n	80079d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f023 0310 	bic.w	r3, r3, #16
 80079b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	6979      	ldr	r1, [r7, #20]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	613b      	str	r3, [r7, #16]
   return(result);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e6      	bne.n	80079a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079e6:	bf00      	nop
 80079e8:	3754      	adds	r7, #84	@ 0x54
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e027      	b.n	8007a58 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2224      	movs	r2, #36	@ 0x24
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e02d      	b.n	8007ad8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2224      	movs	r2, #36	@ 0x24
 8007a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0201 	bic.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f84f 	bl	8007b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e02d      	b.n	8007b54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2224      	movs	r2, #36	@ 0x24
 8007b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0201 	bic.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f811 	bl	8007b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d108      	bne.n	8007b7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b7c:	e031      	b.n	8007be2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b7e:	2308      	movs	r3, #8
 8007b80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b82:	2308      	movs	r3, #8
 8007b84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	0e5b      	lsrs	r3, r3, #25
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	0f5b      	lsrs	r3, r3, #29
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	7b3a      	ldrb	r2, [r7, #12]
 8007baa:	4911      	ldr	r1, [pc, #68]	@ (8007bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8007bac:	5c8a      	ldrb	r2, [r1, r2]
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bb2:	7b3a      	ldrb	r2, [r7, #12]
 8007bb4:	490f      	ldr	r1, [pc, #60]	@ (8007bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8007bb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	7b7a      	ldrb	r2, [r7, #13]
 8007bc8:	4909      	ldr	r1, [pc, #36]	@ (8007bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8007bca:	5c8a      	ldrb	r2, [r1, r2]
 8007bcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bd0:	7b7a      	ldrb	r2, [r7, #13]
 8007bd2:	4908      	ldr	r1, [pc, #32]	@ (8007bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8007bd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	08007ddc 	.word	0x08007ddc
 8007bf4:	08007de4 	.word	0x08007de4

08007bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007c26:	b084      	sub	sp, #16
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	f107 001c 	add.w	r0, r7, #28
 8007c34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e008      	b.n	8007c54 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff ffd8 	bl	8007bf8 <USB_CoreReset>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c5e:	b004      	add	sp, #16
 8007c60:	4770      	bx	lr

08007c62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c6a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007c6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	43db      	mvns	r3, r3
 8007c78:	401a      	ands	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8007caa:	e00b      	b.n	8007cc4 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8007cbe:	e001      	b.n	8007cc4 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e000      	b.n	8007cc6 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	f107 001c 	add.w	r0, r7, #28
 8007ce0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cee:	f023 0201 	bic.w	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ffc7 	bl	8007c8c <USB_SetCurrentMode>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d14:	b004      	add	sp, #16
 8007d16:	4770      	bx	lr

08007d18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d24:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <memset>:
 8007d3a:	4402      	add	r2, r0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d100      	bne.n	8007d44 <memset+0xa>
 8007d42:	4770      	bx	lr
 8007d44:	f803 1b01 	strb.w	r1, [r3], #1
 8007d48:	e7f9      	b.n	8007d3e <memset+0x4>
	...

08007d4c <__libc_init_array>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d84 <__libc_init_array+0x38>)
 8007d50:	2600      	movs	r6, #0
 8007d52:	4c0d      	ldr	r4, [pc, #52]	@ (8007d88 <__libc_init_array+0x3c>)
 8007d54:	1b64      	subs	r4, r4, r5
 8007d56:	10a4      	asrs	r4, r4, #2
 8007d58:	42a6      	cmp	r6, r4
 8007d5a:	d109      	bne.n	8007d70 <__libc_init_array+0x24>
 8007d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d8c <__libc_init_array+0x40>)
 8007d5e:	2600      	movs	r6, #0
 8007d60:	4c0b      	ldr	r4, [pc, #44]	@ (8007d90 <__libc_init_array+0x44>)
 8007d62:	f000 f817 	bl	8007d94 <_init>
 8007d66:	1b64      	subs	r4, r4, r5
 8007d68:	10a4      	asrs	r4, r4, #2
 8007d6a:	42a6      	cmp	r6, r4
 8007d6c:	d105      	bne.n	8007d7a <__libc_init_array+0x2e>
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d74:	3601      	adds	r6, #1
 8007d76:	4798      	blx	r3
 8007d78:	e7ee      	b.n	8007d58 <__libc_init_array+0xc>
 8007d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7e:	3601      	adds	r6, #1
 8007d80:	4798      	blx	r3
 8007d82:	e7f2      	b.n	8007d6a <__libc_init_array+0x1e>
 8007d84:	08007df4 	.word	0x08007df4
 8007d88:	08007df4 	.word	0x08007df4
 8007d8c:	08007df4 	.word	0x08007df4
 8007d90:	08007df8 	.word	0x08007df8

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
