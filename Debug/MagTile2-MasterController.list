
MagTile2-MasterController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a8  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008640  08008640  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008640  08008640  00009640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008648  08008648  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008648  08008648  00009648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800864c  0800864c  0000964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008650  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000000c  0800865c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800865c  0000a530  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002164c  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003745  00000000  00000000  0002b68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  0002edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001625  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248ed  00000000  00000000  00032065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d49  00000000  00000000  00056952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb32a  00000000  00000000  0007869b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001639c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e9c  00000000  00000000  00163a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0016b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	080085e8 	.word	0x080085e8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	080085e8 	.word	0x080085e8

08000298 <__aeabi_dmul>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800029e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002a6:	bf1d      	ittte	ne
 80002a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002ac:	ea94 0f0c 	teqne	r4, ip
 80002b0:	ea95 0f0c 	teqne	r5, ip
 80002b4:	f000 f8de 	bleq	8000474 <__aeabi_dmul+0x1dc>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea81 0603 	eor.w	r6, r1, r3
 80002be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002ca:	bf18      	it	ne
 80002cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d8:	d038      	beq.n	800034c <__aeabi_dmul+0xb4>
 80002da:	fba0 ce02 	umull	ip, lr, r0, r2
 80002de:	f04f 0500 	mov.w	r5, #0
 80002e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ee:	f04f 0600 	mov.w	r6, #0
 80002f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002f6:	f09c 0f00 	teq	ip, #0
 80002fa:	bf18      	it	ne
 80002fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000300:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000304:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000308:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800030c:	d204      	bcs.n	8000318 <__aeabi_dmul+0x80>
 800030e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000312:	416d      	adcs	r5, r5
 8000314:	eb46 0606 	adc.w	r6, r6, r6
 8000318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800031c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000324:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000328:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800032c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000330:	bf88      	it	hi
 8000332:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000336:	d81e      	bhi.n	8000376 <__aeabi_dmul+0xde>
 8000338:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000350:	ea46 0101 	orr.w	r1, r6, r1
 8000354:	ea40 0002 	orr.w	r0, r0, r2
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000360:	bfc2      	ittt	gt
 8000362:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800036a:	bd70      	popgt	{r4, r5, r6, pc}
 800036c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000370:	f04f 0e00 	mov.w	lr, #0
 8000374:	3c01      	subs	r4, #1
 8000376:	f300 80ab 	bgt.w	80004d0 <__aeabi_dmul+0x238>
 800037a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800037e:	bfde      	ittt	le
 8000380:	2000      	movle	r0, #0
 8000382:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd70      	pople	{r4, r5, r6, pc}
 8000388:	f1c4 0400 	rsb	r4, r4, #0
 800038c:	3c20      	subs	r4, #32
 800038e:	da35      	bge.n	80003fc <__aeabi_dmul+0x164>
 8000390:	340c      	adds	r4, #12
 8000392:	dc1b      	bgt.n	80003cc <__aeabi_dmul+0x134>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0520 	rsb	r5, r4, #32
 800039c:	fa00 f305 	lsl.w	r3, r0, r5
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea40 0002 	orr.w	r0, r0, r2
 80003ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b8:	fa21 f604 	lsr.w	r6, r1, r4
 80003bc:	eb42 0106 	adc.w	r1, r2, r6
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f1c4 040c 	rsb	r4, r4, #12
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f304 	lsl.w	r3, r0, r4
 80003d8:	fa20 f005 	lsr.w	r0, r0, r5
 80003dc:	fa01 f204 	lsl.w	r2, r1, r4
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f1c4 0520 	rsb	r5, r4, #32
 8000400:	fa00 f205 	lsl.w	r2, r0, r5
 8000404:	ea4e 0e02 	orr.w	lr, lr, r2
 8000408:	fa20 f304 	lsr.w	r3, r0, r4
 800040c:	fa01 f205 	lsl.w	r2, r1, r5
 8000410:	ea43 0302 	orr.w	r3, r3, r2
 8000414:	fa21 f004 	lsr.w	r0, r1, r4
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800041c:	fa21 f204 	lsr.w	r2, r1, r4
 8000420:	ea20 0002 	bic.w	r0, r0, r2
 8000424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f094 0f00 	teq	r4, #0
 8000438:	d10f      	bne.n	800045a <__aeabi_dmul+0x1c2>
 800043a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800043e:	0040      	lsls	r0, r0, #1
 8000440:	eb41 0101 	adc.w	r1, r1, r1
 8000444:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000448:	bf08      	it	eq
 800044a:	3c01      	subeq	r4, #1
 800044c:	d0f7      	beq.n	800043e <__aeabi_dmul+0x1a6>
 800044e:	ea41 0106 	orr.w	r1, r1, r6
 8000452:	f095 0f00 	teq	r5, #0
 8000456:	bf18      	it	ne
 8000458:	4770      	bxne	lr
 800045a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	eb43 0303 	adc.w	r3, r3, r3
 8000464:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000468:	bf08      	it	eq
 800046a:	3d01      	subeq	r5, #1
 800046c:	d0f7      	beq.n	800045e <__aeabi_dmul+0x1c6>
 800046e:	ea43 0306 	orr.w	r3, r3, r6
 8000472:	4770      	bx	lr
 8000474:	ea94 0f0c 	teq	r4, ip
 8000478:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800047c:	bf18      	it	ne
 800047e:	ea95 0f0c 	teqne	r5, ip
 8000482:	d00c      	beq.n	800049e <__aeabi_dmul+0x206>
 8000484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000488:	bf18      	it	ne
 800048a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048e:	d1d1      	bne.n	8000434 <__aeabi_dmul+0x19c>
 8000490:	ea81 0103 	eor.w	r1, r1, r3
 8000494:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd70      	pop	{r4, r5, r6, pc}
 800049e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a2:	bf06      	itte	eq
 80004a4:	4610      	moveq	r0, r2
 80004a6:	4619      	moveq	r1, r3
 80004a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004ac:	d019      	beq.n	80004e2 <__aeabi_dmul+0x24a>
 80004ae:	ea94 0f0c 	teq	r4, ip
 80004b2:	d102      	bne.n	80004ba <__aeabi_dmul+0x222>
 80004b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b8:	d113      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004ba:	ea95 0f0c 	teq	r5, ip
 80004be:	d105      	bne.n	80004cc <__aeabi_dmul+0x234>
 80004c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004c4:	bf1c      	itt	ne
 80004c6:	4610      	movne	r0, r2
 80004c8:	4619      	movne	r1, r3
 80004ca:	d10a      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004cc:	ea81 0103 	eor.w	r1, r1, r3
 80004d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004ea:	bd70      	pop	{r4, r5, r6, pc}

080004ec <__aeabi_drsub>:
 80004ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e002      	b.n	80004f8 <__adddf3>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dsub>:
 80004f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f8 <__adddf3>:
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000502:	ea94 0f05 	teq	r4, r5
 8000506:	bf08      	it	eq
 8000508:	ea90 0f02 	teqeq	r0, r2
 800050c:	bf1f      	itttt	ne
 800050e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000512:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000516:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800051a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051e:	f000 80e2 	beq.w	80006e6 <__adddf3+0x1ee>
 8000522:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000526:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800052a:	bfb8      	it	lt
 800052c:	426d      	neglt	r5, r5
 800052e:	dd0c      	ble.n	800054a <__adddf3+0x52>
 8000530:	442c      	add	r4, r5
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	ea82 0000 	eor.w	r0, r2, r0
 800053e:	ea83 0101 	eor.w	r1, r3, r1
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	2d36      	cmp	r5, #54	@ 0x36
 800054c:	bf88      	it	hi
 800054e:	bd30      	pophi	{r4, r5, pc}
 8000550:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000554:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000558:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800055c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000560:	d002      	beq.n	8000568 <__adddf3+0x70>
 8000562:	4240      	negs	r0, r0
 8000564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000568:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800056c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000570:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x84>
 8000576:	4252      	negs	r2, r2
 8000578:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800057c:	ea94 0f05 	teq	r4, r5
 8000580:	f000 80a7 	beq.w	80006d2 <__adddf3+0x1da>
 8000584:	f1a4 0401 	sub.w	r4, r4, #1
 8000588:	f1d5 0e20 	rsbs	lr, r5, #32
 800058c:	db0d      	blt.n	80005aa <__adddf3+0xb2>
 800058e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000592:	fa22 f205 	lsr.w	r2, r2, r5
 8000596:	1880      	adds	r0, r0, r2
 8000598:	f141 0100 	adc.w	r1, r1, #0
 800059c:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a0:	1880      	adds	r0, r0, r2
 80005a2:	fa43 f305 	asr.w	r3, r3, r5
 80005a6:	4159      	adcs	r1, r3
 80005a8:	e00e      	b.n	80005c8 <__adddf3+0xd0>
 80005aa:	f1a5 0520 	sub.w	r5, r5, #32
 80005ae:	f10e 0e20 	add.w	lr, lr, #32
 80005b2:	2a01      	cmp	r2, #1
 80005b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b8:	bf28      	it	cs
 80005ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	18c0      	adds	r0, r0, r3
 80005c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	d507      	bpl.n	80005de <__adddf3+0xe6>
 80005ce:	f04f 0e00 	mov.w	lr, #0
 80005d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005da:	eb6e 0101 	sbc.w	r1, lr, r1
 80005de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005e2:	d31b      	bcc.n	800061c <__adddf3+0x124>
 80005e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e8:	d30c      	bcc.n	8000604 <__adddf3+0x10c>
 80005ea:	0849      	lsrs	r1, r1, #1
 80005ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f4:	f104 0401 	add.w	r4, r4, #1
 80005f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000600:	f080 809a 	bcs.w	8000738 <__adddf3+0x240>
 8000604:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	ea41 0105 	orr.w	r1, r1, r5
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000620:	4140      	adcs	r0, r0
 8000622:	eb41 0101 	adc.w	r1, r1, r1
 8000626:	3c01      	subs	r4, #1
 8000628:	bf28      	it	cs
 800062a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800062e:	d2e9      	bcs.n	8000604 <__adddf3+0x10c>
 8000630:	f091 0f00 	teq	r1, #0
 8000634:	bf04      	itt	eq
 8000636:	4601      	moveq	r1, r0
 8000638:	2000      	moveq	r0, #0
 800063a:	fab1 f381 	clz	r3, r1
 800063e:	bf08      	it	eq
 8000640:	3320      	addeq	r3, #32
 8000642:	f1a3 030b 	sub.w	r3, r3, #11
 8000646:	f1b3 0220 	subs.w	r2, r3, #32
 800064a:	da0c      	bge.n	8000666 <__adddf3+0x16e>
 800064c:	320c      	adds	r2, #12
 800064e:	dd08      	ble.n	8000662 <__adddf3+0x16a>
 8000650:	f102 0c14 	add.w	ip, r2, #20
 8000654:	f1c2 020c 	rsb	r2, r2, #12
 8000658:	fa01 f00c 	lsl.w	r0, r1, ip
 800065c:	fa21 f102 	lsr.w	r1, r1, r2
 8000660:	e00c      	b.n	800067c <__adddf3+0x184>
 8000662:	f102 0214 	add.w	r2, r2, #20
 8000666:	bfd8      	it	le
 8000668:	f1c2 0c20 	rsble	ip, r2, #32
 800066c:	fa01 f102 	lsl.w	r1, r1, r2
 8000670:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000674:	bfdc      	itt	le
 8000676:	ea41 010c 	orrle.w	r1, r1, ip
 800067a:	4090      	lslle	r0, r2
 800067c:	1ae4      	subs	r4, r4, r3
 800067e:	bfa2      	ittt	ge
 8000680:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000684:	4329      	orrge	r1, r5
 8000686:	bd30      	popge	{r4, r5, pc}
 8000688:	ea6f 0404 	mvn.w	r4, r4
 800068c:	3c1f      	subs	r4, #31
 800068e:	da1c      	bge.n	80006ca <__adddf3+0x1d2>
 8000690:	340c      	adds	r4, #12
 8000692:	dc0e      	bgt.n	80006b2 <__adddf3+0x1ba>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0220 	rsb	r2, r4, #32
 800069c:	fa20 f004 	lsr.w	r0, r0, r4
 80006a0:	fa01 f302 	lsl.w	r3, r1, r2
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	fa21 f304 	lsr.w	r3, r1, r4
 80006ac:	ea45 0103 	orr.w	r1, r5, r3
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f1c4 040c 	rsb	r4, r4, #12
 80006b6:	f1c4 0220 	rsb	r2, r4, #32
 80006ba:	fa20 f002 	lsr.w	r0, r0, r2
 80006be:	fa01 f304 	lsl.w	r3, r1, r4
 80006c2:	ea40 0003 	orr.w	r0, r0, r3
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	fa21 f004 	lsr.w	r0, r1, r4
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f094 0f00 	teq	r4, #0
 80006d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006da:	bf06      	itte	eq
 80006dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e0:	3401      	addeq	r4, #1
 80006e2:	3d01      	subne	r5, #1
 80006e4:	e74e      	b.n	8000584 <__adddf3+0x8c>
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf18      	it	ne
 80006ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f0:	d029      	beq.n	8000746 <__adddf3+0x24e>
 80006f2:	ea94 0f05 	teq	r4, r5
 80006f6:	bf08      	it	eq
 80006f8:	ea90 0f02 	teqeq	r0, r2
 80006fc:	d005      	beq.n	800070a <__adddf3+0x212>
 80006fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000702:	bf04      	itt	eq
 8000704:	4619      	moveq	r1, r3
 8000706:	4610      	moveq	r0, r2
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea91 0f03 	teq	r1, r3
 800070e:	bf1e      	ittt	ne
 8000710:	2100      	movne	r1, #0
 8000712:	2000      	movne	r0, #0
 8000714:	bd30      	popne	{r4, r5, pc}
 8000716:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800071a:	d105      	bne.n	8000728 <__adddf3+0x230>
 800071c:	0040      	lsls	r0, r0, #1
 800071e:	4149      	adcs	r1, r1
 8000720:	bf28      	it	cs
 8000722:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd30      	pop	{r4, r5, pc}
 8000728:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800072c:	bf3c      	itt	cc
 800072e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000732:	bd30      	popcc	{r4, r5, pc}
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000738:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074a:	bf1a      	itte	ne
 800074c:	4619      	movne	r1, r3
 800074e:	4610      	movne	r0, r2
 8000750:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000754:	bf1c      	itt	ne
 8000756:	460b      	movne	r3, r1
 8000758:	4602      	movne	r2, r0
 800075a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075e:	bf06      	itte	eq
 8000760:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000764:	ea91 0f03 	teqeq	r1, r3
 8000768:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	bf00      	nop

08000770 <__aeabi_ui2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000784:	f04f 0500 	mov.w	r5, #0
 8000788:	f04f 0100 	mov.w	r1, #0
 800078c:	e750      	b.n	8000630 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_i2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a8:	bf48      	it	mi
 80007aa:	4240      	negmi	r0, r0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	e73e      	b.n	8000630 <__adddf3+0x138>
 80007b2:	bf00      	nop

080007b4 <__aeabi_f2d>:
 80007b4:	0042      	lsls	r2, r0, #1
 80007b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007c2:	bf1f      	itttt	ne
 80007c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d0:	4770      	bxne	lr
 80007d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007d6:	bf08      	it	eq
 80007d8:	4770      	bxeq	lr
 80007da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007de:	bf04      	itt	eq
 80007e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007e4:	4770      	bxeq	lr
 80007e6:	b530      	push	{r4, r5, lr}
 80007e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	e71c      	b.n	8000630 <__adddf3+0x138>
 80007f6:	bf00      	nop

080007f8 <__aeabi_ul2d>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	f04f 0500 	mov.w	r5, #0
 8000806:	e00a      	b.n	800081e <__aeabi_l2d+0x16>

08000808 <__aeabi_l2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000816:	d502      	bpl.n	800081e <__aeabi_l2d+0x16>
 8000818:	4240      	negs	r0, r0
 800081a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000822:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800082a:	f43f aed8 	beq.w	80005de <__adddf3+0xe6>
 800082e:	f04f 0203 	mov.w	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	fa00 fc03 	lsl.w	ip, r0, r3
 800084e:	fa20 f002 	lsr.w	r0, r0, r2
 8000852:	fa01 fe03 	lsl.w	lr, r1, r3
 8000856:	ea40 000e 	orr.w	r0, r0, lr
 800085a:	fa21 f102 	lsr.w	r1, r1, r2
 800085e:	4414      	add	r4, r2
 8000860:	e6bd      	b.n	80005de <__adddf3+0xe6>
 8000862:	bf00      	nop

08000864 <__aeabi_d2f>:
 8000864:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000868:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800086c:	bf24      	itt	cs
 800086e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000872:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000876:	d90d      	bls.n	8000894 <__aeabi_d2f+0x30>
 8000878:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800087c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000880:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000884:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000888:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800088c:	bf08      	it	eq
 800088e:	f020 0001 	biceq.w	r0, r0, #1
 8000892:	4770      	bx	lr
 8000894:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000898:	d121      	bne.n	80008de <__aeabi_d2f+0x7a>
 800089a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800089e:	bfbc      	itt	lt
 80008a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008a4:	4770      	bxlt	lr
 80008a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ae:	f1c2 0218 	rsb	r2, r2, #24
 80008b2:	f1c2 0c20 	rsb	ip, r2, #32
 80008b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ba:	fa20 f002 	lsr.w	r0, r0, r2
 80008be:	bf18      	it	ne
 80008c0:	f040 0001 	orrne.w	r0, r0, #1
 80008c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d0:	ea40 000c 	orr.w	r0, r0, ip
 80008d4:	fa23 f302 	lsr.w	r3, r3, r2
 80008d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008dc:	e7cc      	b.n	8000878 <__aeabi_d2f+0x14>
 80008de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008e2:	d107      	bne.n	80008f4 <__aeabi_d2f+0x90>
 80008e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e8:	bf1e      	ittt	ne
 80008ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008f2:	4770      	bxne	lr
 80008f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_uldivmod>:
 8000904:	b953      	cbnz	r3, 800091c <__aeabi_uldivmod+0x18>
 8000906:	b94a      	cbnz	r2, 800091c <__aeabi_uldivmod+0x18>
 8000908:	2900      	cmp	r1, #0
 800090a:	bf08      	it	eq
 800090c:	2800      	cmpeq	r0, #0
 800090e:	bf1c      	itt	ne
 8000910:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000914:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000918:	f000 b97e 	b.w	8000c18 <__aeabi_idiv0>
 800091c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000920:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000924:	f000 f806 	bl	8000934 <__udivmoddi4>
 8000928:	f8dd e004 	ldr.w	lr, [sp, #4]
 800092c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000930:	b004      	add	sp, #16
 8000932:	4770      	bx	lr

08000934 <__udivmoddi4>:
 8000934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000938:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800093a:	460c      	mov	r4, r1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d14d      	bne.n	80009dc <__udivmoddi4+0xa8>
 8000940:	428a      	cmp	r2, r1
 8000942:	460f      	mov	r7, r1
 8000944:	4684      	mov	ip, r0
 8000946:	4696      	mov	lr, r2
 8000948:	fab2 f382 	clz	r3, r2
 800094c:	d960      	bls.n	8000a10 <__udivmoddi4+0xdc>
 800094e:	b14b      	cbz	r3, 8000964 <__udivmoddi4+0x30>
 8000950:	fa02 fe03 	lsl.w	lr, r2, r3
 8000954:	f1c3 0220 	rsb	r2, r3, #32
 8000958:	409f      	lsls	r7, r3
 800095a:	fa00 fc03 	lsl.w	ip, r0, r3
 800095e:	fa20 f202 	lsr.w	r2, r0, r2
 8000962:	4317      	orrs	r7, r2
 8000964:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000968:	fa1f f48e 	uxth.w	r4, lr
 800096c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000970:	fbb7 f1f6 	udiv	r1, r7, r6
 8000974:	fb06 7711 	mls	r7, r6, r1, r7
 8000978:	fb01 f004 	mul.w	r0, r1, r4
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	4290      	cmp	r0, r2
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x62>
 8000984:	eb1e 0202 	adds.w	r2, lr, r2
 8000988:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 800098c:	d202      	bcs.n	8000994 <__udivmoddi4+0x60>
 800098e:	4290      	cmp	r0, r2
 8000990:	f200 812d 	bhi.w	8000bee <__udivmoddi4+0x2ba>
 8000994:	4639      	mov	r1, r7
 8000996:	1a12      	subs	r2, r2, r0
 8000998:	fa1f fc8c 	uxth.w	ip, ip
 800099c:	fbb2 f0f6 	udiv	r0, r2, r6
 80009a0:	fb06 2210 	mls	r2, r6, r0, r2
 80009a4:	fb00 f404 	mul.w	r4, r0, r4
 80009a8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80009ac:	4564      	cmp	r4, ip
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x8e>
 80009b0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80009b4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x8c>
 80009ba:	4564      	cmp	r4, ip
 80009bc:	f200 811a 	bhi.w	8000bf4 <__udivmoddi4+0x2c0>
 80009c0:	4610      	mov	r0, r2
 80009c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009c6:	ebac 0c04 	sub.w	ip, ip, r4
 80009ca:	2100      	movs	r1, #0
 80009cc:	b125      	cbz	r5, 80009d8 <__udivmoddi4+0xa4>
 80009ce:	fa2c f303 	lsr.w	r3, ip, r3
 80009d2:	2200      	movs	r2, #0
 80009d4:	e9c5 3200 	strd	r3, r2, [r5]
 80009d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009dc:	428b      	cmp	r3, r1
 80009de:	d905      	bls.n	80009ec <__udivmoddi4+0xb8>
 80009e0:	b10d      	cbz	r5, 80009e6 <__udivmoddi4+0xb2>
 80009e2:	e9c5 0100 	strd	r0, r1, [r5]
 80009e6:	2100      	movs	r1, #0
 80009e8:	4608      	mov	r0, r1
 80009ea:	e7f5      	b.n	80009d8 <__udivmoddi4+0xa4>
 80009ec:	fab3 f183 	clz	r1, r3
 80009f0:	2900      	cmp	r1, #0
 80009f2:	d14d      	bne.n	8000a90 <__udivmoddi4+0x15c>
 80009f4:	42a3      	cmp	r3, r4
 80009f6:	f0c0 80f2 	bcc.w	8000bde <__udivmoddi4+0x2aa>
 80009fa:	4290      	cmp	r0, r2
 80009fc:	f080 80ef 	bcs.w	8000bde <__udivmoddi4+0x2aa>
 8000a00:	4606      	mov	r6, r0
 8000a02:	4623      	mov	r3, r4
 8000a04:	4608      	mov	r0, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0e6      	beq.n	80009d8 <__udivmoddi4+0xa4>
 8000a0a:	e9c5 6300 	strd	r6, r3, [r5]
 8000a0e:	e7e3      	b.n	80009d8 <__udivmoddi4+0xa4>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 80a2 	bne.w	8000b5a <__udivmoddi4+0x226>
 8000a16:	1a8a      	subs	r2, r1, r2
 8000a18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a1c:	fa1f f68e 	uxth.w	r6, lr
 8000a20:	2101      	movs	r1, #1
 8000a22:	fbb2 f4f7 	udiv	r4, r2, r7
 8000a26:	fb07 2014 	mls	r0, r7, r4, r2
 8000a2a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000a2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a32:	fb06 f004 	mul.w	r0, r6, r4
 8000a36:	4290      	cmp	r0, r2
 8000a38:	d90f      	bls.n	8000a5a <__udivmoddi4+0x126>
 8000a3a:	eb1e 0202 	adds.w	r2, lr, r2
 8000a3e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000a42:	bf2c      	ite	cs
 8000a44:	f04f 0901 	movcs.w	r9, #1
 8000a48:	f04f 0900 	movcc.w	r9, #0
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	d903      	bls.n	8000a58 <__udivmoddi4+0x124>
 8000a50:	f1b9 0f00 	cmp.w	r9, #0
 8000a54:	f000 80c8 	beq.w	8000be8 <__udivmoddi4+0x2b4>
 8000a58:	4644      	mov	r4, r8
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	fa1f fc8c 	uxth.w	ip, ip
 8000a60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a64:	fb07 2210 	mls	r2, r7, r0, r2
 8000a68:	fb00 f606 	mul.w	r6, r0, r6
 8000a6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a70:	4566      	cmp	r6, ip
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x152>
 8000a74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a78:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a7c:	d202      	bcs.n	8000a84 <__udivmoddi4+0x150>
 8000a7e:	4566      	cmp	r6, ip
 8000a80:	f200 80bb 	bhi.w	8000bfa <__udivmoddi4+0x2c6>
 8000a84:	4610      	mov	r0, r2
 8000a86:	ebac 0c06 	sub.w	ip, ip, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	e79d      	b.n	80009cc <__udivmoddi4+0x98>
 8000a90:	f1c1 0620 	rsb	r6, r1, #32
 8000a94:	408b      	lsls	r3, r1
 8000a96:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a9e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aa2:	40f4      	lsrs	r4, r6
 8000aa4:	408a      	lsls	r2, r1
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	ea4e 030c 	orr.w	r3, lr, ip
 8000aac:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ab0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ab4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ac0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ac4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac8:	fb00 f90c 	mul.w	r9, r0, ip
 8000acc:	45a1      	cmp	r9, r4
 8000ace:	d90e      	bls.n	8000aee <__udivmoddi4+0x1ba>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ad6:	bf2c      	ite	cs
 8000ad8:	f04f 0b01 	movcs.w	fp, #1
 8000adc:	f04f 0b00 	movcc.w	fp, #0
 8000ae0:	45a1      	cmp	r9, r4
 8000ae2:	d903      	bls.n	8000aec <__udivmoddi4+0x1b8>
 8000ae4:	f1bb 0f00 	cmp.w	fp, #0
 8000ae8:	f000 8093 	beq.w	8000c12 <__udivmoddi4+0x2de>
 8000aec:	4650      	mov	r0, sl
 8000aee:	eba4 0409 	sub.w	r4, r4, r9
 8000af2:	fa1f f983 	uxth.w	r9, r3
 8000af6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000afa:	fb08 4413 	mls	r4, r8, r3, r4
 8000afe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d906      	bls.n	8000b18 <__udivmoddi4+0x1e4>
 8000b0a:	193c      	adds	r4, r7, r4
 8000b0c:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000b10:	d201      	bcs.n	8000b16 <__udivmoddi4+0x1e2>
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d87a      	bhi.n	8000c0c <__udivmoddi4+0x2d8>
 8000b16:	4643      	mov	r3, r8
 8000b18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	fba0 9802 	umull	r9, r8, r0, r2
 8000b24:	4544      	cmp	r4, r8
 8000b26:	46cc      	mov	ip, r9
 8000b28:	4643      	mov	r3, r8
 8000b2a:	d302      	bcc.n	8000b32 <__udivmoddi4+0x1fe>
 8000b2c:	d106      	bne.n	8000b3c <__udivmoddi4+0x208>
 8000b2e:	45ce      	cmp	lr, r9
 8000b30:	d204      	bcs.n	8000b3c <__udivmoddi4+0x208>
 8000b32:	3801      	subs	r0, #1
 8000b34:	ebb9 0c02 	subs.w	ip, r9, r2
 8000b38:	eb68 0307 	sbc.w	r3, r8, r7
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x222>
 8000b3e:	ebbe 020c 	subs.w	r2, lr, ip
 8000b42:	eb64 0403 	sbc.w	r4, r4, r3
 8000b46:	fa04 f606 	lsl.w	r6, r4, r6
 8000b4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000b4e:	40cc      	lsrs	r4, r1
 8000b50:	431e      	orrs	r6, r3
 8000b52:	e9c5 6400 	strd	r6, r4, [r5]
 8000b56:	2100      	movs	r1, #0
 8000b58:	e73e      	b.n	80009d8 <__udivmoddi4+0xa4>
 8000b5a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b5e:	f1c3 0120 	rsb	r1, r3, #32
 8000b62:	fa04 f203 	lsl.w	r2, r4, r3
 8000b66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b6a:	40cc      	lsrs	r4, r1
 8000b6c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b70:	fa20 f101 	lsr.w	r1, r0, r1
 8000b74:	fa1f f68e 	uxth.w	r6, lr
 8000b78:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	fb07 4410 	mls	r4, r7, r0, r4
 8000b82:	0c11      	lsrs	r1, r2, #16
 8000b84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b88:	fb00 f406 	mul.w	r4, r0, r6
 8000b8c:	428c      	cmp	r4, r1
 8000b8e:	d90e      	bls.n	8000bae <__udivmoddi4+0x27a>
 8000b90:	eb1e 0101 	adds.w	r1, lr, r1
 8000b94:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000b98:	bf2c      	ite	cs
 8000b9a:	f04f 0901 	movcs.w	r9, #1
 8000b9e:	f04f 0900 	movcc.w	r9, #0
 8000ba2:	428c      	cmp	r4, r1
 8000ba4:	d902      	bls.n	8000bac <__udivmoddi4+0x278>
 8000ba6:	f1b9 0f00 	cmp.w	r9, #0
 8000baa:	d02c      	beq.n	8000c06 <__udivmoddi4+0x2d2>
 8000bac:	4640      	mov	r0, r8
 8000bae:	1b09      	subs	r1, r1, r4
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bbe:	fb04 f106 	mul.w	r1, r4, r6
 8000bc2:	4291      	cmp	r1, r2
 8000bc4:	d907      	bls.n	8000bd6 <__udivmoddi4+0x2a2>
 8000bc6:	eb1e 0202 	adds.w	r2, lr, r2
 8000bca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000bce:	d201      	bcs.n	8000bd4 <__udivmoddi4+0x2a0>
 8000bd0:	4291      	cmp	r1, r2
 8000bd2:	d815      	bhi.n	8000c00 <__udivmoddi4+0x2cc>
 8000bd4:	4644      	mov	r4, r8
 8000bd6:	1a52      	subs	r2, r2, r1
 8000bd8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000bdc:	e721      	b.n	8000a22 <__udivmoddi4+0xee>
 8000bde:	1a86      	subs	r6, r0, r2
 8000be0:	eb64 0303 	sbc.w	r3, r4, r3
 8000be4:	2001      	movs	r0, #1
 8000be6:	e70e      	b.n	8000a06 <__udivmoddi4+0xd2>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4472      	add	r2, lr
 8000bec:	e735      	b.n	8000a5a <__udivmoddi4+0x126>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4472      	add	r2, lr
 8000bf2:	e6d0      	b.n	8000996 <__udivmoddi4+0x62>
 8000bf4:	44f4      	add	ip, lr
 8000bf6:	3802      	subs	r0, #2
 8000bf8:	e6e3      	b.n	80009c2 <__udivmoddi4+0x8e>
 8000bfa:	44f4      	add	ip, lr
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	e742      	b.n	8000a86 <__udivmoddi4+0x152>
 8000c00:	3c02      	subs	r4, #2
 8000c02:	4472      	add	r2, lr
 8000c04:	e7e7      	b.n	8000bd6 <__udivmoddi4+0x2a2>
 8000c06:	3802      	subs	r0, #2
 8000c08:	4471      	add	r1, lr
 8000c0a:	e7d0      	b.n	8000bae <__udivmoddi4+0x27a>
 8000c0c:	3b02      	subs	r3, #2
 8000c0e:	443c      	add	r4, r7
 8000c10:	e782      	b.n	8000b18 <__udivmoddi4+0x1e4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	e76a      	b.n	8000aee <__udivmoddi4+0x1ba>

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	0000      	movs	r0, r0
	...

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c24:	f000 ff88 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c28:	f000 f90a 	bl	8000e40 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c2c:	f000 f980 	bl	8000f30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 fc22 	bl	8001478 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c34:	f000 f9b2 	bl	8000f9c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000c38:	f000 fa64 	bl	8001104 <MX_FDCAN1_Init>
  MX_FLASH_Init();
 8000c3c:	f000 faa8 	bl	8001190 <MX_FLASH_Init>
  MX_I2C1_Init();
 8000c40:	f000 fab8 	bl	80011b4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c44:	f000 fb0a 	bl	800125c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000c48:	f000 fb98 	bl	800137c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000c4c:	f000 fbe2 	bl	8001414 <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 8000c50:	f000 faf0 	bl	8001234 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  // calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c54:	217f      	movs	r1, #127	@ 0x7f
 8000c56:	4864      	ldr	r0, [pc, #400]	@ (8000de8 <main+0x1c8>)
 8000c58:	f002 f9f2 	bl	8003040 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// read all digital inputs
	OV_SENSE_HV = HAL_GPIO_ReadPin(OV_SENSE_HV_GPIO_Port, OV_SENSE_HV_Pin);
 8000c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c60:	4862      	ldr	r0, [pc, #392]	@ (8000dec <main+0x1cc>)
 8000c62:	f002 fef7 	bl	8003a54 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b61      	ldr	r3, [pc, #388]	@ (8000df0 <main+0x1d0>)
 8000c6c:	701a      	strb	r2, [r3, #0]
	OC_SENSE_HV = HAL_GPIO_ReadPin(OC_SENSE_HV_GPIO_Port, OC_SENSE_HV_Pin);
 8000c6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c72:	485e      	ldr	r0, [pc, #376]	@ (8000dec <main+0x1cc>)
 8000c74:	f002 feee 	bl	8003a54 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <main+0x1d4>)
 8000c7e:	701a      	strb	r2, [r3, #0]
	FAULT_12 = HAL_GPIO_ReadPin(FAULT_12_GPIO_Port, FAULT_12_Pin);
 8000c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c84:	4859      	ldr	r0, [pc, #356]	@ (8000dec <main+0x1cc>)
 8000c86:	f002 fee5 	bl	8003a54 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000df8 <main+0x1d8>)
 8000c90:	701a      	strb	r2, [r3, #0]
	BUTTON = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000c92:	2120      	movs	r1, #32
 8000c94:	4859      	ldr	r0, [pc, #356]	@ (8000dfc <main+0x1dc>)
 8000c96:	f002 fedd 	bl	8003a54 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b58      	ldr	r3, [pc, #352]	@ (8000e00 <main+0x1e0>)
 8000ca0:	701a      	strb	r2, [r3, #0]
	BOOT0_SENSE = HAL_GPIO_ReadPin(BOOT0_SENSE_GPIO_Port, BOOT0_SENSE_Pin);
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	4855      	ldr	r0, [pc, #340]	@ (8000dfc <main+0x1dc>)
 8000ca6:	f002 fed5 	bl	8003a54 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b55      	ldr	r3, [pc, #340]	@ (8000e04 <main+0x1e4>)
 8000cb0:	701a      	strb	r2, [r3, #0]

	// write all digital outputs
	HAL_GPIO_WritePin(HV_RELAY_GPIO_Port, HV_RELAY_Pin, HV_RELAY);
 8000cb2:	4b55      	ldr	r3, [pc, #340]	@ (8000e08 <main+0x1e8>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4854      	ldr	r0, [pc, #336]	@ (8000e0c <main+0x1ec>)
 8000cbc:	f002 fee2 	bl	8003a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SHDN_12_GPIO_Port, SHDN_12_Pin, SHDN_12);
 8000cc0:	4b53      	ldr	r3, [pc, #332]	@ (8000e10 <main+0x1f0>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4850      	ldr	r0, [pc, #320]	@ (8000e0c <main+0x1ec>)
 8000cca:	f002 fedb 	bl	8003a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_R_GPIO_Port, IND_R_Pin, IND_R);
 8000cce:	4b51      	ldr	r3, [pc, #324]	@ (8000e14 <main+0x1f4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cd8:	484c      	ldr	r0, [pc, #304]	@ (8000e0c <main+0x1ec>)
 8000cda:	f002 fed3 	bl	8003a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_G_GPIO_Port, IND_G_Pin, IND_G);
 8000cde:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <main+0x1f8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce8:	4848      	ldr	r0, [pc, #288]	@ (8000e0c <main+0x1ec>)
 8000cea:	f002 fecb 	bl	8003a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_B_GPIO_Port, IND_B_Pin, IND_B);
 8000cee:	4b4b      	ldr	r3, [pc, #300]	@ (8000e1c <main+0x1fc>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf8:	4844      	ldr	r0, [pc, #272]	@ (8000e0c <main+0x1ec>)
 8000cfa:	f002 fec3 	bl	8003a84 <HAL_GPIO_WritePin>

	// read all analog inputs
	HAL_ADC_Start(&hadc1);
 8000cfe:	483a      	ldr	r0, [pc, #232]	@ (8000de8 <main+0x1c8>)
 8000d00:	f001 fb82 	bl	8002408 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d04:	2164      	movs	r1, #100	@ 0x64
 8000d06:	4838      	ldr	r0, [pc, #224]	@ (8000de8 <main+0x1c8>)
 8000d08:	f001 fbe1 	bl	80024ce <HAL_ADC_PollForConversion>
	V_SENSE_HV = HAL_ADC_GetValue(&hadc1);
 8000d0c:	4836      	ldr	r0, [pc, #216]	@ (8000de8 <main+0x1c8>)
 8000d0e:	f001 fc6d 	bl	80025ec <HAL_ADC_GetValue>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b42      	ldr	r3, [pc, #264]	@ (8000e20 <main+0x200>)
 8000d18:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d1a:	2164      	movs	r1, #100	@ 0x64
 8000d1c:	4832      	ldr	r0, [pc, #200]	@ (8000de8 <main+0x1c8>)
 8000d1e:	f001 fbd6 	bl	80024ce <HAL_ADC_PollForConversion>
	V_SENSE_12 = HAL_ADC_GetValue(&hadc1);
 8000d22:	4831      	ldr	r0, [pc, #196]	@ (8000de8 <main+0x1c8>)
 8000d24:	f001 fc62 	bl	80025ec <HAL_ADC_GetValue>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <main+0x204>)
 8000d2e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d30:	2164      	movs	r1, #100	@ 0x64
 8000d32:	482d      	ldr	r0, [pc, #180]	@ (8000de8 <main+0x1c8>)
 8000d34:	f001 fbcb 	bl	80024ce <HAL_ADC_PollForConversion>
	V_SENSE_5 = HAL_ADC_GetValue(&hadc1);
 8000d38:	482b      	ldr	r0, [pc, #172]	@ (8000de8 <main+0x1c8>)
 8000d3a:	f001 fc57 	bl	80025ec <HAL_ADC_GetValue>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b39      	ldr	r3, [pc, #228]	@ (8000e28 <main+0x208>)
 8000d44:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d46:	2164      	movs	r1, #100	@ 0x64
 8000d48:	4827      	ldr	r0, [pc, #156]	@ (8000de8 <main+0x1c8>)
 8000d4a:	f001 fbc0 	bl	80024ce <HAL_ADC_PollForConversion>
	I_SENSE_HV = HAL_ADC_GetValue(&hadc1);
 8000d4e:	4826      	ldr	r0, [pc, #152]	@ (8000de8 <main+0x1c8>)
 8000d50:	f001 fc4c 	bl	80025ec <HAL_ADC_GetValue>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <main+0x20c>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d5c:	2164      	movs	r1, #100	@ 0x64
 8000d5e:	4822      	ldr	r0, [pc, #136]	@ (8000de8 <main+0x1c8>)
 8000d60:	f001 fbb5 	bl	80024ce <HAL_ADC_PollForConversion>
	I_SENSE_12 = HAL_ADC_GetValue(&hadc1);
 8000d64:	4820      	ldr	r0, [pc, #128]	@ (8000de8 <main+0x1c8>)
 8000d66:	f001 fc41 	bl	80025ec <HAL_ADC_GetValue>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <main+0x210>)
 8000d70:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000d72:	2164      	movs	r1, #100	@ 0x64
 8000d74:	481c      	ldr	r0, [pc, #112]	@ (8000de8 <main+0x1c8>)
 8000d76:	f001 fbaa 	bl	80024ce <HAL_ADC_PollForConversion>
	I_SENSE_5 = HAL_ADC_GetValue(&hadc1);
 8000d7a:	481b      	ldr	r0, [pc, #108]	@ (8000de8 <main+0x1c8>)
 8000d7c:	f001 fc36 	bl	80025ec <HAL_ADC_GetValue>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <main+0x214>)
 8000d86:	801a      	strh	r2, [r3, #0]

	// calculate measurements
	voltage_out_12 = V_SENSE_12 * 0.0080566406;
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <main+0x204>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fcff 	bl	8000790 <__aeabi_i2d>
 8000d92:	a311      	add	r3, pc, #68	@ (adr r3, 8000dd8 <main+0x1b8>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f7ff fa7e 	bl	8000298 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f7ff fd5e 	bl	8000864 <__aeabi_d2f>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4a23      	ldr	r2, [pc, #140]	@ (8000e38 <main+0x218>)
 8000dac:	6013      	str	r3, [r2, #0]
	voltage_out_5 = V_SENSE_5 * 0.0014648438;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <main+0x208>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fcec 	bl	8000790 <__aeabi_i2d>
 8000db8:	a309      	add	r3, pc, #36	@ (adr r3, 8000de0 <main+0x1c0>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fa6b 	bl	8000298 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fd4b 	bl	8000864 <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <main+0x21c>)
 8000dd2:	6013      	str	r3, [r2, #0]
	OV_SENSE_HV = HAL_GPIO_ReadPin(OV_SENSE_HV_GPIO_Port, OV_SENSE_HV_Pin);
 8000dd4:	bf00      	nop
 8000dd6:	e741      	b.n	8000c5c <main+0x3c>
 8000dd8:	ff241901 	.word	0xff241901
 8000ddc:	3f807fff 	.word	0x3f807fff
 8000de0:	0dbe6fed 	.word	0x0dbe6fed
 8000de4:	3f580000 	.word	0x3f580000
 8000de8:	20000028 	.word	0x20000028
 8000dec:	42020800 	.word	0x42020800
 8000df0:	2000050c 	.word	0x2000050c
 8000df4:	2000050d 	.word	0x2000050d
 8000df8:	2000050e 	.word	0x2000050e
 8000dfc:	42020400 	.word	0x42020400
 8000e00:	2000050f 	.word	0x2000050f
 8000e04:	20000510 	.word	0x20000510
 8000e08:	20000511 	.word	0x20000511
 8000e0c:	42020000 	.word	0x42020000
 8000e10:	20000512 	.word	0x20000512
 8000e14:	20000513 	.word	0x20000513
 8000e18:	20000514 	.word	0x20000514
 8000e1c:	20000515 	.word	0x20000515
 8000e20:	20000516 	.word	0x20000516
 8000e24:	2000051a 	.word	0x2000051a
 8000e28:	2000051e 	.word	0x2000051e
 8000e2c:	20000518 	.word	0x20000518
 8000e30:	2000051c 	.word	0x2000051c
 8000e34:	20000520 	.word	0x20000520
 8000e38:	20000524 	.word	0x20000524
 8000e3c:	20000528 	.word	0x20000528

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b09c      	sub	sp, #112	@ 0x70
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2250      	movs	r2, #80	@ 0x50
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f007 fb9d 	bl	800858e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e66:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <SystemClock_Config+0xe8>)
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f28 <SystemClock_Config+0xe8>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6113      	str	r3, [r2, #16]
 8000e76:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <SystemClock_Config+0xe8>)
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e82:	bf00      	nop
 8000e84:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <SystemClock_Config+0xe8>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d1f9      	bne.n	8000e84 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e90:	2322      	movs	r3, #34	@ 0x22
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2340      	movs	r3, #64	@ 0x40
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000eb2:	2364      	movs	r3, #100	@ 0x64
 8000eb4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 f874 	bl	8003fc0 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ede:	f000 fb3d 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2105      	movs	r1, #5
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fc95 	bl	8004830 <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f0c:	f000 fb26 	bl	800155c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemClock_Config+0xec>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <SystemClock_Config+0xec>)
 8000f1a:	f043 0320 	orr.w	r3, r3, #32
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	3770      	adds	r7, #112	@ 0x70
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	44020800 	.word	0x44020800
 8000f2c:	40022000 	.word	0x40022000

08000f30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0a2      	sub	sp, #136	@ 0x88
 8000f34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2288      	movs	r2, #136	@ 0x88
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f007 fb26 	bl	800858e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_FDCAN;
 8000f42:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f46:	f04f 0304 	mov.w	r3, #4
 8000f4a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000f52:	2308      	movs	r3, #8
 8000f54:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000f56:	2332      	movs	r3, #50	@ 0x32
 8000f58:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 8;
 8000f62:	2308      	movs	r3, #8
 8000f64:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_2;
 8000f66:	2308      	movs	r3, #8
 8000f68:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVQ|RCC_PLL2_DIVR;
 8000f72:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2Q;
 8000f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 ff95 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 8000f90:	f000 fae4 	bl	800155c <Error_Handler>
  }
}
 8000f94:	bf00      	nop
 8000f96:	3788      	adds	r7, #136	@ 0x88
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 faf0 	bl	800858e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b4e      	ldr	r3, [pc, #312]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80010ec <MX_ADC1_Init+0x150>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b4b      	ldr	r3, [pc, #300]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b49      	ldr	r3, [pc, #292]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fc6:	4b48      	ldr	r3, [pc, #288]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b46      	ldr	r3, [pc, #280]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd8:	4b43      	ldr	r3, [pc, #268]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b40      	ldr	r3, [pc, #256]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b3e      	ldr	r3, [pc, #248]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001000:	4b39      	ldr	r3, [pc, #228]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8001002:	2200      	movs	r2, #0
 8001004:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001006:	4b38      	ldr	r3, [pc, #224]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8001008:	2200      	movs	r2, #0
 800100a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001014:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8001016:	f001 f8a9 	bl	800216c <HAL_ADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001020:	f000 fa9c 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001024:	2301      	movs	r3, #1
 8001026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001028:	2306      	movs	r3, #6
 800102a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800102c:	2304      	movs	r3, #4
 800102e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001030:	237f      	movs	r3, #127	@ 0x7f
 8001032:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001034:	2304      	movs	r3, #4
 8001036:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8001042:	f001 fae1 	bl	8002608 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800104c:	f000 fa86 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001050:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <MX_ADC1_Init+0x154>)
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001054:	230c      	movs	r3, #12
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4822      	ldr	r0, [pc, #136]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 800105e:	f001 fad3 	bl	8002608 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001068:	f000 fa78 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800106c:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_ADC1_Init+0x158>)
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001070:	2312      	movs	r3, #18
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 800107a:	f001 fac5 	bl	8002608 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001084:	f000 fa6a 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0x15c>)
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800108c:	2318      	movs	r3, #24
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 8001096:	f001 fab7 	bl	8002608 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010a0:	f000 fa5c 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_ADC1_Init+0x160>)
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 80010b4:	f001 faa8 	bl	8002608 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80010be:	f000 fa4d 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_ADC1_Init+0x164>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010c6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_ADC1_Init+0x14c>)
 80010d2:	f001 fa99 	bl	8002608 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80010dc:	f000 fa3e 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000028 	.word	0x20000028
 80010ec:	42028000 	.word	0x42028000
 80010f0:	04300002 	.word	0x04300002
 80010f4:	0c900008 	.word	0x0c900008
 80010f8:	14f00020 	.word	0x14f00020
 80010fc:	1d500080 	.word	0x1d500080
 8001100:	25b00200 	.word	0x25b00200

08001104 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800110a:	4a20      	ldr	r2, [pc, #128]	@ (800118c <MX_FDCAN1_Init+0x88>)
 800110c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001122:	2200      	movs	r2, #0
 8001124:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001128:	2200      	movs	r2, #0
 800112a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800112e:	2200      	movs	r2, #0
 8001130:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001134:	2210      	movs	r2, #16
 8001136:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800113a:	2201      	movs	r2, #1
 800113c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001140:	2201      	movs	r2, #1
 8001142:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001146:	2201      	movs	r2, #1
 8001148:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800114c:	2201      	movs	r2, #1
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001152:	2201      	movs	r2, #1
 8001154:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001158:	2201      	movs	r2, #1
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800115e:	2201      	movs	r2, #1
 8001160:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001164:	2200      	movs	r2, #0
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 800116a:	2200      	movs	r2, #0
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_FDCAN1_Init+0x84>)
 8001176:	f002 f929 	bl	80033cc <HAL_FDCAN_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001180:	f000 f9ec 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000090 	.word	0x20000090
 800118c:	4000a400 	.word	0x4000a400

08001190 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8001194:	f002 faca 	bl	800372c <HAL_FLASH_Unlock>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 800119e:	f000 f9dd 	bl	800155c <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80011a2:	f002 fae9 	bl	8003778 <HAL_FLASH_Lock>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80011ac:	f000 f9d6 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <MX_I2C1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30C0EDFF;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001230 <MX_I2C1_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	@ (8001228 <MX_I2C1_Init+0x74>)
 80011f0:	f002 fc60 	bl	8003ab4 <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 f9af 	bl	800155c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <MX_I2C1_Init+0x74>)
 8001202:	f002 fcf2 	bl	8003bea <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 f9a6 	bl	800155c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_I2C1_Init+0x74>)
 8001214:	f002 fd34 	bl	8003c80 <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 f99d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000f4 	.word	0x200000f4
 800122c:	40005400 	.word	0x40005400
 8001230:	30c0edff 	.word	0x30c0edff

08001234 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f002 fd6d 	bl	8003d18 <HAL_ICACHE_ConfigAssociativityMode>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001244:	f000 f98a 	bl	800155c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001248:	f002 fd86 	bl	8003d58 <HAL_ICACHE_Enable>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001252:	f000 f983 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b098      	sub	sp, #96	@ 0x60
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2234      	movs	r2, #52	@ 0x34
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f007 f980 	bl	800858e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128e:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <MX_TIM1_Init+0x118>)
 8001290:	4a39      	ldr	r2, [pc, #228]	@ (8001378 <MX_TIM1_Init+0x11c>)
 8001292:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001294:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <MX_TIM1_Init+0x118>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <MX_TIM1_Init+0x118>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012a0:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <MX_TIM1_Init+0x118>)
 80012a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <MX_TIM1_Init+0x118>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <MX_TIM1_Init+0x118>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001374 <MX_TIM1_Init+0x118>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ba:	482e      	ldr	r0, [pc, #184]	@ (8001374 <MX_TIM1_Init+0x118>)
 80012bc:	f005 fecc 	bl	8007058 <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f949 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012da:	4619      	mov	r1, r3
 80012dc:	4825      	ldr	r0, [pc, #148]	@ (8001374 <MX_TIM1_Init+0x118>)
 80012de:	f006 fad7 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 f938 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ec:	2360      	movs	r3, #96	@ 0x60
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4818      	ldr	r0, [pc, #96]	@ (8001374 <MX_TIM1_Init+0x118>)
 8001312:	f005 fef9 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800131c:	f000 f91e 	bl	800155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001338:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_TIM1_Init+0x118>)
 800135e:	f006 faff 	bl	8007960 <HAL_TIMEx_ConfigBreakDeadTime>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001368:	f000 f8f8 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3760      	adds	r7, #96	@ 0x60
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000148 	.word	0x20000148
 8001378:	40012c00 	.word	0x40012c00

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <MX_USART1_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_USART1_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013c6:	f006 fb51 	bl	8007a6c <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 f8c4 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013d8:	f006 ff6e 	bl	80082b8 <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 f8bb 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ea:	f006 ffa3 	bl	8008334 <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 f8b2 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013fa:	f006 ff24 	bl	8008246 <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 f8aa 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000194 	.word	0x20000194
 8001410:	40013800 	.word	0x40013800

08001414 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 800141a:	4a16      	ldr	r2, [pc, #88]	@ (8001474 <MX_USB_PCD_Init+0x60>)
 800141c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001420:	2208      	movs	r2, #8
 8001422:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001426:	2202      	movs	r2, #2
 8001428:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 800142c:	2202      	movs	r2, #2
 800142e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 800144a:	2200      	movs	r2, #0
 800144c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_USB_PCD_Init+0x5c>)
 800145c:	f002 fc8c 	bl	8003d78 <HAL_PCD_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8001466:	f000 f879 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000228 	.word	0x20000228
 8001474:	40016000 	.word	0x40016000

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <MX_GPIO_Init+0xd4>)
 8001490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001494:	4a2d      	ldr	r2, [pc, #180]	@ (800154c <MX_GPIO_Init+0xd4>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b2:	4a26      	ldr	r2, [pc, #152]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014bc:	4b23      	ldr	r3, [pc, #140]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <MX_GPIO_Init+0xd4>)
 80014dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HV_RELAY_Pin|SHDN_12_Pin|IND_R_Pin|IND_G_Pin
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 61e3 	mov.w	r1, #1816	@ 0x718
 80014ee:	4818      	ldr	r0, [pc, #96]	@ (8001550 <MX_GPIO_Init+0xd8>)
 80014f0:	f002 fac8 	bl	8003a84 <HAL_GPIO_WritePin>
                          |IND_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OV_SENSE_HV_Pin OC_SENSE_HV_Pin FAULT_12_Pin */
  GPIO_InitStruct.Pin = OV_SENSE_HV_Pin|OC_SENSE_HV_Pin|FAULT_12_Pin;
 80014f4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4812      	ldr	r0, [pc, #72]	@ (8001554 <MX_GPIO_Init+0xdc>)
 800150a:	f002 f951 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HV_RELAY_Pin SHDN_12_Pin IND_R_Pin IND_G_Pin
                           IND_B_Pin */
  GPIO_InitStruct.Pin = HV_RELAY_Pin|SHDN_12_Pin|IND_R_Pin|IND_G_Pin
 800150e:	f44f 63e3 	mov.w	r3, #1816	@ 0x718
 8001512:	60fb      	str	r3, [r7, #12]
                          |IND_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480a      	ldr	r0, [pc, #40]	@ (8001550 <MX_GPIO_Init+0xd8>)
 8001528:	f002 f942 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin BOOT0_SENSE_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BOOT0_SENSE_Pin;
 800152c:	23a0      	movs	r3, #160	@ 0xa0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_GPIO_Init+0xe0>)
 8001540:	f002 f936 	bl	80037b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	44020c00 	.word	0x44020c00
 8001550:	42020000 	.word	0x42020000
 8001554:	42020800 	.word	0x42020800
 8001558:	42020400 	.word	0x42020400

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <Error_Handler+0x8>

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a25      	ldr	r2, [pc, #148]	@ (800162c <HAL_ADC_MspInit+0xb4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d144      	bne.n	8001624 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800159a:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 800159c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a0:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015be:	4a1c      	ldr	r2, [pc, #112]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015dc:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_ADC_MspInit+0xb8>)
 80015e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = V_SENSE_HV_Pin|V_SENSE_12_Pin|V_SENSE_5_Pin|I_SENSE_12_Pin;
 80015f4:	23c3      	movs	r3, #195	@ 0xc3
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f8:	2303      	movs	r3, #3
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	480b      	ldr	r0, [pc, #44]	@ (8001634 <HAL_ADC_MspInit+0xbc>)
 8001608:	f002 f8d2 	bl	80037b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_SENSE_5_Pin|I_SENSE_HV_Pin;
 800160c:	2303      	movs	r3, #3
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001610:	2303      	movs	r3, #3
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <HAL_ADC_MspInit+0xc0>)
 8001620:	f002 f8c6 	bl	80037b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	@ 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	42028000 	.word	0x42028000
 8001630:	44020c00 	.word	0x44020c00
 8001634:	42020000 	.word	0x42020000
 8001638:	42020400 	.word	0x42020400

0800163c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1a      	ldr	r2, [pc, #104]	@ (80016c4 <HAL_FDCAN_MspInit+0x88>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12e      	bne.n	80016bc <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_FDCAN_MspInit+0x8c>)
 8001660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001664:	4a18      	ldr	r2, [pc, #96]	@ (80016c8 <HAL_FDCAN_MspInit+0x8c>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_FDCAN_MspInit+0x8c>)
 8001670:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_FDCAN_MspInit+0x8c>)
 800167e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001682:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_FDCAN_MspInit+0x8c>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_FDCAN_MspInit+0x8c>)
 800168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB12     ------> FDCAN1_RX
    PB13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800169a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016ac:	2309      	movs	r3, #9
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_FDCAN_MspInit+0x90>)
 80016b8:	f002 f87a 	bl	80037b0 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	4000a400 	.word	0x4000a400
 80016c8:	44020c00 	.word	0x44020c00
 80016cc:	42020400 	.word	0x42020400

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0ac      	sub	sp, #176	@ 0xb0
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2288      	movs	r2, #136	@ 0x88
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 ff4c 	bl	800858e <memset>
  if(hi2c->Instance==I2C1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a31      	ldr	r2, [pc, #196]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d15b      	bne.n	80017b8 <HAL_I2C_MspInit+0xe8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fbcd 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001720:	f7ff ff1c 	bl	800155c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800172a:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001734:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 8001736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB10     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001746:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C1;
 800175c:	230b      	movs	r3, #11
 800175e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <HAL_I2C_MspInit+0xf8>)
 800176a:	f002 f821 	bl	80037b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800176e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001788:	2304      	movs	r3, #4
 800178a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <HAL_I2C_MspInit+0xf8>)
 8001796:	f002 f80b 	bl	80037b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 800179c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017a0:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 80017a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 80017ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017b8:	bf00      	nop
 80017ba:	37b0      	adds	r7, #176	@ 0xb0
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40005400 	.word	0x40005400
 80017c4:	44020c00 	.word	0x44020c00
 80017c8:	42020400 	.word	0x42020400

080017cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <HAL_TIM_PWM_MspInit+0x3c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10e      	bne.n	80017fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_TIM_PWM_MspInit+0x40>)
 80017e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017e4:	4a09      	ldr	r2, [pc, #36]	@ (800180c <HAL_TIM_PWM_MspInit+0x40>)
 80017e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017ea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <HAL_TIM_PWM_MspInit+0x40>)
 80017f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40012c00 	.word	0x40012c00
 800180c:	44020c00 	.word	0x44020c00

08001810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0ae      	sub	sp, #184	@ 0xb8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	2288      	movs	r2, #136	@ 0x88
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f006 feac 	bl	800858e <memset>
  if(huart->Instance==USART1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a38      	ldr	r2, [pc, #224]	@ (800191c <HAL_UART_MspInit+0x10c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d169      	bne.n	8001914 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001840:	f04f 0201 	mov.w	r2, #1
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800184c:	2300      	movs	r3, #0
 800184e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fb2d 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001860:	f7ff fe7c 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <HAL_UART_MspInit+0x110>)
 8001866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800186a:	4a2d      	ldr	r2, [pc, #180]	@ (8001920 <HAL_UART_MspInit+0x110>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001870:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_UART_MspInit+0x110>)
 8001876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <HAL_UART_MspInit+0x110>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001888:	4a25      	ldr	r2, [pc, #148]	@ (8001920 <HAL_UART_MspInit+0x110>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <HAL_UART_MspInit+0x110>)
 8001894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <HAL_UART_MspInit+0x110>)
 80018a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001920 <HAL_UART_MspInit+0x110>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_UART_MspInit+0x110>)
 80018b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018be:	2304      	movs	r3, #4
 80018c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 80018d6:	2308      	movs	r3, #8
 80018d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4810      	ldr	r0, [pc, #64]	@ (8001924 <HAL_UART_MspInit+0x114>)
 80018e4:	f001 ff64 	bl	80037b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001902:	2304      	movs	r3, #4
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800190c:	4619      	mov	r1, r3
 800190e:	4806      	ldr	r0, [pc, #24]	@ (8001928 <HAL_UART_MspInit+0x118>)
 8001910:	f001 ff4e 	bl	80037b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001914:	bf00      	nop
 8001916:	37b8      	adds	r7, #184	@ 0xb8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40013800 	.word	0x40013800
 8001920:	44020c00 	.word	0x44020c00
 8001924:	42020000 	.word	0x42020000
 8001928:	42020400 	.word	0x42020400

0800192c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0a6      	sub	sp, #152	@ 0x98
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2288      	movs	r2, #136	@ 0x88
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f006 fe26 	bl	800858e <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <HAL_PCD_MspInit+0x6c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d121      	bne.n	8001990 <HAL_PCD_MspInit+0x64>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0310 	mov.w	r3, #16
 8001954:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001958:	2330      	movs	r3, #48	@ 0x30
 800195a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4618      	mov	r0, r3
 8001964:	f003 faa6 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 800196e:	f7ff fdf5 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_PCD_MspInit+0x70>)
 8001974:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001978:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_PCD_MspInit+0x70>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_PCD_MspInit+0x70>)
 8001984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001990:	bf00      	nop
 8001992:	3798      	adds	r7, #152	@ 0x98
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40016000 	.word	0x40016000
 800199c:	44020c00 	.word	0x44020c00

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <NMI_Handler+0x4>

080019a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <MemManage_Handler+0x4>

080019b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f6:	f000 f93d 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a06:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <SystemInit+0xc8>)
 8001a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <SystemInit+0xc8>)
 8001a0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001a16:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <SystemInit+0xcc>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <SystemInit+0xcc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a22:	4b2a      	ldr	r3, [pc, #168]	@ (8001acc <SystemInit+0xcc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001a28:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <SystemInit+0xcc>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4927      	ldr	r1, [pc, #156]	@ (8001acc <SystemInit+0xcc>)
 8001a2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <SystemInit+0xd0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <SystemInit+0xcc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <SystemInit+0xcc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <SystemInit+0xcc>)
 8001a42:	4a24      	ldr	r2, [pc, #144]	@ (8001ad4 <SystemInit+0xd4>)
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001a46:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <SystemInit+0xcc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <SystemInit+0xcc>)
 8001a4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <SystemInit+0xd4>)
 8001a50:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <SystemInit+0xcc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <SystemInit+0xcc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <SystemInit+0xcc>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <SystemInit+0xcc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <SystemInit+0xc8>)
 8001a6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a70:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <SystemInit+0xd8>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001a7a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001a82:	d003      	beq.n	8001a8c <SystemInit+0x8c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a8a:	d117      	bne.n	8001abc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <SystemInit+0xd8>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <SystemInit+0xd8>)
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <SystemInit+0xdc>)
 8001a9c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <SystemInit+0xd8>)
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <SystemInit+0xe0>)
 8001aa2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <SystemInit+0xd8>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <SystemInit+0xd8>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <SystemInit+0xd8>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <SystemInit+0xd8>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	61d3      	str	r3, [r2, #28]
  }
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	44020c00 	.word	0x44020c00
 8001ad0:	fae2eae3 	.word	0xfae2eae3
 8001ad4:	01010280 	.word	0x01010280
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	08192a3b 	.word	0x08192a3b
 8001ae0:	4c5d6e7f 	.word	0x4c5d6e7f

08001ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ae8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aea:	e003      	b.n	8001af4 <LoopCopyDataInit>

08001aec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001af0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001af2:	3104      	adds	r1, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001af4:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001af8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001afa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001afc:	d3f6      	bcc.n	8001aec <CopyDataInit>
	ldr	r2, =_sbss
 8001afe:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b00:	e002      	b.n	8001b08 <LoopFillZerobss>

08001b02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b04:	f842 3b04 	str.w	r3, [r2], #4

08001b08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <LoopForever+0x16>)
	cmp	r2, r3
 8001b0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b0c:	d3f9      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0e:	f7ff ff77 	bl	8001a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b12:	f006 fd45 	bl	80085a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b16:	f7ff f883 	bl	8000c20 <main>

08001b1a <LoopForever>:

LoopForever:
    b LoopForever
 8001b1a:	e7fe      	b.n	8001b1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b1c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001b20:	08008650 	.word	0x08008650
	ldr	r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b28:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001b2c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001b30:	20000530 	.word	0x20000530

08001b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f001 fb70 	bl	8003222 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b42:	f003 f82d 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_Init+0x44>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	490b      	ldr	r1, [pc, #44]	@ (8001b80 <HAL_Init+0x48>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_Init+0x4c>)
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	f001 fba7 	bl	80032b0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b62:	200f      	movs	r0, #15
 8001b64:	f000 f810 	bl	8001b88 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e002      	b.n	8001b78 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b72:	f7ff fcf9 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	44020c00 	.word	0x44020c00
 8001b80:	08008600 	.word	0x08008600
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b94:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_InitTick+0xdc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e05c      	b.n	8001c5a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_InitTick+0xe0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d10c      	bne.n	8001bc6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001bac:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <HAL_InitTick+0xe4>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c64 <HAL_InitTick+0xdc>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e037      	b.n	8001c36 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001bc6:	f001 fbcb 	bl	8003360 <HAL_SYSTICK_GetCLKSourceConfig>
 8001bca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d023      	beq.n	8001c1a <HAL_InitTick+0x92>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d82d      	bhi.n	8001c34 <HAL_InitTick+0xac>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_InitTick+0x5e>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d00d      	beq.n	8001c00 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001be4:	e026      	b.n	8001c34 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <HAL_InitTick+0xe4>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_InitTick+0xdc>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
        break;
 8001bfe:	e01a      	b.n	8001c36 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_InitTick+0xdc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c0e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	60fb      	str	r3, [r7, #12]
        break;
 8001c18:	e00d      	b.n	8001c36 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_InitTick+0xdc>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	60fb      	str	r3, [r7, #12]
        break;
 8001c32:	e000      	b.n	8001c36 <HAL_InitTick+0xae>
        break;
 8001c34:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f001 fb18 	bl	800326c <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e009      	b.n	8001c5a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c46:	2200      	movs	r2, #0
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c4e:	f001 faf3 	bl	8003238 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001c52:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_InitTick+0xe8>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	e000e010 	.word	0xe000e010
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008
 8001c98:	2000052c 	.word	0x2000052c

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000052c 	.word	0x2000052c

08001cb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001d4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	42028000 	.word	0x42028000

08001d68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3360      	adds	r3, #96	@ 0x60
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <LL_ADC_SetOffset+0x44>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	03fff000 	.word	0x03fff000

08001db0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3360      	adds	r3, #96	@ 0x60
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3360      	adds	r3, #96	@ 0x60
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e06:	bf00      	nop
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b087      	sub	sp, #28
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3360      	adds	r3, #96	@ 0x60
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3360      	adds	r3, #96	@ 0x60
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	615a      	str	r2, [r3, #20]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3330      	adds	r3, #48	@ 0x30
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	4413      	add	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	211f      	movs	r1, #31
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	f003 011f 	and.w	r1, r3, #31
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b087      	sub	sp, #28
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3314      	adds	r3, #20
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0e5b      	lsrs	r3, r3, #25
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0d1b      	lsrs	r3, r3, #20
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2107      	movs	r1, #7
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	0d1b      	lsrs	r3, r3, #20
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	431a      	orrs	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0318 	and.w	r3, r3, #24
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	000fffff 	.word	0x000fffff

08001fc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6093      	str	r3, [r2, #8]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800201c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002020:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002048:	d101      	bne.n	800204e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800206c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002094:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <LL_ADC_IsEnabled+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_IsEnabled+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsDisableOngoing+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsDisableOngoing+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b04      	cmp	r3, #4
 8002132:	d101      	bne.n	8002138 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b08      	cmp	r3, #8
 8002158:	d101      	bne.n	800215e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e131      	b.n	80023ea <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff f9ef 	bl	8001578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff19 	bl	8001fe4 <LL_ADC_IsDeepPowerDownEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff feff 	bl	8001fc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff34 	bl	8002034 <LL_ADC_IsInternalRegulatorEnabled>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff18 	bl	800200c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021dc:	4b85      	ldr	r3, [pc, #532]	@ (80023f4 <HAL_ADC_Init+0x288>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	4a85      	ldr	r2, [pc, #532]	@ (80023f8 <HAL_ADC_Init+0x28c>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021f0:	e002      	b.n	80021f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f9      	bne.n	80021f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff16 	bl	8002034 <LL_ADC_IsInternalRegulatorEnabled>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff76 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 8002234:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 80ca 	bne.w	80023d8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80c6 	bne.w	80023d8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002254:	f043 0202 	orr.w	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff23 	bl	80020ac <LL_ADC_IsEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800226c:	4863      	ldr	r0, [pc, #396]	@ (80023fc <HAL_ADC_Init+0x290>)
 800226e:	f7ff ff1d 	bl	80020ac <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4619      	mov	r1, r3
 800227e:	4860      	ldr	r0, [pc, #384]	@ (8002400 <HAL_ADC_Init+0x294>)
 8002280:	f7ff fd18 	bl	8001cb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e5b      	ldrb	r3, [r3, #25]
 8002288:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002294:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800229a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d106      	bne.n	80022c0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	3b01      	subs	r3, #1
 80022b8:	045b      	lsls	r3, r3, #17
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b48      	ldr	r3, [pc, #288]	@ (8002404 <HAL_ADC_Init+0x298>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff1b 	bl	8002146 <LL_ADC_INJ_IsConversionOngoing>
 8002310:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d13d      	bne.n	8002394 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d13a      	bne.n	8002394 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7e1b      	ldrb	r3, [r3, #24]
 8002322:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800232a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800233a:	f023 0302 	bic.w	r3, r3, #2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	69b9      	ldr	r1, [r7, #24]
 8002344:	430b      	orrs	r3, r1
 8002346:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234e:	2b01      	cmp	r3, #1
 8002350:	d118      	bne.n	8002384 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002374:	430a      	orrs	r2, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	e007      	b.n	8002394 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d10c      	bne.n	80023b6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f023 010f 	bic.w	r1, r3, #15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023b4:	e007      	b.n	80023c6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 020f 	bic.w	r2, r2, #15
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80023d6:	e007      	b.n	80023e8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	f043 0210 	orr.w	r2, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000
 80023f8:	053e2d63 	.word	0x053e2d63
 80023fc:	42028000 	.word	0x42028000
 8002400:	42028300 	.word	0x42028300
 8002404:	fff04007 	.word	0xfff04007

08002408 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe83 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d14f      	bne.n	80024c0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_Start+0x26>
 800242a:	2302      	movs	r3, #2
 800242c:	e04b      	b.n	80024c6 <HAL_ADC_Start+0xbe>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fcf4 	bl	8002e24 <ADC_Enable>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d137      	bne.n	80024b6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002466:	d106      	bne.n	8002476 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	f023 0206 	bic.w	r2, r3, #6
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002474:	e002      	b.n	800247c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	221c      	movs	r2, #28
 8002482:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fe22 	bl	80020f8 <LL_ADC_REG_StartConversion>
 80024b4:	e006      	b.n	80024c4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80024be:	e001      	b.n	80024c4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d102      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024e0:	2308      	movs	r3, #8
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e010      	b.n	8002508 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e06f      	b.n	80025e4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002504:	2304      	movs	r3, #4
 8002506:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002508:	f7ff fbc8 	bl	8001c9c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800250e:	e021      	b.n	8002554 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002516:	d01d      	beq.n	8002554 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002518:	f7ff fbc0 	bl	8001c9c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <HAL_ADC_PollForConversion+0x60>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d112      	bne.n	8002554 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e047      	b.n	80025e4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0d6      	beq.n	8002510 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fc96 	bl	8001ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7e5b      	ldrb	r3, [r3, #25]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d111      	bne.n	80025b8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d104      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2208      	movs	r2, #8
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e008      	b.n	80025e2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0b6      	sub	sp, #216	@ 0xd8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x22>
 8002626:	2302      	movs	r3, #2
 8002628:	e3e6      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x7f0>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd72 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 83cb 	bne.w	8002dda <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d009      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4ab0      	ldr	r2, [pc, #704]	@ (8002914 <HAL_ADC_ConfigChannel+0x30c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d109      	bne.n	800266a <HAL_ADC_ConfigChannel+0x62>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4aaf      	ldr	r2, [pc, #700]	@ (8002918 <HAL_ADC_ConfigChannel+0x310>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d104      	bne.n	800266a <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb6b 	bl	8001d40 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	f7ff fc27 	bl	8001eca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fd4d 	bl	8002120 <LL_ADC_REG_IsConversionOngoing>
 8002686:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fd59 	bl	8002146 <LL_ADC_INJ_IsConversionOngoing>
 8002694:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 81dd 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 81d8 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026b4:	d10f      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7ff fc2e 	bl	8001f22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fbd5 	bl	8001e7e <LL_ADC_SetSamplingTimeCommonConfig>
 80026d4:	e00e      	b.n	80026f4 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7ff fc1d 	bl	8001f22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fbc5 	bl	8001e7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d022      	beq.n	800275c <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002726:	f7ff fb1f 	bl	8001d68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6919      	ldr	r1, [r3, #16]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	461a      	mov	r2, r3
 8002738:	f7ff fb6b 	bl	8001e12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002748:	2b01      	cmp	r3, #1
 800274a:	d102      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x14a>
 800274c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002750:	e000      	b.n	8002754 <HAL_ADC_ConfigChannel+0x14c>
 8002752:	2300      	movs	r3, #0
 8002754:	461a      	mov	r2, r3
 8002756:	f7ff fb77 	bl	8001e48 <LL_ADC_SetOffsetSaturation>
 800275a:	e17f      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fb24 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x180>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fb19 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	e01e      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1be>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fb0e 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80027a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80027ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e004      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 80027ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_ADC_ConfigChannel+0x1d6>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	e018      	b.n	8002810 <HAL_ADC_ConfigChannel+0x208>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e004      	b.n	8002810 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8002806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fadd 	bl	8001ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fac1 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <HAL_ADC_ConfigChannel+0x246>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fab6 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	e01e      	b.n	800288c <HAL_ADC_ConfigChannel+0x284>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff faab 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800286c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e004      	b.n	800288a <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8002880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x29c>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x2ce>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e004      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 80028cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d106      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fa7a 	bl	8001ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fa5e 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10e      	bne.n	800291c <HAL_ADC_ConfigChannel+0x314>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2102      	movs	r1, #2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fa53 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	f003 021f 	and.w	r2, r3, #31
 8002912:	e022      	b.n	800295a <HAL_ADC_ConfigChannel+0x352>
 8002914:	04300002 	.word	0x04300002
 8002918:	407f0000 	.word	0x407f0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fa44 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800293a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800293e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002942:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e004      	b.n	8002958 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800294e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x36a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	e016      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x398>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002984:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e004      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8002996:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2102      	movs	r1, #2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fa15 	bl	8001ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f9f9 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x3d6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2103      	movs	r1, #3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f9ee 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	e017      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x406>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f9e3 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x41e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	e011      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x442>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8002a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d106      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f9c0 	bl	8001ddc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fb23 	bl	80020ac <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 813f 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff fa7c 	bl	8001f78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a8e      	ldr	r2, [pc, #568]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x6b8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	f040 8130 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x4ac>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e019      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x4e0>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ac4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d079      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x500>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b06:	e015      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x52c>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8002b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x54c>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x57c>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8002b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5a2>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x5d4>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	e080      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x5f4>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bfa:	e015      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x620>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x640>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	e017      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x670>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	61fb      	str	r3, [r7, #28]
  return result;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	ea42 0103 	orr.w	r1, r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x69c>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b1e      	subs	r3, #30
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	e01d      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x6d8>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  return result;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e005      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x6c4>
 8002cc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b1e      	subs	r3, #30
 8002cda:	051b      	lsls	r3, r3, #20
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7ff f91b 	bl	8001f22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_ADC_ConfigChannel+0x7f8>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d079      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf8:	4842      	ldr	r0, [pc, #264]	@ (8002e04 <HAL_ADC_ConfigChannel+0x7fc>)
 8002cfa:	f7ff f801 	bl	8001d00 <LL_ADC_GetCommonPathInternalCh>
 8002cfe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a40      	ldr	r2, [pc, #256]	@ (8002e08 <HAL_ADC_ConfigChannel+0x800>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d124      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11e      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e0c <HAL_ADC_ConfigChannel+0x804>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d164      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4835      	ldr	r0, [pc, #212]	@ (8002e04 <HAL_ADC_ConfigChannel+0x7fc>)
 8002d2e:	f7fe ffd4 	bl	8001cda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d32:	4b37      	ldr	r3, [pc, #220]	@ (8002e10 <HAL_ADC_ConfigChannel+0x808>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	4a36      	ldr	r2, [pc, #216]	@ (8002e14 <HAL_ADC_ConfigChannel+0x80c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	3301      	adds	r3, #1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d46:	e002      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f9      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d54:	e04a      	b.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e18 <HAL_ADC_ConfigChannel+0x810>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d113      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <HAL_ADC_ConfigChannel+0x804>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d13a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4820      	ldr	r0, [pc, #128]	@ (8002e04 <HAL_ADC_ConfigChannel+0x7fc>)
 8002d82:	f7fe ffaa 	bl	8001cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d86:	e031      	b.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	@ (8002e1c <HAL_ADC_ConfigChannel+0x814>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d113      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <HAL_ADC_ConfigChannel+0x804>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d121      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002db0:	4619      	mov	r1, r3
 8002db2:	4814      	ldr	r0, [pc, #80]	@ (8002e04 <HAL_ADC_ConfigChannel+0x7fc>)
 8002db4:	f7fe ff91 	bl	8001cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002db8:	e018      	b.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_ADC_ConfigChannel+0x818>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d113      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_ADC_ConfigChannel+0x804>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe ffa2 	bl	8001d1c <LL_ADC_EnableChannelVDDcore>
 8002dd8:	e008      	b.n	8002dec <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002df4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	37d8      	adds	r7, #216	@ 0xd8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	80080000 	.word	0x80080000
 8002e04:	42028300 	.word	0x42028300
 8002e08:	c3210000 	.word	0xc3210000
 8002e0c:	42028000 	.word	0x42028000
 8002e10:	20000000 	.word	0x20000000
 8002e14:	053e2d63 	.word	0x053e2d63
 8002e18:	88600004 	.word	0x88600004
 8002e1c:	c7520000 	.word	0xc7520000
 8002e20:	99200040 	.word	0x99200040

08002e24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f939 	bl	80020ac <LL_ADC_IsEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d166      	bne.n	8002f0e <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b34      	ldr	r3, [pc, #208]	@ (8002f18 <ADC_Enable+0xf4>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e052      	b.n	8002f10 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f8f4 	bl	800205c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e74:	4829      	ldr	r0, [pc, #164]	@ (8002f1c <ADC_Enable+0xf8>)
 8002e76:	f7fe ff43 	bl	8001d00 <LL_ADC_GetCommonPathInternalCh>
 8002e7a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <ADC_Enable+0xfc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	4a26      	ldr	r2, [pc, #152]	@ (8002f24 <ADC_Enable+0x100>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e98:	e002      	b.n	8002ea0 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ea6:	f7fe fef9 	bl	8001c9c <HAL_GetTick>
 8002eaa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eac:	e028      	b.n	8002f00 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff f8fa 	bl	80020ac <LL_ADC_IsEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f8ca 	bl	800205c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ec8:	f7fe fee8 	bl	8001c9c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d914      	bls.n	8002f00 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00d      	beq.n	8002f00 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e007      	b.n	8002f10 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d1cf      	bne.n	8002eae <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	8000003f 	.word	0x8000003f
 8002f1c:	42028300 	.word	0x42028300
 8002f20:	20000000 	.word	0x20000000
 8002f24:	053e2d63 	.word	0x053e2d63

08002f28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f8cc 	bl	80020d2 <LL_ADC_IsDisableOngoing>
 8002f3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f8b3 	bl	80020ac <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d047      	beq.n	8002fdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d144      	bne.n	8002fdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030d 	and.w	r3, r3, #13
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10c      	bne.n	8002f7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f88d 	bl	8002084 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f72:	f7fe fe93 	bl	8001c9c <HAL_GetTick>
 8002f76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f78:	e029      	b.n	8002fce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e023      	b.n	8002fde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f96:	f7fe fe81 	bl	8001c9c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d914      	bls.n	8002fce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	f043 0210 	orr.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1dc      	bne.n	8002f96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <LL_ADC_StartCalibration>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003002:	4313      	orrs	r3, r2
 8003004:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_ADC_IsCalibrationOnGoing>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800302c:	d101      	bne.n	8003032 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_ADCEx_Calibration_Start+0x1c>
 8003058:	2302      	movs	r3, #2
 800305a:	e04d      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff5f 	bl	8002f28 <ADC_Disable>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d136      	bne.n	80030e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800307c:	f023 0302 	bic.w	r3, r3, #2
 8003080:	f043 0202 	orr.w	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ffa9 	bl	8002fe6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003094:	e014      	b.n	80030c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3301      	adds	r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_ADCEx_Calibration_Start+0xc0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d30d      	bcc.n	80030c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	f023 0312 	bic.w	r3, r3, #18
 80030ac:	f043 0210 	orr.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01b      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ffa7 	bl	8003018 <LL_ADC_IsCalibrationOnGoing>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e2      	bne.n	8003096 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	f023 0303 	bic.w	r3, r3, #3
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	659a      	str	r2, [r3, #88]	@ 0x58
 80030e0:	e005      	b.n	80030ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	25c3f800 	.word	0x25c3f800

08003104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800312c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003150:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <__NVIC_GetPriorityGrouping+0x18>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0307 	and.w	r3, r3, #7
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	@ (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	@ (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	@ 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	@ 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff6a 	bl	8003104 <__NVIC_SetPriorityGrouping>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003246:	f7ff ff81 	bl	800314c <__NVIC_GetPriorityGrouping>
 800324a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	6978      	ldr	r0, [r7, #20]
 8003252:	f7ff ffb3 	bl	80031bc <NVIC_EncodePriority>
 8003256:	4602      	mov	r2, r0
 8003258:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff82 	bl	8003168 <__NVIC_SetPriority>
}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800327c:	d301      	bcc.n	8003282 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800327e:	2301      	movs	r3, #1
 8003280:	e00d      	b.n	800329e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <HAL_SYSTICK_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <HAL_SYSTICK_Config+0x40>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_SYSTICK_Config+0x40>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a05      	ldr	r2, [pc, #20]	@ (80032ac <HAL_SYSTICK_Config+0x40>)
 8003296:	f043 0303 	orr.w	r3, r3, #3
 800329a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d844      	bhi.n	8003348 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032e7 	.word	0x080032e7
 80032c8:	08003305 	.word	0x08003305
 80032cc:	08003327 	.word	0x08003327
 80032d0:	08003349 	.word	0x08003349
 80032d4:	080032d9 	.word	0x080032d9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6013      	str	r3, [r2, #0]
      break;
 80032e4:	e031      	b.n	800334a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80032e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80032f2:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032f8:	4a18      	ldr	r2, [pc, #96]	@ (800335c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032fa:	f023 030c 	bic.w	r3, r3, #12
 80032fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003302:	e022      	b.n	800334a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003304:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a13      	ldr	r2, [pc, #76]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003316:	f023 030c 	bic.w	r3, r3, #12
 800331a:	4a10      	ldr	r2, [pc, #64]	@ (800335c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003324:	e011      	b.n	800334a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0b      	ldr	r2, [pc, #44]	@ (8003358 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003338:	f023 030c 	bic.w	r3, r3, #12
 800333c:	4a07      	ldr	r2, [pc, #28]	@ (800335c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800333e:	f043 0308 	orr.w	r3, r3, #8
 8003342:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003346:	e000      	b.n	800334a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003348:	bf00      	nop
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010
 800335c:	44020c00 	.word	0x44020c00

08003360 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003366:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003372:	2304      	movs	r3, #4
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	e01e      	b.n	80033b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003378:	4b13      	ldr	r3, [pc, #76]	@ (80033c8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800337a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d00f      	beq.n	80033aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d80f      	bhi.n	80033b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d003      	beq.n	80033a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800339c:	e008      	b.n	80033b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
        break;
 80033a2:	e008      	b.n	80033b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80033a4:	2301      	movs	r3, #1
 80033a6:	607b      	str	r3, [r7, #4]
        break;
 80033a8:	e005      	b.n	80033b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80033aa:	2302      	movs	r3, #2
 80033ac:	607b      	str	r3, [r7, #4]
        break;
 80033ae:	e002      	b.n	80033b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80033b0:	2300      	movs	r3, #0
 80033b2:	607b      	str	r3, [r7, #4]
        break;
 80033b4:	bf00      	nop
    }
  }
  return systick_source;
 80033b6:	687b      	ldr	r3, [r7, #4]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e010 	.word	0xe000e010
 80033c8:	44020c00 	.word	0x44020c00

080033cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e147      	b.n	800366e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe f922 	bl	800163c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0210 	bic.w	r2, r2, #16
 8003406:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003408:	f7fe fc48 	bl	8001c9c <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800340e:	e012      	b.n	8003436 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003410:	f7fe fc44 	bl	8001c9c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b0a      	cmp	r3, #10
 800341c:	d90b      	bls.n	8003436 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2203      	movs	r2, #3
 800342e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e11b      	b.n	800366e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d0e5      	beq.n	8003410 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003454:	f7fe fc22 	bl	8001c9c <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800345a:	e012      	b.n	8003482 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800345c:	f7fe fc1e 	bl	8001c9c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b0a      	cmp	r3, #10
 8003468:	d90b      	bls.n	8003482 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0f5      	b.n	800366e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0e5      	beq.n	800345c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0202 	orr.w	r2, r2, #2
 800349e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a74      	ldr	r2, [pc, #464]	@ (8003678 <HAL_FDCAN_Init+0x2ac>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d103      	bne.n	80034b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80034aa:	4a74      	ldr	r2, [pc, #464]	@ (800367c <HAL_FDCAN_Init+0x2b0>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7c1b      	ldrb	r3, [r3, #16]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d108      	bne.n	80034cc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c8:	619a      	str	r2, [r3, #24]
 80034ca:	e007      	b.n	80034dc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7c5b      	ldrb	r3, [r3, #17]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d108      	bne.n	80034f6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f2:	619a      	str	r2, [r3, #24]
 80034f4:	e007      	b.n	8003506 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003504:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7c9b      	ldrb	r3, [r3, #18]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d108      	bne.n	8003520 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800351c:	619a      	str	r2, [r3, #24]
 800351e:	e007      	b.n	8003530 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800352e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003554:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0210 	bic.w	r2, r2, #16
 8003564:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d108      	bne.n	8003580 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0204 	orr.w	r2, r2, #4
 800357c:	619a      	str	r2, [r3, #24]
 800357e:	e02c      	b.n	80035da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d028      	beq.n	80035da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d01c      	beq.n	80035ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0210 	orr.w	r2, r2, #16
 80035ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d110      	bne.n	80035da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	619a      	str	r2, [r3, #24]
 80035c8:	e007      	b.n	80035da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0220 	orr.w	r2, r2, #32
 80035d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	3b01      	subs	r3, #1
 80035e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003602:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003604:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800360e:	d115      	bne.n	800363c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003614:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	3b01      	subs	r3, #1
 800361c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800361e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	3b01      	subs	r3, #1
 8003626:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003628:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	3b01      	subs	r3, #1
 8003632:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003638:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800363a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f814 	bl	8003680 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	4000a400 	.word	0x4000a400
 800367c:	4000a500 	.word	0x4000a500

08003680 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003688:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800368a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800369a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a2:	041a      	lsls	r2, r3, #16
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	061a      	lsls	r2, r3, #24
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e005      	b.n	800370e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3304      	adds	r3, #4
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d3f3      	bcc.n	8003702 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	4000ac00 	.word	0x4000ac00

0800372c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_FLASH_Unlock+0x40>)
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_FLASH_Unlock+0x40>)
 8003744:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_FLASH_Unlock+0x44>)
 8003746:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8003748:	4b08      	ldr	r3, [pc, #32]	@ (800376c <HAL_FLASH_Unlock+0x40>)
 800374a:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <HAL_FLASH_Unlock+0x48>)
 800374c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800374e:	4b07      	ldr	r3, [pc, #28]	@ (800376c <HAL_FLASH_Unlock+0x40>)
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800375e:	79fb      	ldrb	r3, [r7, #7]
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40022000 	.word	0x40022000
 8003770:	45670123 	.word	0x45670123
 8003774:	cdef89ab 	.word	0xcdef89ab

08003778 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_FLASH_Lock+0x34>)
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	4a09      	ldr	r2, [pc, #36]	@ (80037ac <HAL_FLASH_Lock+0x34>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 800378e:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <HAL_FLASH_Lock+0x34>)
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800379e:	79fb      	ldrb	r3, [r7, #7]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40022000 	.word	0x40022000

080037b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80037be:	e136      	b.n	8003a2e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8128 	beq.w	8003a28 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x38>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b12      	cmp	r3, #18
 80037e6:	d125      	bne.n	8003834 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	08da      	lsrs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4013      	ands	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f003 020f 	and.w	r2, r3, #15
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d00b      	beq.n	8003888 <HAL_GPIO_Init+0xd8>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d007      	beq.n	8003888 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800387c:	2b11      	cmp	r3, #17
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b12      	cmp	r3, #18
 8003886:	d130      	bne.n	80038ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	2203      	movs	r2, #3
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4013      	ands	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038be:	2201      	movs	r2, #1
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4013      	ands	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0201 	and.w	r2, r3, #1
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d017      	beq.n	8003922 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4013      	ands	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d07c      	beq.n	8003a28 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800392e:	4a47      	ldr	r2, [pc, #284]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3318      	adds	r3, #24
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4013      	ands	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0a9a      	lsrs	r2, r3, #10
 8003956:	4b3e      	ldr	r3, [pc, #248]	@ (8003a50 <HAL_GPIO_Init+0x2a0>)
 8003958:	4013      	ands	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	f002 0203 	and.w	r2, r2, #3
 8003960:	00d2      	lsls	r2, r2, #3
 8003962:	4093      	lsls	r3, r2
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800396a:	4938      	ldr	r1, [pc, #224]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	3318      	adds	r3, #24
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003978:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	43db      	mvns	r3, r3
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800399c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4013      	ands	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80039c6:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80039cc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 80039ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4013      	ands	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80039f2:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80039fa:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 80039fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <HAL_GPIO_Init+0x29c>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f aec1 	bne.w	80037c0 <HAL_GPIO_Init+0x10>
  }
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	44022000 	.word	0x44022000
 8003a50:	002f7f7f 	.word	0x002f7f7f

08003a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e001      	b.n	8003a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
 8003a90:	4613      	mov	r3, r2
 8003a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a94:	787b      	ldrb	r3, [r7, #1]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aa0:	e002      	b.n	8003aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e08d      	b.n	8003be2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fdf8 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	@ 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	e006      	b.n	8003b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d108      	bne.n	8003b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	e007      	b.n	8003b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69d9      	ldr	r1, [r3, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1a      	ldr	r2, [r3, #32]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d138      	bne.n	8003c72 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e032      	b.n	8003c74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2224      	movs	r2, #36	@ 0x24
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
  }
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d139      	bne.n	8003d0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e033      	b.n	8003d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	e007      	b.n	8003d46 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0204 	bic.w	r2, r3, #4
 8003d3e:	4905      	ldr	r1, [pc, #20]	@ (8003d54 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40030400 	.word	0x40030400

08003d58 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_ICACHE_Enable+0x1c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <HAL_ICACHE_Enable+0x1c>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40030400 	.word	0x40030400

08003d78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0f3      	b.n	8003f72 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fdc4 	bl	800192c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2203      	movs	r2, #3
 8003da8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f004 fb80 	bl	80084b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7c1a      	ldrb	r2, [r3, #16]
 8003dbe:	f88d 2000 	strb.w	r2, [sp]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc6:	f004 fb58 	bl	800847a <USB_CoreInit>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0ca      	b.n	8003f72 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 fb7c 	bl	80084e0 <USB_SetCurrentMode>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0bb      	b.n	8003f72 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	e03f      	b.n	8003e80 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3315      	adds	r3, #21
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	3314      	adds	r3, #20
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	440b      	add	r3, r1
 8003e36:	3317      	adds	r3, #23
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	440b      	add	r3, r1
 8003e4a:	3324      	adds	r3, #36	@ 0x24
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3328      	adds	r3, #40	@ 0x28
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	440b      	add	r3, r1
 8003e74:	3304      	adds	r3, #4
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	791b      	ldrb	r3, [r3, #4]
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3ba      	bcc.n	8003e00 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e044      	b.n	8003f1a <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	3301      	adds	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3b5      	bcc.n	8003e90 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7c1a      	ldrb	r2, [r3, #16]
 8003f2c:	f88d 2000 	strb.w	r2, [sp]
 8003f30:	3304      	adds	r3, #4
 8003f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f34:	f004 faf7 	bl	8008526 <USB_DevInit>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e013      	b.n	8003f72 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7b1b      	ldrb	r3, [r3, #12]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d102      	bne.n	8003f66 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f80a 	bl	8003f7a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f004 fafe 	bl	800856c <USB_DevDisconnect>

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	f043 0202 	orr.w	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f000 bc28 	b.w	8004824 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd4:	4b94      	ldr	r3, [pc, #592]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 0318 	and.w	r3, r3, #24
 8003fdc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003fde:	4b92      	ldr	r3, [pc, #584]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05b      	beq.n	80040ac <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d005      	beq.n	8004006 <HAL_RCC_OscConfig+0x46>
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	d114      	bne.n	800402a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d111      	bne.n	800402a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f000 bc08 	b.w	8004824 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004014:	4b84      	ldr	r3, [pc, #528]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	4981      	ldr	r1, [pc, #516]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004024:	4313      	orrs	r3, r2
 8004026:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004028:	e040      	b.n	80040ac <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d023      	beq.n	800407a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004032:	4b7d      	ldr	r3, [pc, #500]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a7c      	ldr	r2, [pc, #496]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd fe2d 	bl	8001c9c <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004046:	f7fd fe29 	bl	8001c9c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e3e5      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004058:	4b73      	ldr	r3, [pc, #460]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004064:	4b70      	ldr	r3, [pc, #448]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	496d      	ldr	r1, [pc, #436]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004074:	4313      	orrs	r3, r2
 8004076:	618b      	str	r3, [r1, #24]
 8004078:	e018      	b.n	80040ac <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800407a:	4b6b      	ldr	r3, [pc, #428]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6a      	ldr	r2, [pc, #424]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fd fe09 	bl	8001c9c <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800408e:	f7fd fe05 	bl	8001c9c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e3c1      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80040a0:	4b61      	ldr	r3, [pc, #388]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80a0 	beq.w	80041fa <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x10c>
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b18      	cmp	r3, #24
 80040c4:	d109      	bne.n	80040da <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 8092 	bne.w	80041fa <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e3a4      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x132>
 80040e4:	4b50      	ldr	r3, [pc, #320]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e058      	b.n	80041a4 <HAL_RCC_OscConfig+0x1e4>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d112      	bne.n	8004120 <HAL_RCC_OscConfig+0x160>
 80040fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b48      	ldr	r3, [pc, #288]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a47      	ldr	r2, [pc, #284]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800410c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b45      	ldr	r3, [pc, #276]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a44      	ldr	r2, [pc, #272]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e041      	b.n	80041a4 <HAL_RCC_OscConfig+0x1e4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004128:	d112      	bne.n	8004150 <HAL_RCC_OscConfig+0x190>
 800412a:	4b3f      	ldr	r3, [pc, #252]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3e      	ldr	r2, [pc, #248]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b3c      	ldr	r3, [pc, #240]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a3b      	ldr	r2, [pc, #236]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800413c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	4b39      	ldr	r3, [pc, #228]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a38      	ldr	r2, [pc, #224]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e029      	b.n	80041a4 <HAL_RCC_OscConfig+0x1e4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004158:	d112      	bne.n	8004180 <HAL_RCC_OscConfig+0x1c0>
 800415a:	4b33      	ldr	r3, [pc, #204]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a32      	ldr	r2, [pc, #200]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b30      	ldr	r3, [pc, #192]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2f      	ldr	r2, [pc, #188]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800416c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b2d      	ldr	r3, [pc, #180]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2c      	ldr	r2, [pc, #176]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e011      	b.n	80041a4 <HAL_RCC_OscConfig+0x1e4>
 8004180:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a28      	ldr	r2, [pc, #160]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a25      	ldr	r2, [pc, #148]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 8004192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b23      	ldr	r3, [pc, #140]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a22      	ldr	r2, [pc, #136]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 800419e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fd76 	bl	8001c9c <HAL_GetTick>
 80041b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80041b4:	f7fd fd72 	bl	8001c9c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e32e      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c6:	4b18      	ldr	r3, [pc, #96]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x1f4>
 80041d2:	e012      	b.n	80041fa <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd fd62 	bl	8001c9c <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80041dc:	f7fd fd5e 	bl	8001c9c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	@ 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e31a      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <HAL_RCC_OscConfig+0x268>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 809a 	beq.w	800433c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x25a>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b18      	cmp	r3, #24
 8004212:	d149      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d146      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e2fe      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
 8004226:	bf00      	nop
 8004228:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11c      	bne.n	800426c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004232:	4b9a      	ldr	r3, [pc, #616]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0218 	and.w	r2, r3, #24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	d014      	beq.n	800426c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004242:	4b96      	ldr	r3, [pc, #600]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 0218 	bic.w	r2, r3, #24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	4993      	ldr	r1, [pc, #588]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004254:	f000 fdd0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004258:	4b91      	ldr	r3, [pc, #580]	@ (80044a0 <HAL_RCC_OscConfig+0x4e0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fd fc93 	bl	8001b88 <HAL_InitTick>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e2db      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fd16 	bl	8001c9c <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004274:	f7fd fd12 	bl	8001c9c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e2ce      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004286:	4b85      	ldr	r3, [pc, #532]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004292:	4b82      	ldr	r3, [pc, #520]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	497e      	ldr	r1, [pc, #504]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80042a6:	e049      	b.n	800433c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02c      	beq.n	800430a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80042b0:	4b7a      	ldr	r3, [pc, #488]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 0218 	bic.w	r2, r3, #24
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	4977      	ldr	r1, [pc, #476]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80042c2:	4b76      	ldr	r3, [pc, #472]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a75      	ldr	r2, [pc, #468]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fd fce5 	bl	8001c9c <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042d6:	f7fd fce1 	bl	8001c9c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e29d      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e8:	4b6c      	ldr	r3, [pc, #432]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80042f4:	4b69      	ldr	r3, [pc, #420]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	4966      	ldr	r1, [pc, #408]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	610b      	str	r3, [r1, #16]
 8004308:	e018      	b.n	800433c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b64      	ldr	r3, [pc, #400]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a63      	ldr	r2, [pc, #396]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fd fcc1 	bl	8001c9c <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800431e:	f7fd fcbd 	bl	8001c9c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e279      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004330:	4b5a      	ldr	r3, [pc, #360]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d03c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01c      	beq.n	800438a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004350:	4b52      	ldr	r3, [pc, #328]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004356:	4a51      	ldr	r2, [pc, #324]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004358:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800435c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd fc9c 	bl	8001c9c <HAL_GetTick>
 8004364:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004368:	f7fd fc98 	bl	8001c9c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e254      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800437a:	4b48      	ldr	r3, [pc, #288]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800437c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ef      	beq.n	8004368 <HAL_RCC_OscConfig+0x3a8>
 8004388:	e01b      	b.n	80043c2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438a:	4b44      	ldr	r3, [pc, #272]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800438c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004390:	4a42      	ldr	r2, [pc, #264]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fd fc7f 	bl	8001c9c <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80043a2:	f7fd fc7b 	bl	8001c9c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e237      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043b4:	4b39      	ldr	r3, [pc, #228]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 80043b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ef      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80d2 	beq.w	8004574 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043d0:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCC_OscConfig+0x4e4>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d118      	bne.n	800440e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_OscConfig+0x4e4>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_RCC_OscConfig+0x4e4>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e8:	f7fd fc58 	bl	8001c9c <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f0:	f7fd fc54 	bl	8001c9c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e210      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004402:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCC_OscConfig+0x4e4>)
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d108      	bne.n	8004428 <HAL_RCC_OscConfig+0x468>
 8004416:	4b21      	ldr	r3, [pc, #132]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441c:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004426:	e074      	b.n	8004512 <HAL_RCC_OscConfig+0x552>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d118      	bne.n	8004462 <HAL_RCC_OscConfig+0x4a2>
 8004430:	4b1a      	ldr	r3, [pc, #104]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004436:	4a19      	ldr	r2, [pc, #100]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004440:	4b16      	ldr	r3, [pc, #88]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004446:	4a15      	ldr	r2, [pc, #84]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004450:	4b12      	ldr	r3, [pc, #72]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004456:	4a11      	ldr	r2, [pc, #68]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004458:	f023 0304 	bic.w	r3, r3, #4
 800445c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004460:	e057      	b.n	8004512 <HAL_RCC_OscConfig+0x552>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b05      	cmp	r3, #5
 8004468:	d11e      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4e8>
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800446c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004470:	4a0a      	ldr	r2, [pc, #40]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800447a:	4b08      	ldr	r3, [pc, #32]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800447c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004480:	4a06      	ldr	r2, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004486:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800448a:	4b04      	ldr	r3, [pc, #16]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 800448c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004490:	4a02      	ldr	r2, [pc, #8]	@ (800449c <HAL_RCC_OscConfig+0x4dc>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800449a:	e03a      	b.n	8004512 <HAL_RCC_OscConfig+0x552>
 800449c:	44020c00 	.word	0x44020c00
 80044a0:	20000004 	.word	0x20000004
 80044a4:	44020800 	.word	0x44020800
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b85      	cmp	r3, #133	@ 0x85
 80044ae:	d118      	bne.n	80044e2 <HAL_RCC_OscConfig+0x522>
 80044b0:	4ba2      	ldr	r3, [pc, #648]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b6:	4aa1      	ldr	r2, [pc, #644]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044c0:	4b9e      	ldr	r3, [pc, #632]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c6:	4a9d      	ldr	r2, [pc, #628]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044d0:	4b9a      	ldr	r3, [pc, #616]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d6:	4a99      	ldr	r2, [pc, #612]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044e0:	e017      	b.n	8004512 <HAL_RCC_OscConfig+0x552>
 80044e2:	4b96      	ldr	r3, [pc, #600]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e8:	4a94      	ldr	r2, [pc, #592]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044f2:	4b92      	ldr	r3, [pc, #584]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f8:	4a90      	ldr	r2, [pc, #576]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80044fa:	f023 0304 	bic.w	r3, r3, #4
 80044fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004502:	4b8e      	ldr	r3, [pc, #568]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004508:	4a8c      	ldr	r2, [pc, #560]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800450a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800450e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fd fbbf 	bl	8001c9c <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fd fbbb 	bl	8001c9c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e175      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004538:	4b80      	ldr	r3, [pc, #512]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800453a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0ed      	beq.n	8004522 <HAL_RCC_OscConfig+0x562>
 8004546:	e015      	b.n	8004574 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fba8 	bl	8001c9c <HAL_GetTick>
 800454c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fd fba4 	bl	8001c9c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e15e      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004566:	4b75      	ldr	r3, [pc, #468]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ed      	bne.n	8004550 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d036      	beq.n	80045ee <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004588:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6b      	ldr	r2, [pc, #428]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800458e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fb82 	bl	8001c9c <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800459c:	f7fd fb7e 	bl	8001c9c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e13a      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045ae:	4b63      	ldr	r3, [pc, #396]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x5dc>
 80045ba:	e018      	b.n	80045ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045bc:	4b5f      	ldr	r3, [pc, #380]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5e      	ldr	r2, [pc, #376]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80045c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fd fb68 	bl	8001c9c <HAL_GetTick>
 80045cc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80045d0:	f7fd fb64 	bl	8001c9c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e120      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045e2:	4b56      	ldr	r3, [pc, #344]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8115 	beq.w	8004822 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b18      	cmp	r3, #24
 80045fc:	f000 80af 	beq.w	800475e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	2b02      	cmp	r3, #2
 8004606:	f040 8086 	bne.w	8004716 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800460a:	4b4c      	ldr	r3, [pc, #304]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4b      	ldr	r2, [pc, #300]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fd fb41 	bl	8001c9c <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800461e:	f7fd fb3d 	bl	8001c9c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0f9      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004630:	4b42      	ldr	r3, [pc, #264]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800463c:	4b3f      	ldr	r3, [pc, #252]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004644:	f023 0303 	bic.w	r3, r3, #3
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004650:	0212      	lsls	r2, r2, #8
 8004652:	430a      	orrs	r2, r1
 8004654:	4939      	ldr	r1, [pc, #228]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	628b      	str	r3, [r1, #40]	@ 0x28
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465e:	3b01      	subs	r3, #1
 8004660:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	3b01      	subs	r3, #1
 800466a:	025b      	lsls	r3, r3, #9
 800466c:	b29b      	uxth	r3, r3
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004674:	3b01      	subs	r3, #1
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	3b01      	subs	r3, #1
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800468a:	492c      	ldr	r1, [pc, #176]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004690:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	4a29      	ldr	r2, [pc, #164]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004696:	f023 0310 	bic.w	r3, r3, #16
 800469a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a0:	4a26      	ldr	r2, [pc, #152]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80046a6:	4b25      	ldr	r3, [pc, #148]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	4a24      	ldr	r2, [pc, #144]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046ac:	f043 0310 	orr.w	r3, r3, #16
 80046b0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80046b2:	4b22      	ldr	r3, [pc, #136]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	f023 020c 	bic.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	491f      	ldr	r1, [pc, #124]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80046c4:	4b1d      	ldr	r3, [pc, #116]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	f023 0220 	bic.w	r2, r3, #32
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	491a      	ldr	r1, [pc, #104]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80046e2:	4b16      	ldr	r3, [pc, #88]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 80046e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fd fad5 	bl	8001c9c <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80046f6:	f7fd fad1 	bl	8001c9c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e08d      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x736>
 8004714:	e085      	b.n	8004822 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a08      	ldr	r2, [pc, #32]	@ (800473c <HAL_RCC_OscConfig+0x77c>)
 800471c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fd fabb 	bl	8001c9c <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800472a:	f7fd fab7 	bl	8001c9c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d903      	bls.n	8004740 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e073      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
 800473c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004740:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ee      	bne.n	800472a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800474c:	4b37      	ldr	r3, [pc, #220]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	4a36      	ldr	r2, [pc, #216]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 8004752:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	6293      	str	r3, [r2, #40]	@ 0x28
 800475c:	e061      	b.n	8004822 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800475e:	4b33      	ldr	r3, [pc, #204]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004764:	4b31      	ldr	r3, [pc, #196]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 8004766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004768:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	2b01      	cmp	r3, #1
 8004770:	d031      	beq.n	80047d6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f003 0203 	and.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d12a      	bne.n	80047d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d122      	bne.n	80047d6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d11a      	bne.n	80047d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	0a5b      	lsrs	r3, r3, #9
 80047a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d111      	bne.n	80047d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d108      	bne.n	80047d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e024      	b.n	8004824 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80047da:	4b14      	ldr	r3, [pc, #80]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d01a      	beq.n	8004822 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	4a0e      	ldr	r2, [pc, #56]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fa50 	bl	8001c9c <HAL_GetTick>
 80047fc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80047fe:	bf00      	nop
 8004800:	f7fd fa4c 	bl	8001c9c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4293      	cmp	r3, r2
 800480a:	d0f9      	beq.n	8004800 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004810:	4a06      	ldr	r2, [pc, #24]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	4a04      	ldr	r2, [pc, #16]	@ (800482c <HAL_RCC_OscConfig+0x86c>)
 800481c:	f043 0310 	orr.w	r3, r3, #16
 8004820:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	44020c00 	.word	0x44020c00

08004830 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e19e      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004844:	4b83      	ldr	r3, [pc, #524]	@ (8004a54 <HAL_RCC_ClockConfig+0x224>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d910      	bls.n	8004874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b80      	ldr	r3, [pc, #512]	@ (8004a54 <HAL_RCC_ClockConfig+0x224>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 020f 	bic.w	r2, r3, #15
 800485a:	497e      	ldr	r1, [pc, #504]	@ (8004a54 <HAL_RCC_ClockConfig+0x224>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b7c      	ldr	r3, [pc, #496]	@ (8004a54 <HAL_RCC_ClockConfig+0x224>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e186      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	4b74      	ldr	r3, [pc, #464]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800488e:	429a      	cmp	r2, r3
 8004890:	d909      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004892:	4b71      	ldr	r3, [pc, #452]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	496d      	ldr	r1, [pc, #436]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	4b68      	ldr	r3, [pc, #416]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d909      	bls.n	80048d8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80048c4:	4b64      	ldr	r3, [pc, #400]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	4961      	ldr	r1, [pc, #388]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d908      	bls.n	8004906 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80048f4:	4b58      	ldr	r3, [pc, #352]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4955      	ldr	r1, [pc, #340]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004902:	4313      	orrs	r3, r2
 8004904:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d010      	beq.n	8004934 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	4b50      	ldr	r3, [pc, #320]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	429a      	cmp	r2, r3
 8004920:	d908      	bls.n	8004934 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004922:	4b4d      	ldr	r3, [pc, #308]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 020f 	bic.w	r2, r3, #15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	494a      	ldr	r1, [pc, #296]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004930:	4313      	orrs	r3, r2
 8004932:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8093 	beq.w	8004a68 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800494a:	4b43      	ldr	r3, [pc, #268]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d121      	bne.n	800499a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e113      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004962:	4b3d      	ldr	r3, [pc, #244]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d115      	bne.n	800499a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e107      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800497a:	4b37      	ldr	r3, [pc, #220]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0fb      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800498a:	4b33      	ldr	r3, [pc, #204]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0f3      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800499a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	492c      	ldr	r1, [pc, #176]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd f976 	bl	8001c9c <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fd f96e 	bl	8001c9c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0d7      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d2:	4b21      	ldr	r3, [pc, #132]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0318 	and.w	r3, r3, #24
 80049da:	2b18      	cmp	r3, #24
 80049dc:	d1ee      	bne.n	80049bc <HAL_RCC_ClockConfig+0x18c>
 80049de:	e043      	b.n	8004a68 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d112      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049ea:	f7fd f957 	bl	8001c9c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e0c0      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a00:	4b15      	ldr	r3, [pc, #84]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 0318 	and.w	r3, r3, #24
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d1ee      	bne.n	80049ea <HAL_RCC_ClockConfig+0x1ba>
 8004a0c:	e02c      	b.n	8004a68 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d122      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fd f940 	bl	8001c9c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0a9      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x228>)
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f003 0318 	and.w	r3, r3, #24
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x1e8>
 8004a3a:	e015      	b.n	8004a68 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fd f92e 	bl	8001c9c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d906      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e097      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
 8004a52:	bf00      	nop
 8004a54:	40022000 	.word	0x40022000
 8004a58:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f003 0318 	and.w	r3, r3, #24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e9      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4b44      	ldr	r3, [pc, #272]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d208      	bcs.n	8004a96 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004a84:	4b41      	ldr	r3, [pc, #260]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f023 020f 	bic.w	r2, r3, #15
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	493e      	ldr	r1, [pc, #248]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a96:	4b3e      	ldr	r3, [pc, #248]	@ (8004b90 <HAL_RCC_ClockConfig+0x360>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d210      	bcs.n	8004ac6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004b90 <HAL_RCC_ClockConfig+0x360>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 020f 	bic.w	r2, r3, #15
 8004aac:	4938      	ldr	r1, [pc, #224]	@ (8004b90 <HAL_RCC_ClockConfig+0x360>)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab4:	4b36      	ldr	r3, [pc, #216]	@ (8004b90 <HAL_RCC_ClockConfig+0x360>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e05d      	b.n	8004b82 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d010      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d208      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4927      	ldr	r1, [pc, #156]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	4b21      	ldr	r3, [pc, #132]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d209      	bcs.n	8004b26 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004b12:	4b1e      	ldr	r3, [pc, #120]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	491a      	ldr	r1, [pc, #104]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d209      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	490e      	ldr	r1, [pc, #56]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b58:	f000 f822 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	490b      	ldr	r1, [pc, #44]	@ (8004b94 <HAL_RCC_ClockConfig+0x364>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b98 <HAL_RCC_ClockConfig+0x368>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b72:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <HAL_RCC_ClockConfig+0x36c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd f806 	bl	8001b88 <HAL_InitTick>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004b80:	7afb      	ldrb	r3, [r7, #11]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	44020c00 	.word	0x44020c00
 8004b90:	40022000 	.word	0x40022000
 8004b94:	08008600 	.word	0x08008600
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	20000004 	.word	0x20000004

08004ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b089      	sub	sp, #36	@ 0x24
 8004ba4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004ba6:	4b8c      	ldr	r3, [pc, #560]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0318 	and.w	r3, r3, #24
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x23c>)
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e107      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb8:	4b87      	ldr	r3, [pc, #540]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f003 0318 	and.w	r3, r3, #24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d112      	bne.n	8004bea <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004bc4:	4b84      	ldr	r3, [pc, #528]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bd0:	4b81      	ldr	r3, [pc, #516]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	08db      	lsrs	r3, r3, #3
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	4a81      	ldr	r2, [pc, #516]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e0f1      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004be4:	4b7e      	ldr	r3, [pc, #504]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	e0ee      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bea:	4b7b      	ldr	r3, [pc, #492]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0318 	and.w	r3, r3, #24
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d102      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0x244>)
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	e0e5      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bfc:	4b76      	ldr	r3, [pc, #472]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f003 0318 	and.w	r3, r3, #24
 8004c04:	2b18      	cmp	r3, #24
 8004c06:	f040 80dd 	bne.w	8004dc4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004c0a:	4b73      	ldr	r3, [pc, #460]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004c14:	4b70      	ldr	r3, [pc, #448]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004c20:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c44:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80b7 	beq.w	8004dbe <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0xbe>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d056      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x16a>
 8004c5c:	e077      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02d      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	08db      	lsrs	r3, r3, #3
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	4a5a      	ldr	r2, [pc, #360]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c94:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ca4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ca8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004de8 <HAL_RCC_GetSysClockFreq+0x248>
 8004cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004cc4:	e065      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004dec <HAL_RCC_GetSysClockFreq+0x24c>
 8004cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cec:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004de8 <HAL_RCC_GetSysClockFreq+0x248>
 8004cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d04:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004d08:	e043      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d14:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004df0 <HAL_RCC_GetSysClockFreq+0x250>
 8004d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d30:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004de8 <HAL_RCC_GetSysClockFreq+0x248>
 8004d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d48:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004d4c:	e021      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d58:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004df4 <HAL_RCC_GetSysClockFreq+0x254>
 8004d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d60:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d70:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d74:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004de8 <HAL_RCC_GetSysClockFreq+0x248>
 8004d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004d90:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004d92:	4b11      	ldr	r3, [pc, #68]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d96:	0a5b      	lsrs	r3, r3, #9
 8004d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004daa:	edd7 6a06 	vldr	s13, [r7, #24]
 8004dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db6:	ee17 3a90 	vmov	r3, s15
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004dc6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3724      	adds	r7, #36	@ 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	44020c00 	.word	0x44020c00
 8004ddc:	003d0900 	.word	0x003d0900
 8004de0:	03d09000 	.word	0x03d09000
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	46000000 	.word	0x46000000
 8004dec:	4c742400 	.word	0x4c742400
 8004df0:	4b742400 	.word	0x4b742400
 8004df4:	4a742400 	.word	0x4a742400

08004df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004dfc:	f7ff fed0 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b08      	ldr	r3, [pc, #32]	@ (8004e24 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004e06:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e0a:	4907      	ldr	r1, [pc, #28]	@ (8004e28 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e0c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004e0e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x34>)
 8004e18:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004e1a:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x34>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	44020c00 	.word	0x44020c00
 8004e28:	08008600 	.word	0x08008600
 8004e2c:	20000000 	.word	0x20000000

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004e34:	f7ff ffe0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4904      	ldr	r1, [pc, #16]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	44020c00 	.word	0x44020c00
 8004e58:	08008610 	.word	0x08008610

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004e60:	f7ff ffca 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	@ (8004e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	44020c00 	.word	0x44020c00
 8004e84:	08008610 	.word	0x08008610

08004e88 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004e8c:	f7ff ffb4 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_RCC_GetPCLK3Freq+0x24>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	0b1b      	lsrs	r3, r3, #12
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4904      	ldr	r1, [pc, #16]	@ (8004eb0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	44020c00 	.word	0x44020c00
 8004eb0:	08008610 	.word	0x08008610

08004eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b0aa      	sub	sp, #168	@ 0xa8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004ed8:	2500      	movs	r5, #0
 8004eda:	ea54 0305 	orrs.w	r3, r4, r5
 8004ede:	d00b      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004ee0:	4bb8      	ldr	r3, [pc, #736]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef0:	4ab4      	ldr	r2, [pc, #720]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f002 0801 	and.w	r8, r2, #1
 8004f04:	f04f 0900 	mov.w	r9, #0
 8004f08:	ea58 0309 	orrs.w	r3, r8, r9
 8004f0c:	d038      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d819      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f18:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f55 	.word	0x08004f55
 8004f24:	08004f39 	.word	0x08004f39
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f55 	.word	0x08004f55
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f55 	.word	0x08004f55
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fff2 	bl	8006f28 <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004f4a:	e004      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8004f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f56:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004f5e:	4b99      	ldr	r3, [pc, #612]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f64:	f023 0107 	bic.w	r1, r3, #7
 8004f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6e:	4a95      	ldr	r2, [pc, #596]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f70:	430b      	orrs	r3, r1
 8004f72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f76:	e003      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f7c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f002 0a02 	and.w	sl, r2, #2
 8004f8c:	f04f 0b00 	mov.w	fp, #0
 8004f90:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f94:	d03c      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	2b28      	cmp	r3, #40	@ 0x28
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004fa0:	2b28      	cmp	r3, #40	@ 0x28
 8004fa2:	d815      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d019      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d811      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004fac:	2b18      	cmp	r3, #24
 8004fae:	d017      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004fb0:	2b18      	cmp	r3, #24
 8004fb2:	d80d      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 ffb0 	bl	8006f28 <RCCEx_PLL2_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004fd6:	e006      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004fd8:	bf00      	nop
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004fdc:	bf00      	nop
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004fe0:	bf00      	nop
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10c      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004fee:	4b75      	ldr	r3, [pc, #468]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ff4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	4a71      	ldr	r2, [pc, #452]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005000:	430b      	orrs	r3, r1
 8005002:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800500c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005010:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f002 0304 	and.w	r3, r2, #4
 800501c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005020:	2300      	movs	r3, #0
 8005022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005026:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800502a:	460b      	mov	r3, r1
 800502c:	4313      	orrs	r3, r2
 800502e:	d040      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005030:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800503a:	d01e      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800503c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005040:	d817      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005046:	d01a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8005048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800504c:	d811      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800504e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005050:	d017      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005052:	2bc0      	cmp	r3, #192	@ 0xc0
 8005054:	d80d      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d015      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d109      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800505e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005062:	3308      	adds	r3, #8
 8005064:	4618      	mov	r0, r3
 8005066:	f001 ff5f 	bl	8006f28 <RCCEx_PLL2_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005070:	e00a      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800507a:	bf00      	nop
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005088:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10c      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005090:	4b4c      	ldr	r3, [pc, #304]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005096:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800509a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	4a48      	ldr	r2, [pc, #288]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050a2:	430b      	orrs	r3, r1
 80050a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050a8:	e003      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050ae:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80050be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80050cc:	460b      	mov	r3, r1
 80050ce:	4313      	orrs	r3, r2
 80050d0:	d043      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80050d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050dc:	d021      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80050de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050e2:	d81a      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80050e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e8:	d01d      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80050ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050ee:	d814      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80050f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050f4:	d019      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80050f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050fa:	d80e      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d016      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8005100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005104:	d109      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005106:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800510a:	3308      	adds	r3, #8
 800510c:	4618      	mov	r0, r3
 800510e:	f001 ff0b 	bl	8006f28 <RCCEx_PLL2_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005118:	e00a      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005120:	e006      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800512e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005130:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005138:	4b22      	ldr	r3, [pc, #136]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800513a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800513e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005142:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800514a:	430b      	orrs	r3, r1
 800514c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005150:	e003      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005156:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005166:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005168:	2300      	movs	r3, #0
 800516a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800516c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d03e      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005176:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800517a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005180:	d01b      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005182:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005186:	d814      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800518c:	d017      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800518e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005192:	d80e      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d017      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d109      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800519e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051a2:	3308      	adds	r3, #8
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 febf 	bl	8006f28 <RCCEx_PLL2_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80051b0:	e00b      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80051b8:	e007      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80051ba:	bf00      	nop
 80051bc:	e005      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80051be:	bf00      	nop
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x316>
 80051c2:	bf00      	nop
 80051c4:	44020c00 	.word	0x44020c00
        break;
 80051c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80051d2:	4ba5      	ldr	r3, [pc, #660]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80051d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051d8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80051dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	4aa1      	ldr	r2, [pc, #644]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005200:	673b      	str	r3, [r7, #112]	@ 0x70
 8005202:	2300      	movs	r3, #0
 8005204:	677b      	str	r3, [r7, #116]	@ 0x74
 8005206:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d03b      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005210:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005216:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800521a:	d01b      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800521c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005220:	d814      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005222:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005226:	d017      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005228:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800522c:	d80e      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d014      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8005232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005236:	d109      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800523c:	3308      	adds	r3, #8
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fe72 	bl	8006f28 <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800524a:	e008      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005252:	e004      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800525c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10c      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005266:	4b80      	ldr	r3, [pc, #512]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800526c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005270:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005276:	4a7c      	ldr	r2, [pc, #496]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005278:	430b      	orrs	r3, r1
 800527a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005284:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005288:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005296:	2300      	movs	r3, #0
 8005298:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800529a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d033      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80052a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ae:	d015      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80052b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052b4:	d80e      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80052ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052be:	d109      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052c4:	3308      	adds	r3, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 fe2e 	bl	8006f28 <RCCEx_PLL2_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80052d2:	e006      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052da:	e002      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80052e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80052ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80052ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80052f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005308:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800530c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	2100      	movs	r1, #0
 8005316:	6639      	str	r1, [r7, #96]	@ 0x60
 8005318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800531c:	667b      	str	r3, [r7, #100]	@ 0x64
 800531e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d033      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005332:	d015      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005334:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005338:	d80e      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800533e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005342:	d109      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005344:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005348:	3308      	adds	r3, #8
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fdec 	bl	8006f28 <RCCEx_PLL2_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005356:	e006      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800535e:	e002      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005364:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005366:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800536e:	4b3e      	ldr	r3, [pc, #248]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005374:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800537c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800537e:	4a3a      	ldr	r2, [pc, #232]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005380:	430b      	orrs	r3, r1
 8005382:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800538c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005390:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	2100      	movs	r1, #0
 800539a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800539c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80053ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053b6:	61d3      	str	r3, [r2, #28]
 80053b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053ba:	69d9      	ldr	r1, [r3, #28]
 80053bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c4:	4a28      	ldr	r2, [pc, #160]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053c6:	430b      	orrs	r3, r1
 80053c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80053d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d8:	2300      	movs	r3, #0
 80053da:	657b      	str	r3, [r7, #84]	@ 0x54
 80053dc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80053e0:	460b      	mov	r3, r1
 80053e2:	4313      	orrs	r3, r2
 80053e4:	d046      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80053e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80053f0:	d021      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80053f2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80053f6:	d81a      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fc:	d01d      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005402:	d814      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005408:	d019      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800540a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800540e:	d80e      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d016      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800541a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800541e:	3308      	adds	r3, #8
 8005420:	4618      	mov	r0, r3
 8005422:	f001 fd81 	bl	8006f28 <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800542c:	e00a      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005436:	bf00      	nop
 8005438:	e004      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005444:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10f      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800544c:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800544e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005452:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005456:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	4a02      	ldr	r2, [pc, #8]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800545e:	430b      	orrs	r3, r1
 8005460:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005466:	bf00      	nop
 8005468:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005470:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005474:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005482:	2300      	movs	r3, #0
 8005484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005486:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800548a:	460b      	mov	r3, r1
 800548c:	4313      	orrs	r3, r2
 800548e:	d043      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005490:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800549a:	d021      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800549c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054a0:	d81a      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80054a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a6:	d01d      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80054a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ac:	d814      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80054ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054b2:	d019      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80054b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054b8:	d80e      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x638>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c2:	d109      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054c8:	3308      	adds	r3, #8
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fd2c 	bl	8006f28 <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80054d6:	e00a      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80054de:	e006      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80054e0:	bf00      	nop
 80054e2:	e004      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80054ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80054f6:	4bb6      	ldr	r3, [pc, #728]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80054f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005500:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	4ab2      	ldr	r2, [pc, #712]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005508:	430b      	orrs	r3, r1
 800550a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005514:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005518:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005524:	643b      	str	r3, [r7, #64]	@ 0x40
 8005526:	2300      	movs	r3, #0
 8005528:	647b      	str	r3, [r7, #68]	@ 0x44
 800552a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d030      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800553a:	2b05      	cmp	r3, #5
 800553c:	d80f      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800553e:	2b03      	cmp	r3, #3
 8005540:	d211      	bcs.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8005542:	2b01      	cmp	r3, #1
 8005544:	d911      	bls.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005546:	2b02      	cmp	r3, #2
 8005548:	d109      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800554a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800554e:	3308      	adds	r3, #8
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fce9 	bl	8006f28 <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800555c:	e006      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005564:	e002      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800556a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10c      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005574:	4b96      	ldr	r3, [pc, #600]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800557a:	f023 0107 	bic.w	r1, r3, #7
 800557e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005584:	4a92      	ldr	r2, [pc, #584]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005586:	430b      	orrs	r3, r1
 8005588:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800558c:	e003      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005592:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005596:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	2100      	movs	r1, #0
 80055a0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d022      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80055b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d005      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055c6:	e002      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80055cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80055d6:	4b7e      	ldr	r3, [pc, #504]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80055d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055dc:	f023 0108 	bic.w	r1, r3, #8
 80055e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e6:	4a7a      	ldr	r2, [pc, #488]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80055ee:	e003      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005604:	633b      	str	r3, [r7, #48]	@ 0x30
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
 800560a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	f000 80b0 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005616:	4b6f      	ldr	r3, [pc, #444]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	4a6e      	ldr	r2, [pc, #440]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005622:	f7fc fb3b 	bl	8001c9c <HAL_GetTick>
 8005626:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800562a:	e00b      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562c:	f7fc fb36 	bl	8001c9c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d903      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005642:	e005      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005644:	4b63      	ldr	r3, [pc, #396]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ed      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8005650:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005654:	2b00      	cmp	r3, #0
 8005656:	f040 808a 	bne.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800565a:	4b5d      	ldr	r3, [pc, #372]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800565c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d022      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8005670:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005676:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800567a:	429a      	cmp	r2, r3
 800567c:	d01b      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800567e:	4b54      	ldr	r3, [pc, #336]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800568c:	4b50      	ldr	r3, [pc, #320]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800568e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005692:	4a4f      	ldr	r2, [pc, #316]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005698:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800569c:	4b4c      	ldr	r3, [pc, #304]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800569e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a2:	4a4b      	ldr	r2, [pc, #300]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056ac:	4a48      	ldr	r2, [pc, #288]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d019      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fc faeb 	bl	8001c9c <HAL_GetTick>
 80056c6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ca:	e00d      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fc fae6 	bl	8001c9c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d903      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e8:	4b39      	ldr	r3, [pc, #228]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ea      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80056f6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d132      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80056fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570c:	d10f      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800570e:	4b30      	ldr	r3, [pc, #192]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005716:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800571a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005722:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005726:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005728:	430b      	orrs	r3, r1
 800572a:	61d3      	str	r3, [r2, #28]
 800572c:	e005      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x886>
 800572e:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4a27      	ldr	r2, [pc, #156]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005734:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005738:	61d3      	str	r3, [r2, #28]
 800573a:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800573c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005740:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005746:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800574a:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800574c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005750:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575a:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800575c:	430b      	orrs	r3, r1
 800575e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005762:	e008      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005764:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005768:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800576c:	e003      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005772:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005776:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005784:	2300      	movs	r3, #0
 8005786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005788:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800578c:	460b      	mov	r3, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	d038      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005792:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d014      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800579c:	2b30      	cmp	r3, #48	@ 0x30
 800579e:	d80e      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d012      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x916>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d80a      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d106      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b0:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	4a06      	ldr	r2, [pc, #24]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ba:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80057bc:	e00d      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80057c4:	e009      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80057c6:	bf00      	nop
 80057c8:	e007      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80057ca:	bf00      	nop
 80057cc:	e005      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x926>
 80057ce:	bf00      	nop
 80057d0:	44020c00 	.word	0x44020c00
 80057d4:	44020800 	.word	0x44020800
        break;
 80057d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80057e2:	4bb5      	ldr	r3, [pc, #724]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80057e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f2:	49b1      	ldr	r1, [pc, #708]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005800:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d03c      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005820:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	2b04      	cmp	r3, #4
 8005828:	d81d      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005845 	.word	0x08005845
 8005834:	08005853 	.word	0x08005853
 8005838:	08005867 	.word	0x08005867
 800583c:	0800586f 	.word	0x0800586f
 8005840:	0800586f 	.word	0x0800586f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005844:	4b9c      	ldr	r3, [pc, #624]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	4a9b      	ldr	r2, [pc, #620]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800584a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005850:	e00e      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005856:	3308      	adds	r3, #8
 8005858:	4618      	mov	r0, r3
 800585a:	f001 fb65 	bl	8006f28 <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005864:	e004      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800586e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005870:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005878:	4b8f      	ldr	r3, [pc, #572]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800587a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005888:	498b      	ldr	r1, [pc, #556]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005892:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005896:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800589a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058b0:	460b      	mov	r3, r1
 80058b2:	4313      	orrs	r3, r2
 80058b4:	d03c      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80058b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d01f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d819      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80058c4:	2b18      	cmp	r3, #24
 80058c6:	d01d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80058c8:	2b18      	cmp	r3, #24
 80058ca:	d815      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d007      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80058d4:	e010      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d6:	4b78      	ldr	r3, [pc, #480]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	4a77      	ldr	r2, [pc, #476]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058e2:	e010      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058e8:	3308      	adds	r3, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 fb1c 	bl	8006f28 <RCCEx_PLL2_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058f6:	e006      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005906:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10c      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800590e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005914:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005918:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	4966      	ldr	r1, [pc, #408]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005926:	e003      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800592c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005930:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005946:	460b      	mov	r3, r1
 8005948:	4313      	orrs	r3, r2
 800594a:	d03e      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800594c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005956:	d020      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800595c:	d819      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800595e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005960:	d01d      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005962:	2bc0      	cmp	r3, #192	@ 0xc0
 8005964:	d815      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800596a:	2b40      	cmp	r3, #64	@ 0x40
 800596c:	d007      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800596e:	e010      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005970:	4b51      	ldr	r3, [pc, #324]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	4a50      	ldr	r2, [pc, #320]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800597c:	e010      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800597e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005982:	3308      	adds	r3, #8
 8005984:	4618      	mov	r0, r3
 8005986:	f001 facf 	bl	8006f28 <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005990:	e006      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005998:	e002      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800599e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80059a8:	4b43      	ldr	r3, [pc, #268]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059ae:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80059b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b8:	493f      	ldr	r1, [pc, #252]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059c6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	2100      	movs	r1, #0
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d038      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80059e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f0:	d00e      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f6:	d815      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d017      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a00:	d110      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a02:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a0c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005a0e:	e00e      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a14:	3308      	adds	r3, #8
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fa86 	bl	8006f28 <RCCEx_PLL2_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005a22:	e004      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a2a:	e000      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a2e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005a36:	4b20      	ldr	r3, [pc, #128]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a46:	491c      	ldr	r1, [pc, #112]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a54:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	2100      	movs	r1, #0
 8005a62:	6039      	str	r1, [r7, #0]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4313      	orrs	r3, r2
 8005a72:	d039      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a7a:	2b30      	cmp	r3, #48	@ 0x30
 8005a7c:	d01e      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005a7e:	2b30      	cmp	r3, #48	@ 0x30
 8005a80:	d815      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d002      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d007      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005a8a:	e010      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	4a09      	ldr	r2, [pc, #36]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a96:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a98:	e011      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 fa41 	bl	8006f28 <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005aac:	e007      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005ab6:	bf00      	nop
 8005ab8:	44020c00 	.word	0x44020c00
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005acc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ad6:	4908      	ldr	r1, [pc, #32]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005ade:	e003      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ae4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005ae8:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	37a8      	adds	r7, #168	@ 0xa8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af6:	bf00      	nop
 8005af8:	44020c00 	.word	0x44020c00

08005afc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b08b      	sub	sp, #44	@ 0x2c
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005b04:	4bae      	ldr	r3, [pc, #696]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b0e:	4bac      	ldr	r3, [pc, #688]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005b18:	4ba9      	ldr	r3, [pc, #676]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b22:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b24:	4ba6      	ldr	r3, [pc, #664]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b30:	4ba3      	ldr	r3, [pc, #652]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	fb02 f303 	mul.w	r3, r2, r3
 8005b40:	ee07 3a90 	vmov	s15, r3
 8005b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b48:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8126 	beq.w	8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d053      	beq.n	8005c02 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d86f      	bhi.n	8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d003      	beq.n	8005b6e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d02b      	beq.n	8005bc4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005b6c:	e068      	b.n	8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b6e:	4b94      	ldr	r3, [pc, #592]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	08db      	lsrs	r3, r3, #3
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	4a92      	ldr	r2, [pc, #584]	@ (8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	ee07 3a90 	vmov	s15, r3
 8005b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ba6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005bc2:	e068      	b.n	8005c96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005dcc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005be4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005c00:	e049      	b.n	8005c96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8005c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c22:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005c3e:	e02a      	b.n	8005c96 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c40:	4b5f      	ldr	r3, [pc, #380]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	08db      	lsrs	r3, r3, #3
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c50:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c74:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c78:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005c94:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c96:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca2:	d121      	bne.n	8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005ca4:	4b46      	ldr	r3, [pc, #280]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d017      	beq.n	8005ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cb0:	4b43      	ldr	r3, [pc, #268]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb4:	0a5b      	lsrs	r3, r3, #9
 8005cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005cca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cee:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cfa:	d121      	bne.n	8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005cfc:	4b30      	ldr	r3, [pc, #192]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d08:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	e006      	b.n	8005d46 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	e002      	b.n	8005d46 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d46:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d52:	d121      	bne.n	8005d98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005d54:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d60:	4b17      	ldr	r3, [pc, #92]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d64:	0e1b      	lsrs	r3, r3, #24
 8005d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d76:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d7a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d86:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d8e:	e010      	b.n	8005db2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	e00c      	b.n	8005db2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]
}
 8005d9e:	e008      	b.n	8005db2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	bf00      	nop
 8005db4:	372c      	adds	r7, #44	@ 0x2c
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	44020c00 	.word	0x44020c00
 8005dc4:	03d09000 	.word	0x03d09000
 8005dc8:	46000000 	.word	0x46000000
 8005dcc:	4a742400 	.word	0x4a742400
 8005dd0:	4b742400 	.word	0x4b742400

08005dd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b08b      	sub	sp, #44	@ 0x2c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ddc:	4bae      	ldr	r3, [pc, #696]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005de6:	4bac      	ldr	r3, [pc, #688]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005df0:	4ba9      	ldr	r3, [pc, #676]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	0a1b      	lsrs	r3, r3, #8
 8005df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dfa:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005dfc:	4ba6      	ldr	r3, [pc, #664]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005e08:	4ba3      	ldr	r3, [pc, #652]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	fb02 f303 	mul.w	r3, r2, r3
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e20:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8126 	beq.w	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d053      	beq.n	8005eda <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d86f      	bhi.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d003      	beq.n	8005e46 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d02b      	beq.n	8005e9c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005e44:	e068      	b.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e46:	4b94      	ldr	r3, [pc, #592]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a92      	ldr	r2, [pc, #584]	@ (800609c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e7e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e9a:	e068      	b.n	8005f6e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80060a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ebc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005ed8:	e049      	b.n	8005f6e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005efa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005f16:	e02a      	b.n	8005f6e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f18:	4b5f      	ldr	r3, [pc, #380]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	08db      	lsrs	r3, r3, #3
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	4a5e      	ldr	r2, [pc, #376]	@ (800609c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
 8005f28:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f50:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80060a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f68:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005f6c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f7a:	d121      	bne.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005f7c:	4b46      	ldr	r3, [pc, #280]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d017      	beq.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f88:	4b43      	ldr	r3, [pc, #268]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8c:	0a5b      	lsrs	r3, r3, #9
 8005f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005f9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005fa2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fae:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fc6:	4b34      	ldr	r3, [pc, #208]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd2:	d121      	bne.n	8006018 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005fd4:	4b30      	ldr	r3, [pc, #192]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005ffa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006006:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e006      	b.n	800601e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	e002      	b.n	800601e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800601e:	4b1e      	ldr	r3, [pc, #120]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800602a:	d121      	bne.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800602c:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d017      	beq.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006038:	4b17      	ldr	r3, [pc, #92]	@ (8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800603a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603c:	0e1b      	lsrs	r3, r3, #24
 800603e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800604a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800604e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006052:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006066:	e010      	b.n	800608a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
}
 800606e:	e00c      	b.n	800608a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
}
 8006076:	e008      	b.n	800608a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
}
 800608a:	bf00      	nop
 800608c:	372c      	adds	r7, #44	@ 0x2c
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	44020c00 	.word	0x44020c00
 800609c:	03d09000 	.word	0x03d09000
 80060a0:	46000000 	.word	0x46000000
 80060a4:	4a742400 	.word	0x4a742400
 80060a8:	4b742400 	.word	0x4b742400

080060ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	@ 0x30
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80060b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ba:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80060be:	430b      	orrs	r3, r1
 80060c0:	d14b      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80060c2:	4bc4      	ldr	r3, [pc, #784]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80060c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80060ce:	4bc1      	ldr	r3, [pc, #772]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80060d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d108      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80060dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e2:	d104      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80060e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ea:	f000 bf14 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80060ee:	4bb9      	ldr	r3, [pc, #740]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80060f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060fc:	d108      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006104:	d104      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006106:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800610a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610c:	f000 bf03 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006110:	4bb0      	ldr	r3, [pc, #704]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611c:	d119      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006124:	d115      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006126:	4bab      	ldr	r3, [pc, #684]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800612e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006132:	d30a      	bcc.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006134:	4ba7      	ldr	r3, [pc, #668]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800613e:	4aa6      	ldr	r2, [pc, #664]	@ (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006146:	f000 bee6 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800614e:	f000 bee2 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006156:	f000 bede 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8006162:	ea52 0301 	orrs.w	r3, r2, r1
 8006166:	f000 838e 	beq.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800616a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616e:	2a01      	cmp	r2, #1
 8006170:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8006174:	f080 86cc 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8006180:	ea52 0301 	orrs.w	r3, r2, r1
 8006184:	f000 82aa 	beq.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618c:	2a01      	cmp	r2, #1
 800618e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8006192:	f080 86bd 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800619a:	f1a3 0110 	sub.w	r1, r3, #16
 800619e:	ea52 0301 	orrs.w	r3, r2, r1
 80061a2:	f000 8681 	beq.w	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061aa:	2a01      	cmp	r2, #1
 80061ac:	f173 0310 	sbcs.w	r3, r3, #16
 80061b0:	f080 86ae 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80061b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b8:	1f19      	subs	r1, r3, #4
 80061ba:	ea52 0301 	orrs.w	r3, r2, r1
 80061be:	f000 84b1 	beq.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80061c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c6:	2a01      	cmp	r2, #1
 80061c8:	f173 0304 	sbcs.w	r3, r3, #4
 80061cc:	f080 86a0 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80061d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80061d8:	430b      	orrs	r3, r1
 80061da:	f000 85aa 	beq.w	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80061de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e2:	497e      	ldr	r1, [pc, #504]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80061e4:	428a      	cmp	r2, r1
 80061e6:	f173 0300 	sbcs.w	r3, r3, #0
 80061ea:	f080 8691 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80061ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80061f6:	430b      	orrs	r3, r1
 80061f8:	f000 8532 	beq.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80061fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006200:	4977      	ldr	r1, [pc, #476]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8006202:	428a      	cmp	r2, r1
 8006204:	f173 0300 	sbcs.w	r3, r3, #0
 8006208:	f080 8682 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800620c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006210:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006214:	430b      	orrs	r3, r1
 8006216:	f000 84bc 	beq.w	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800621a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621e:	4971      	ldr	r1, [pc, #452]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006220:	428a      	cmp	r2, r1
 8006222:	f173 0300 	sbcs.w	r3, r3, #0
 8006226:	f080 8673 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800622a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006232:	430b      	orrs	r3, r1
 8006234:	f000 85f2 	beq.w	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8006238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623c:	496a      	ldr	r1, [pc, #424]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800623e:	428a      	cmp	r2, r1
 8006240:	f173 0300 	sbcs.w	r3, r3, #0
 8006244:	f080 8664 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006250:	430b      	orrs	r3, r1
 8006252:	f000 81e5 	beq.w	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625a:	4964      	ldr	r1, [pc, #400]	@ (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800625c:	428a      	cmp	r2, r1
 800625e:	f173 0300 	sbcs.w	r3, r3, #0
 8006262:	f080 8655 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800626e:	430b      	orrs	r3, r1
 8006270:	f000 83cc 	beq.w	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006278:	495d      	ldr	r1, [pc, #372]	@ (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800627a:	428a      	cmp	r2, r1
 800627c:	f173 0300 	sbcs.w	r3, r3, #0
 8006280:	f080 8646 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006288:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800628c:	430b      	orrs	r3, r1
 800628e:	f000 8331 	beq.w	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8006292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006296:	4957      	ldr	r1, [pc, #348]	@ (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006298:	428a      	cmp	r2, r1
 800629a:	f173 0300 	sbcs.w	r3, r3, #0
 800629e:	f080 8637 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80062a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80062aa:	430b      	orrs	r3, r1
 80062ac:	f000 82bb 	beq.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80062b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80062b8:	f173 0300 	sbcs.w	r3, r3, #0
 80062bc:	f080 8628 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80062c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80062c8:	430b      	orrs	r3, r1
 80062ca:	f000 826d 	beq.w	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80062ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80062d6:	428a      	cmp	r2, r1
 80062d8:	f173 0300 	sbcs.w	r3, r3, #0
 80062dc:	f080 8618 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80062e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80062e8:	430b      	orrs	r3, r1
 80062ea:	f000 821e 	beq.w	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80062ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80062f6:	428a      	cmp	r2, r1
 80062f8:	f173 0300 	sbcs.w	r3, r3, #0
 80062fc:	f080 8608 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006304:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006308:	430b      	orrs	r3, r1
 800630a:	f000 8137 	beq.w	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006312:	f241 0101 	movw	r1, #4097	@ 0x1001
 8006316:	428a      	cmp	r2, r1
 8006318:	f173 0300 	sbcs.w	r3, r3, #0
 800631c:	f080 85f8 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006324:	1f11      	subs	r1, r2, #4
 8006326:	430b      	orrs	r3, r1
 8006328:	f000 80d2 	beq.w	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 800632c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006330:	2a05      	cmp	r2, #5
 8006332:	f173 0300 	sbcs.w	r3, r3, #0
 8006336:	f080 85eb 	bcs.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800633a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633e:	1e51      	subs	r1, r2, #1
 8006340:	430b      	orrs	r3, r1
 8006342:	d006      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006348:	1e91      	subs	r1, r2, #2
 800634a:	430b      	orrs	r3, r1
 800634c:	d06c      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800634e:	f000 bddf 	b.w	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006352:	4b20      	ldr	r3, [pc, #128]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006364:	f7fe fd7a 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8006368:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800636a:	f000 bdd4 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800636e:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800637a:	d10a      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006382:	f107 030c 	add.w	r3, r7, #12
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fd24 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006390:	e048      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b02      	cmp	r3, #2
 800639c:	d10c      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d109      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	4a12      	ldr	r2, [pc, #72]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b6:	e035      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c4:	d11c      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d119      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80063ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d0:	e028      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80063d2:	bf00      	nop
 80063d4:	44020c00 	.word	0x44020c00
 80063d8:	00f42400 	.word	0x00f42400
 80063dc:	20000001 	.word	0x20000001
 80063e0:	10000001 	.word	0x10000001
 80063e4:	08000001 	.word	0x08000001
 80063e8:	04000001 	.word	0x04000001
 80063ec:	00200001 	.word	0x00200001
 80063f0:	00040001 	.word	0x00040001
 80063f4:	00020001 	.word	0x00020001
 80063f8:	03d09000 	.word	0x03d09000
 80063fc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006400:	4b9f      	ldr	r3, [pc, #636]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d106      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	2b05      	cmp	r3, #5
 8006412:	d103      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8006414:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006420:	f000 bd79 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006424:	f000 bd77 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006428:	4b95      	ldr	r3, [pc, #596]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800642a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800642e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006432:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800643a:	f7fe fcf9 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800643e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006440:	f000 bd69 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006444:	4b8e      	ldr	r3, [pc, #568]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800644c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006450:	d10a      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	2b08      	cmp	r3, #8
 8006456:	d107      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fcb9 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006466:	e031      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006468:	4b85      	ldr	r3, [pc, #532]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10c      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	2b18      	cmp	r3, #24
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800647a:	4b81      	ldr	r3, [pc, #516]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	4a7f      	ldr	r2, [pc, #508]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800648c:	e01e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800648e:	4b7c      	ldr	r3, [pc, #496]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649a:	d105      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d102      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80064a2:	4b79      	ldr	r3, [pc, #484]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80064a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a6:	e011      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064a8:	4b75      	ldr	r3, [pc, #468]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80064aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d106      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	2b28      	cmp	r3, #40	@ 0x28
 80064ba:	d103      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80064bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064c2:	e003      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80064c8:	f000 bd25 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80064cc:	f000 bd23 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064d0:	4b6b      	ldr	r3, [pc, #428]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80064d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064d6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80064da:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064e2:	f7fe fca5 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80064e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80064e8:	f000 bd15 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80064ec:	4b64      	ldr	r3, [pc, #400]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f8:	d10a      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d107      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fc65 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800650e:	e033      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006510:	4b5b      	ldr	r3, [pc, #364]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b02      	cmp	r3, #2
 800651a:	d10c      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006520:	d109      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006522:	4b57      	ldr	r3, [pc, #348]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	08db      	lsrs	r3, r3, #3
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	4a55      	ldr	r2, [pc, #340]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006534:	e020      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006536:	4b52      	ldr	r3, [pc, #328]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800653e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006542:	d106      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654a:	d102      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800654c:	4b4e      	ldr	r3, [pc, #312]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006550:	e012      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006552:	4b4b      	ldr	r3, [pc, #300]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d107      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006566:	d103      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8006568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656e:	e003      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006574:	f000 bccf 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006578:	f000 bccd 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800657c:	4b40      	ldr	r3, [pc, #256]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800657e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006582:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800658e:	f7fe fc7b 	bl	8004e88 <HAL_RCC_GetPCLK3Freq>
 8006592:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006594:	f000 bcbf 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800659e:	d108      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fc15 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065ae:	f000 bcb2 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80065b2:	4b33      	ldr	r3, [pc, #204]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d10d      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065c4:	d109      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	08db      	lsrs	r3, r3, #3
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80065d2:	fa22 f303 	lsr.w	r3, r2, r3
 80065d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d8:	e020      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80065da:	4b29      	ldr	r3, [pc, #164]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e6:	d106      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065ee:	d102      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80065f0:	4b25      	ldr	r3, [pc, #148]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f4:	e012      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80065f6:	4b22      	ldr	r3, [pc, #136]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	d107      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800660a:	d103      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 800660c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006612:	e003      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006618:	f000 bc7d 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800661c:	f000 bc7b 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006620:	4b17      	ldr	r3, [pc, #92]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006632:	f7fe fbe1 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8006636:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006638:	f000 bc6d 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	2b01      	cmp	r3, #1
 8006640:	d104      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006642:	f7fe faad 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8006646:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8006648:	f000 bc65 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	2b02      	cmp	r3, #2
 8006650:	d108      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006652:	f107 030c 	add.w	r3, r7, #12
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fbbc 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006660:	f000 bc59 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006664:	4b06      	ldr	r3, [pc, #24]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006670:	d10e      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	2b03      	cmp	r3, #3
 8006676:	d10b      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8006678:	4b04      	ldr	r3, [pc, #16]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800667a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800667c:	e02c      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800667e:	bf00      	nop
 8006680:	44020c00 	.word	0x44020c00
 8006684:	03d09000 	.word	0x03d09000
 8006688:	003d0900 	.word	0x003d0900
 800668c:	00f42400 	.word	0x00f42400
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006690:	4b95      	ldr	r3, [pc, #596]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d10c      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d109      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066a2:	4b91      	ldr	r3, [pc, #580]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	4a8f      	ldr	r2, [pc, #572]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b4:	e010      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80066b6:	4b8c      	ldr	r3, [pc, #560]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c2:	d105      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d102      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80066ca:	4b89      	ldr	r3, [pc, #548]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80066d4:	f000 bc1f 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80066d8:	f000 bc1d 	b.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80066dc:	4b82      	ldr	r3, [pc, #520]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80066e8:	4b7f      	ldr	r3, [pc, #508]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d106      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d103      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80066fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006704:	4b78      	ldr	r3, [pc, #480]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800670a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800670e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006712:	d106      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	2b08      	cmp	r3, #8
 8006718:	d103      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 800671a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800671e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8006726:	e3f6      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006728:	e3f5      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800672a:	4b6f      	ldr	r3, [pc, #444]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800672c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006730:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006734:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fe fb78 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8006740:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006742:	e3e8      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674a:	d107      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fb3f 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800675a:	e3dc      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800675c:	4b62      	ldr	r3, [pc, #392]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d10d      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800676e:	d109      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006770:	4b5d      	ldr	r3, [pc, #372]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a5c      	ldr	r2, [pc, #368]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006782:	e010      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006784:	4b58      	ldr	r3, [pc, #352]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006790:	d106      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006798:	d102      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800679a:	4b55      	ldr	r3, [pc, #340]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800679c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679e:	e002      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067a4:	e3b7      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80067a6:	e3b6      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80067a8:	4b4f      	ldr	r3, [pc, #316]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067ae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80067b2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067ba:	f7fe fb39 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80067be:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80067c0:	e3a9      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067c8:	d107      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ca:	f107 030c 	add.w	r3, r7, #12
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fb00 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067d8:	e39d      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80067da:	4b43      	ldr	r3, [pc, #268]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d10d      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067ee:	4b3e      	ldr	r3, [pc, #248]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	4a3c      	ldr	r2, [pc, #240]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006800:	e010      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006802:	4b39      	ldr	r3, [pc, #228]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800680a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800680e:	d106      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006816:	d102      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8006818:	4b35      	ldr	r3, [pc, #212]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800681a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800681c:	e002      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006822:	e378      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006824:	e377      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006826:	4b30      	ldr	r3, [pc, #192]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006828:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800682c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006838:	f7fe fafa 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 800683c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800683e:	e36a      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006846:	d107      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fac1 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006856:	e35e      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006858:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d10d      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800686c:	4b1e      	ldr	r3, [pc, #120]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	08db      	lsrs	r3, r3, #3
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	4a1d      	ldr	r2, [pc, #116]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800687e:	e34a      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006884:	e347      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006886:	4b18      	ldr	r3, [pc, #96]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800688c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006890:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006898:	f7fe faf6 	bl	8004e88 <HAL_RCC_GetPCLK3Freq>
 800689c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800689e:	e33a      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068a6:	d107      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fa91 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068b6:	e32e      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80068b8:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ca:	d109      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	4a05      	ldr	r2, [pc, #20]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068de:	e31a      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068e4:	e317      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80068e6:	bf00      	nop
 80068e8:	44020c00 	.word	0x44020c00
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068f4:	4b9b      	ldr	r3, [pc, #620]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80068f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006906:	d044      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800690e:	d879      	bhi.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006916:	d02d      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691e:	d871      	bhi.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006926:	d017      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800692e:	d869      	bhi.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693c:	d004      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800693e:	e061      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006940:	f7fe faa2 	bl	8004e88 <HAL_RCC_GetPCLK3Freq>
 8006944:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006946:	e060      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fa41 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006956:	e058      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006958:	4b82      	ldr	r3, [pc, #520]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800695a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d103      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800696c:	e04d      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006972:	e04a      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006974:	4b7b      	ldr	r3, [pc, #492]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800697a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800697e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006982:	d103      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006984:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006988:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800698a:	e03e      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006990:	e03b      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006992:	4b74      	ldr	r3, [pc, #464]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006998:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800699e:	4b71      	ldr	r3, [pc, #452]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069b0:	4b6c      	ldr	r3, [pc, #432]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	08db      	lsrs	r3, r3, #3
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	4a6b      	ldr	r2, [pc, #428]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
 80069c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c2:	e01e      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069c4:	4b67      	ldr	r3, [pc, #412]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d0:	d106      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d8:	d102      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80069da:	4b64      	ldr	r3, [pc, #400]	@ (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	e010      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069e0:	4b60      	ldr	r3, [pc, #384]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069ec:	d106      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069f4:	d102      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80069f6:	4b5e      	ldr	r3, [pc, #376]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fa:	e002      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006a00:	e003      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a08:	bf00      	nop
          }
        }
        break;
 8006a0a:	e284      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a0c:	4b55      	ldr	r3, [pc, #340]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006a0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a1e:	d044      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a26:	d879      	bhi.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a2e:	d02d      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a36:	d871      	bhi.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a3e:	d017      	beq.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a46:	d869      	bhi.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a54:	d004      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006a56:	e061      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fe f9ea 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8006a5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006a5e:	e060      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a60:	f107 030c 	add.w	r3, r7, #12
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff f9b5 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a6e:	e058      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a70:	4b3c      	ldr	r3, [pc, #240]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d103      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8006a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a84:	e04d      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a8a:	e04a      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a8c:	4b35      	ldr	r3, [pc, #212]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a9a:	d103      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8006a9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006aa2:	e03e      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006aa8:	e03b      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ab0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ac8:	4b26      	ldr	r3, [pc, #152]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	08db      	lsrs	r3, r3, #3
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	4a25      	ldr	r2, [pc, #148]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ada:	e01e      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af0:	d102      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006af2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006af6:	e010      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006af8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b04:	d106      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b0c:	d102      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b0e:	4b18      	ldr	r3, [pc, #96]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b12:	e002      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006b18:	e003      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006b1a:	e002      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b20:	bf00      	nop
          }
        }
        break;
 8006b22:	e1f8      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006b24:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b2e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006b30:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b3c:	d105      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8006b44:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006b48:	e1e5      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b50:	d110      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe ffd0 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b60:	e1d9      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006b62:	bf00      	nop
 8006b64:	44020c00 	.word	0x44020c00
 8006b68:	03d09000 	.word	0x03d09000
 8006b6c:	003d0900 	.word	0x003d0900
 8006b70:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7c:	f107 030c 	add.w	r3, r7, #12
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff f927 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b8a:	e1c4      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b90:	e1c1      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006b92:	4b9d      	ldr	r3, [pc, #628]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d859      	bhi.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bc1 	.word	0x08006bc1
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006c59 	.word	0x08006c59
 8006bb8:	08006be1 	.word	0x08006be1
 8006bbc:	08006be7 	.word	0x08006be7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc0:	f107 0318 	add.w	r3, r7, #24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe ff99 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bce:	e046      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff f8fd 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bde:	e03e      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006be0:	4b8a      	ldr	r3, [pc, #552]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006be4:	e03b      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006be6:	4b88      	ldr	r3, [pc, #544]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bf2:	4b85      	ldr	r3, [pc, #532]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c04:	4b80      	ldr	r3, [pc, #512]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	08db      	lsrs	r3, r3, #3
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	4a80      	ldr	r2, [pc, #512]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c16:	e01e      	b.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c18:	4b7b      	ldr	r3, [pc, #492]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006c2e:	4b79      	ldr	r3, [pc, #484]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c32:	e010      	b.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c34:	4b74      	ldr	r3, [pc, #464]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c40:	d106      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c48:	d102      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c4a:	4b73      	ldr	r3, [pc, #460]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4e:	e002      	b.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006c54:	e003      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8006c56:	e002      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c5c:	bf00      	nop
          }
        }
        break;
 8006c5e:	e15a      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006c60:	4b69      	ldr	r3, [pc, #420]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d022      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d858      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	2b18      	cmp	r3, #24
 8006c7c:	d019      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	2b18      	cmp	r3, #24
 8006c82:	d852      	bhi.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d008      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006c90:	e04b      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe ff30 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ca0:	e046      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ca2:	f107 030c 	add.w	r3, r7, #12
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7ff f894 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006cb0:	e03e      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006cb2:	4b56      	ldr	r3, [pc, #344]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006cb6:	e03b      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb8:	4b53      	ldr	r3, [pc, #332]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cbe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc4:	4b50      	ldr	r3, [pc, #320]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d10c      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	08db      	lsrs	r3, r3, #3
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ce8:	e01e      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cea:	4b47      	ldr	r3, [pc, #284]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf6:	d106      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfe:	d102      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d00:	4b44      	ldr	r3, [pc, #272]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d04:	e010      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d06:	4b40      	ldr	r3, [pc, #256]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d12:	d106      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d1a:	d102      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006d26:	e003      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006d28:	e002      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d2e:	bf00      	nop
          }
        }
        break;
 8006d30:	e0f1      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006d32:	4b35      	ldr	r3, [pc, #212]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d38:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d44:	d023      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4c:	d858      	bhi.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d52:	d019      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d58:	d852      	bhi.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d62:	2b40      	cmp	r3, #64	@ 0x40
 8006d64:	d008      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006d66:	e04b      	b.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d68:	f107 0318 	add.w	r3, r7, #24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fec5 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d76:	e046      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff f829 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d86:	e03e      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006d88:	4b20      	ldr	r3, [pc, #128]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d8c:	e03b      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d10c      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dac:	4b16      	ldr	r3, [pc, #88]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	08db      	lsrs	r3, r3, #3
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	4a16      	ldr	r2, [pc, #88]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dbe:	e01e      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dc0:	4b11      	ldr	r3, [pc, #68]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd4:	d102      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dda:	e010      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006de8:	d106      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006df0:	d102      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006df2:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df6:	e002      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006dfc:	e003      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e04:	bf00      	nop
          }
        }
        break;
 8006e06:	e086      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006e08:	44020c00 	.word	0x44020c00
 8006e0c:	00bb8000 	.word	0x00bb8000
 8006e10:	03d09000 	.word	0x03d09000
 8006e14:	003d0900 	.word	0x003d0900
 8006e18:	00f42400 	.word	0x00f42400
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006e1c:	4b40      	ldr	r3, [pc, #256]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006e28:	4b3d      	ldr	r3, [pc, #244]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e34:	d105      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8006e3c:	4b39      	ldr	r3, [pc, #228]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e40:	e031      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006e42:	4b37      	ldr	r3, [pc, #220]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e4e:	d10a      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d107      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e56:	f107 0318 	add.w	r3, r7, #24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fe4e 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e64:	e01f      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006e66:	4b2e      	ldr	r3, [pc, #184]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d106      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d103      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e80:	e011      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006e82:	4b27      	ldr	r3, [pc, #156]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e94:	2b30      	cmp	r3, #48	@ 0x30
 8006e96:	d103      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8006e98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e9e:	e002      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8006ea4:	e037      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006ea6:	e036      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006eaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d107      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eba:	f107 0318 	add.w	r3, r7, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fe1c 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8006ec8:	e025      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8006eca:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ed6:	d10a      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d107      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe ff76 	bl	8005dd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eec:	e00f      	b.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006eee:	4b0c      	ldr	r3, [pc, #48]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006efa:	d105      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	2b30      	cmp	r3, #48	@ 0x30
 8006f00:	d102      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8006f02:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f06:	e002      	b.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8006f0c:	e003      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006f0e:	e002      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006f14:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8006f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3730      	adds	r7, #48	@ 0x30
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	44020c00 	.word	0x44020c00
 8006f24:	02dc6c00 	.word	0x02dc6c00

08006f28 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006f30:	4b48      	ldr	r3, [pc, #288]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a47      	ldr	r2, [pc, #284]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f3c:	f7fa feae 	bl	8001c9c <HAL_GetTick>
 8006f40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f42:	e008      	b.n	8006f56 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f44:	f7fa feaa 	bl	8001c9c <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e07a      	b.n	800704c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f56:	4b3f      	ldr	r3, [pc, #252]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006f62:	4b3c      	ldr	r3, [pc, #240]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6811      	ldr	r1, [r2, #0]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6852      	ldr	r2, [r2, #4]
 8006f76:	0212      	lsls	r2, r2, #8
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	4936      	ldr	r1, [pc, #216]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	025b      	lsls	r3, r3, #9
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	061b      	lsls	r3, r3, #24
 8006fac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fb0:	4928      	ldr	r1, [pc, #160]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	f023 020c 	bic.w	r2, r3, #12
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	4924      	ldr	r1, [pc, #144]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006fc8:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	f023 0220 	bic.w	r2, r3, #32
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	491f      	ldr	r1, [pc, #124]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006fda:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	491c      	ldr	r1, [pc, #112]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	4a19      	ldr	r2, [pc, #100]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006fee:	f023 0310 	bic.w	r3, r3, #16
 8006ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006ff4:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ffc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6a12      	ldr	r2, [r2, #32]
 8007004:	00d2      	lsls	r2, r2, #3
 8007006:	4913      	ldr	r1, [pc, #76]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800700c:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a10      	ldr	r2, [pc, #64]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8007012:	f043 0310 	orr.w	r3, r3, #16
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007018:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a0d      	ldr	r2, [pc, #52]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 800701e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007022:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007024:	f7fa fe3a 	bl	8001c9c <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800702a:	e008      	b.n	800703e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800702c:	f7fa fe36 	bl	8001c9c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e006      	b.n	800704c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800703e:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <RCCEx_PLL2_Config+0x12c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0

}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	44020c00 	.word	0x44020c00

08007058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e049      	b.n	80070fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fa fba4 	bl	80017cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4610      	mov	r0, r2
 8007098:	f000 f94a 	bl	8007330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007122:	2302      	movs	r3, #2
 8007124:	e0ff      	b.n	8007326 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b14      	cmp	r3, #20
 8007132:	f200 80f0 	bhi.w	8007316 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007136:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007191 	.word	0x08007191
 8007140:	08007317 	.word	0x08007317
 8007144:	08007317 	.word	0x08007317
 8007148:	08007317 	.word	0x08007317
 800714c:	080071d1 	.word	0x080071d1
 8007150:	08007317 	.word	0x08007317
 8007154:	08007317 	.word	0x08007317
 8007158:	08007317 	.word	0x08007317
 800715c:	08007213 	.word	0x08007213
 8007160:	08007317 	.word	0x08007317
 8007164:	08007317 	.word	0x08007317
 8007168:	08007317 	.word	0x08007317
 800716c:	08007253 	.word	0x08007253
 8007170:	08007317 	.word	0x08007317
 8007174:	08007317 	.word	0x08007317
 8007178:	08007317 	.word	0x08007317
 800717c:	08007295 	.word	0x08007295
 8007180:	08007317 	.word	0x08007317
 8007184:	08007317 	.word	0x08007317
 8007188:	08007317 	.word	0x08007317
 800718c:	080072d5 	.word	0x080072d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f930 	bl	80073fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0208 	orr.w	r2, r2, #8
 80071aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0204 	bic.w	r2, r2, #4
 80071ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6999      	ldr	r1, [r3, #24]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	691a      	ldr	r2, [r3, #16]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	619a      	str	r2, [r3, #24]
      break;
 80071ce:	e0a5      	b.n	800731c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68b9      	ldr	r1, [r7, #8]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f978 	bl	80074cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6999      	ldr	r1, [r3, #24]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	021a      	lsls	r2, r3, #8
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	619a      	str	r2, [r3, #24]
      break;
 8007210:	e084      	b.n	800731c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 f9c5 	bl	80075a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0208 	orr.w	r2, r2, #8
 800722c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0204 	bic.w	r2, r2, #4
 800723c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69d9      	ldr	r1, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	61da      	str	r2, [r3, #28]
      break;
 8007250:	e064      	b.n	800731c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fa11 	bl	8007680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800726c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800727c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69d9      	ldr	r1, [r3, #28]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	021a      	lsls	r2, r3, #8
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	61da      	str	r2, [r3, #28]
      break;
 8007292:	e043      	b.n	800731c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fa5e 	bl	800775c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0208 	orr.w	r2, r2, #8
 80072ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0204 	bic.w	r2, r2, #4
 80072be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80072d2:	e023      	b.n	800731c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fa8a 	bl	80077f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	021a      	lsls	r2, r3, #8
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007314:	e002      	b.n	800731c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
      break;
 800731a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a2c      	ldr	r2, [pc, #176]	@ (80073f4 <TIM_Base_SetConfig+0xc4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_Base_SetConfig+0x28>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734e:	d003      	beq.n	8007358 <TIM_Base_SetConfig+0x28>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a29      	ldr	r2, [pc, #164]	@ (80073f8 <TIM_Base_SetConfig+0xc8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d108      	bne.n	800736a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a21      	ldr	r2, [pc, #132]	@ (80073f4 <TIM_Base_SetConfig+0xc4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d007      	beq.n	8007382 <TIM_Base_SetConfig+0x52>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007378:	d003      	beq.n	8007382 <TIM_Base_SetConfig+0x52>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1e      	ldr	r2, [pc, #120]	@ (80073f8 <TIM_Base_SetConfig+0xc8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d108      	bne.n	8007394 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a0e      	ldr	r2, [pc, #56]	@ (80073f4 <TIM_Base_SetConfig+0xc4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d103      	bne.n	80073c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f023 0201 	bic.w	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	611a      	str	r2, [r3, #16]
  }
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40000400 	.word	0x40000400

080073fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f023 0201 	bic.w	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800742a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 0302 	bic.w	r3, r3, #2
 8007448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a1c      	ldr	r2, [pc, #112]	@ (80074c8 <TIM_OC1_SetConfig+0xcc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d10c      	bne.n	8007476 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0308 	bic.w	r3, r3, #8
 8007462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f023 0304 	bic.w	r3, r3, #4
 8007474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a13      	ldr	r2, [pc, #76]	@ (80074c8 <TIM_OC1_SetConfig+0xcc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d111      	bne.n	80074a2 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	621a      	str	r2, [r3, #32]
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40012c00 	.word	0x40012c00

080074cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f023 0210 	bic.w	r2, r3, #16
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0320 	bic.w	r3, r3, #32
 800751a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1e      	ldr	r2, [pc, #120]	@ (80075a4 <TIM_OC2_SetConfig+0xd8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10d      	bne.n	800754c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a15      	ldr	r2, [pc, #84]	@ (80075a4 <TIM_OC2_SetConfig+0xd8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d113      	bne.n	800757c <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800755a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40012c00 	.word	0x40012c00

080075a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	@ (800767c <TIM_OC3_SetConfig+0xd4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10d      	bne.n	8007626 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <TIM_OC3_SetConfig+0xd4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d113      	bne.n	8007656 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800763c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	621a      	str	r2, [r3, #32]
}
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00

08007680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	021b      	lsls	r3, r3, #8
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	031b      	lsls	r3, r3, #12
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <TIM_OC4_SetConfig+0xd8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10d      	bne.n	8007700 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	031b      	lsls	r3, r3, #12
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a15      	ldr	r2, [pc, #84]	@ (8007758 <TIM_OC4_SetConfig+0xd8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d113      	bne.n	8007730 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800770e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007716:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	019b      	lsls	r3, r3, #6
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	019b      	lsls	r3, r3, #6
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	621a      	str	r2, [r3, #32]
}
 800774a:	bf00      	nop
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40012c00 	.word	0x40012c00

0800775c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800778a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	041b      	lsls	r3, r3, #16
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a0f      	ldr	r2, [pc, #60]	@ (80077f0 <TIM_OC5_SetConfig+0x94>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d109      	bne.n	80077ca <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	621a      	str	r2, [r3, #32]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	40012c00 	.word	0x40012c00

080077f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800783a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	051b      	lsls	r3, r3, #20
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a10      	ldr	r2, [pc, #64]	@ (800788c <TIM_OC6_SetConfig+0x98>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d109      	bne.n	8007864 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	029b      	lsls	r3, r3, #10
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	621a      	str	r2, [r3, #32]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40012c00 	.word	0x40012c00

08007890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e051      	b.n	800794c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a22      	ldr	r2, [pc, #136]	@ (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d108      	bne.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a14      	ldr	r2, [pc, #80]	@ (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d009      	beq.n	8007920 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007914:	d004      	beq.n	8007920 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a10      	ldr	r2, [pc, #64]	@ (800795c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10c      	bne.n	800793a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	4313      	orrs	r3, r2
 8007930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40012c00 	.word	0x40012c00
 800795c:	40000400 	.word	0x40000400

08007960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007978:	2302      	movs	r3, #2
 800797a:	e06e      	b.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	041b      	lsls	r3, r3, #16
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a17      	ldr	r2, [pc, #92]	@ (8007a68 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d11c      	bne.n	8007a48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	051b      	lsls	r3, r3, #20
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40012c00 	.word	0x40012c00

08007a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e042      	b.n	8007b04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7f9 febd 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2224      	movs	r2, #36	@ 0x24
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0201 	bic.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9a6 	bl	8007e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f825 	bl	8007b0c <UART_SetConfig>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e01b      	b.n	8007b04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa25 	bl	8007f4c <UART_CheckIdleState>
 8007b02:	4603      	mov	r3, r0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b10:	b094      	sub	sp, #80	@ 0x50
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	498a      	ldr	r1, [pc, #552]	@ (8007d64 <UART_SetConfig+0x258>)
 8007b3c:	4019      	ands	r1, r3
 8007b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b44:	430b      	orrs	r3, r1
 8007b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	68d9      	ldr	r1, [r3, #12]
 8007b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	ea40 0301 	orr.w	r3, r0, r1
 8007b5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007d68 <UART_SetConfig+0x25c>)
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d004      	beq.n	8007b7a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b76:	4313      	orrs	r3, r2
 8007b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007b84:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	f023 000f 	bic.w	r0, r3, #15
 8007b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	ea40 0301 	orr.w	r3, r0, r1
 8007ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b6f      	ldr	r3, [pc, #444]	@ (8007d6c <UART_SetConfig+0x260>)
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d102      	bne.n	8007bba <UART_SetConfig+0xae>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb8:	e01a      	b.n	8007bf0 <UART_SetConfig+0xe4>
 8007bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8007d70 <UART_SetConfig+0x264>)
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d102      	bne.n	8007bca <UART_SetConfig+0xbe>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bc8:	e012      	b.n	8007bf0 <UART_SetConfig+0xe4>
 8007bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4b69      	ldr	r3, [pc, #420]	@ (8007d74 <UART_SetConfig+0x268>)
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d102      	bne.n	8007bda <UART_SetConfig+0xce>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd8:	e00a      	b.n	8007bf0 <UART_SetConfig+0xe4>
 8007bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b62      	ldr	r3, [pc, #392]	@ (8007d68 <UART_SetConfig+0x25c>)
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d103      	bne.n	8007bec <UART_SetConfig+0xe0>
 8007be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bea:	e001      	b.n	8007bf0 <UART_SetConfig+0xe4>
 8007bec:	2300      	movs	r3, #0
 8007bee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8007d68 <UART_SetConfig+0x25c>)
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d171      	bne.n	8007cde <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c06:	f7fe fa51 	bl	80060ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007c0a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80e2 	beq.w	8007dd8 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	4a57      	ldr	r2, [pc, #348]	@ (8007d78 <UART_SetConfig+0x26c>)
 8007c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	4413      	add	r3, r2
 8007c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d305      	bcc.n	8007c44 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007c4a:	e0c5      	b.n	8007dd8 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4e:	2200      	movs	r2, #0
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	61fa      	str	r2, [r7, #28]
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c58:	4a47      	ldr	r2, [pc, #284]	@ (8007d78 <UART_SetConfig+0x26c>)
 8007c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2200      	movs	r2, #0
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	617a      	str	r2, [r7, #20]
 8007c66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c6e:	f7f8 fe49 	bl	8000904 <__aeabi_uldivmod>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	020b      	lsls	r3, r1, #8
 8007c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c88:	0202      	lsls	r2, r0, #8
 8007c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c8c:	6849      	ldr	r1, [r1, #4]
 8007c8e:	0849      	lsrs	r1, r1, #1
 8007c90:	2000      	movs	r0, #0
 8007c92:	460c      	mov	r4, r1
 8007c94:	4605      	mov	r5, r0
 8007c96:	eb12 0804 	adds.w	r8, r2, r4
 8007c9a:	eb43 0905 	adc.w	r9, r3, r5
 8007c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	60fa      	str	r2, [r7, #12]
 8007ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cac:	4640      	mov	r0, r8
 8007cae:	4649      	mov	r1, r9
 8007cb0:	f7f8 fe28 	bl	8000904 <__aeabi_uldivmod>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4613      	mov	r3, r2
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cc2:	d308      	bcc.n	8007cd6 <UART_SetConfig+0x1ca>
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cca:	d204      	bcs.n	8007cd6 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	e080      	b.n	8007dd8 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007cdc:	e07c      	b.n	8007dd8 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce6:	d149      	bne.n	8007d7c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cea:	2200      	movs	r2, #0
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cf4:	f7fe f9da 	bl	80060ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007cf8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d06b      	beq.n	8007dd8 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <UART_SetConfig+0x26c>)
 8007d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d12:	005a      	lsls	r2, r3, #1
 8007d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	085b      	lsrs	r3, r3, #1
 8007d1a:	441a      	add	r2, r3
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d28:	2b0f      	cmp	r3, #15
 8007d2a:	d916      	bls.n	8007d5a <UART_SetConfig+0x24e>
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d32:	d212      	bcs.n	8007d5a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f023 030f 	bic.w	r3, r3, #15
 8007d3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007d56:	60da      	str	r2, [r3, #12]
 8007d58:	e03e      	b.n	8007dd8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007d60:	e03a      	b.n	8007dd8 <UART_SetConfig+0x2cc>
 8007d62:	bf00      	nop
 8007d64:	cfff69f3 	.word	0xcfff69f3
 8007d68:	44002400 	.word	0x44002400
 8007d6c:	40013800 	.word	0x40013800
 8007d70:	40004400 	.word	0x40004400
 8007d74:	40004800 	.word	0x40004800
 8007d78:	08008618 	.word	0x08008618
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7e:	2200      	movs	r2, #0
 8007d80:	469a      	mov	sl, r3
 8007d82:	4693      	mov	fp, r2
 8007d84:	4650      	mov	r0, sl
 8007d86:	4659      	mov	r1, fp
 8007d88:	f7fe f990 	bl	80060ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007d8c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d021      	beq.n	8007dd8 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	4a1a      	ldr	r2, [pc, #104]	@ (8007e04 <UART_SetConfig+0x2f8>)
 8007d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	085b      	lsrs	r3, r3, #1
 8007dac:	441a      	add	r2, r3
 8007dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d909      	bls.n	8007dd2 <UART_SetConfig+0x2c6>
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc4:	d205      	bcs.n	8007dd2 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60da      	str	r2, [r3, #12]
 8007dd0:	e002      	b.n	8007dd8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	2200      	movs	r2, #0
 8007dec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	2200      	movs	r2, #0
 8007df2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007df4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3750      	adds	r7, #80	@ 0x50
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e02:	bf00      	nop
 8007e04:	08008618 	.word	0x08008618

08007e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01a      	beq.n	8007f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f06:	d10a      	bne.n	8007f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	605a      	str	r2, [r3, #4]
  }
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b098      	sub	sp, #96	@ 0x60
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f5c:	f7f9 fe9e 	bl	8001c9c <HAL_GetTick>
 8007f60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d12f      	bne.n	8007fd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f88e 	bl	80080a0 <UART_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d022      	beq.n	8007fd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007faa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e063      	b.n	8008098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d149      	bne.n	8008072 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f857 	bl	80080a0 <UART_WaitOnFlagUntilTimeout>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d03c      	beq.n	8008072 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	623b      	str	r3, [r7, #32]
   return(result);
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800800c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008016:	633b      	str	r3, [r7, #48]	@ 0x30
 8008018:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800801c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e6      	bne.n	8007ff8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	60fb      	str	r3, [r7, #12]
   return(result);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f023 0301 	bic.w	r3, r3, #1
 8008040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800804a:	61fa      	str	r2, [r7, #28]
 800804c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	69b9      	ldr	r1, [r7, #24]
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	617b      	str	r3, [r7, #20]
   return(result);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e5      	bne.n	800802a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e012      	b.n	8008098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3758      	adds	r7, #88	@ 0x58
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	4613      	mov	r3, r2
 80080ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b0:	e04f      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080b8:	d04b      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ba:	f7f9 fdef 	bl	8001c9c <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e04e      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d037      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b80      	cmp	r3, #128	@ 0x80
 80080e6:	d034      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d031      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d110      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2208      	movs	r2, #8
 8008102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f838 	bl	800817a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2208      	movs	r2, #8
 800810e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e029      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800812c:	d111      	bne.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f81e 	bl	800817a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e00f      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4013      	ands	r3, r2
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	429a      	cmp	r2, r3
 800816e:	d0a0      	beq.n	80080b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800817a:	b480      	push	{r7}
 800817c:	b095      	sub	sp, #84	@ 0x54
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e6      	bne.n	8008182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e3      	bne.n	80081b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d118      	bne.n	8008226 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	60bb      	str	r3, [r7, #8]
   return(result);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f023 0310 	bic.w	r3, r3, #16
 8008208:	647b      	str	r3, [r7, #68]	@ 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6979      	ldr	r1, [r7, #20]
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	613b      	str	r3, [r7, #16]
   return(result);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e6      	bne.n	80081f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800823a:	bf00      	nop
 800823c:	3754      	adds	r7, #84	@ 0x54
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_UARTEx_DisableFifoMode+0x16>
 8008258:	2302      	movs	r3, #2
 800825a:	e027      	b.n	80082ac <HAL_UARTEx_DisableFifoMode+0x66>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2224      	movs	r2, #36	@ 0x24
 8008268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800828a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e02d      	b.n	800832c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2224      	movs	r2, #36	@ 0x24
 80082dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0201 	bic.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f84f 	bl	80083b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008348:	2302      	movs	r3, #2
 800834a:	e02d      	b.n	80083a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2224      	movs	r2, #36	@ 0x24
 8008358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0201 	bic.w	r2, r2, #1
 8008372:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f811 	bl	80083b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d108      	bne.n	80083d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083d0:	e031      	b.n	8008436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083d2:	2308      	movs	r3, #8
 80083d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083d6:	2308      	movs	r3, #8
 80083d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	0e5b      	lsrs	r3, r3, #25
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	0f5b      	lsrs	r3, r3, #29
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	7b3a      	ldrb	r2, [r7, #12]
 80083fe:	4911      	ldr	r1, [pc, #68]	@ (8008444 <UARTEx_SetNbDataToProcess+0x94>)
 8008400:	5c8a      	ldrb	r2, [r1, r2]
 8008402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008406:	7b3a      	ldrb	r2, [r7, #12]
 8008408:	490f      	ldr	r1, [pc, #60]	@ (8008448 <UARTEx_SetNbDataToProcess+0x98>)
 800840a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800840c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	7b7a      	ldrb	r2, [r7, #13]
 800841c:	4909      	ldr	r1, [pc, #36]	@ (8008444 <UARTEx_SetNbDataToProcess+0x94>)
 800841e:	5c8a      	ldrb	r2, [r1, r2]
 8008420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008424:	7b7a      	ldrb	r2, [r7, #13]
 8008426:	4908      	ldr	r1, [pc, #32]	@ (8008448 <UARTEx_SetNbDataToProcess+0x98>)
 8008428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800842a:	fb93 f3f2 	sdiv	r3, r3, r2
 800842e:	b29a      	uxth	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	08008630 	.word	0x08008630
 8008448:	08008638 	.word	0x08008638

0800844c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008458:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008464:	f043 0201 	orr.w	r2, r3, #1
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800847a:	b084      	sub	sp, #16
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	f107 001c 	add.w	r0, r7, #28
 8008488:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e008      	b.n	80084a8 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff ffd8 	bl	800844c <USB_CoreReset>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b2:	b004      	add	sp, #16
 80084b4:	4770      	bx	lr

080084b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80084be:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80084c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	43db      	mvns	r3, r3
 80084cc:	401a      	ands	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80084fe:	e00b      	b.n	8008518 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d106      	bne.n	8008514 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	641a      	str	r2, [r3, #64]	@ 0x40
 8008512:	e001      	b.n	8008518 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008526:	b084      	sub	sp, #16
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	f107 001c 	add.w	r0, r7, #28
 8008534:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	f023 0201 	bic.w	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800854a:	2100      	movs	r1, #0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff ffc7 	bl	80084e0 <USB_SetCurrentMode>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008568:	b004      	add	sp, #16
 800856a:	4770      	bx	lr

0800856c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008578:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <memset>:
 800858e:	4402      	add	r2, r0
 8008590:	4603      	mov	r3, r0
 8008592:	4293      	cmp	r3, r2
 8008594:	d100      	bne.n	8008598 <memset+0xa>
 8008596:	4770      	bx	lr
 8008598:	f803 1b01 	strb.w	r1, [r3], #1
 800859c:	e7f9      	b.n	8008592 <memset+0x4>
	...

080085a0 <__libc_init_array>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4d0d      	ldr	r5, [pc, #52]	@ (80085d8 <__libc_init_array+0x38>)
 80085a4:	2600      	movs	r6, #0
 80085a6:	4c0d      	ldr	r4, [pc, #52]	@ (80085dc <__libc_init_array+0x3c>)
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	d109      	bne.n	80085c4 <__libc_init_array+0x24>
 80085b0:	4d0b      	ldr	r5, [pc, #44]	@ (80085e0 <__libc_init_array+0x40>)
 80085b2:	2600      	movs	r6, #0
 80085b4:	4c0b      	ldr	r4, [pc, #44]	@ (80085e4 <__libc_init_array+0x44>)
 80085b6:	f000 f817 	bl	80085e8 <_init>
 80085ba:	1b64      	subs	r4, r4, r5
 80085bc:	10a4      	asrs	r4, r4, #2
 80085be:	42a6      	cmp	r6, r4
 80085c0:	d105      	bne.n	80085ce <__libc_init_array+0x2e>
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c8:	3601      	adds	r6, #1
 80085ca:	4798      	blx	r3
 80085cc:	e7ee      	b.n	80085ac <__libc_init_array+0xc>
 80085ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d2:	3601      	adds	r6, #1
 80085d4:	4798      	blx	r3
 80085d6:	e7f2      	b.n	80085be <__libc_init_array+0x1e>
 80085d8:	08008648 	.word	0x08008648
 80085dc:	08008648 	.word	0x08008648
 80085e0:	08008648 	.word	0x08008648
 80085e4:	0800864c 	.word	0x0800864c

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
